
STM32H750B-DK_C_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800ba54  0800ba54  0001ba54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bb20  0800bb20  0001bb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bb28  0800bb28  0001bb28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bb2c  0800bb2c  0001bb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800bb30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0800bba4  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0800bc04  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d44  24000134  0800bc64  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000e78  0800bc64  00020e78  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fe0c  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055e4  00000000  00000000  0004ff6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020c8  00000000  00000000  00055558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e98  00000000  00000000  00057620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000432ce  00000000  00000000  000594b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f378  00000000  00000000  0009c786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019b24c  00000000  00000000  000cbafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00266d4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090d0  00000000  00000000  00266d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ba3c 	.word	0x0800ba3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0800ba3c 	.word	0x0800ba3c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <MX_ADC1_Init+0xe8>)
 80006ba:	4a31      	ldr	r2, [pc, #196]	; (8000780 <MX_ADC1_Init+0xec>)
 80006bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80006be:	4b2f      	ldr	r3, [pc, #188]	; (800077c <MX_ADC1_Init+0xe8>)
 80006c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80006c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006c6:	4b2d      	ldr	r3, [pc, #180]	; (800077c <MX_ADC1_Init+0xe8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006cc:	4b2b      	ldr	r3, [pc, #172]	; (800077c <MX_ADC1_Init+0xe8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b2a      	ldr	r3, [pc, #168]	; (800077c <MX_ADC1_Init+0xe8>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d8:	4b28      	ldr	r3, [pc, #160]	; (800077c <MX_ADC1_Init+0xe8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <MX_ADC1_Init+0xe8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <MX_ADC1_Init+0xe8>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_ADC1_Init+0xe8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_ADC1_Init+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_ADC1_Init+0xe8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_ADC1_Init+0xe8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_ADC1_Init+0xe8>)
 8000704:	2200      	movs	r2, #0
 8000706:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_ADC1_Init+0xe8>)
 800070a:	2200      	movs	r2, #0
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_ADC1_Init+0xe8>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000716:	4819      	ldr	r0, [pc, #100]	; (800077c <MX_ADC1_Init+0xe8>)
 8000718:	f002 fb34 	bl	8002d84 <HAL_ADC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000722:	f001 fa61 	bl	8001be8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4812      	ldr	r0, [pc, #72]	; (800077c <MX_ADC1_Init+0xe8>)
 8000732:	f003 f949 	bl	80039c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800073c:	f001 fa54 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000740:	2301      	movs	r3, #1
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000744:	2306      	movs	r3, #6
 8000746:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000750:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000752:	2304      	movs	r3, #4
 8000754:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_ADC1_Init+0xe8>)
 8000764:	f002 fcb0 	bl	80030c8 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800076e:	f001 fa3b 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	24000150 	.word	0x24000150
 8000780:	40022000 	.word	0x40022000

08000784 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]
 800079a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <MX_ADC2_Init+0xc0>)
 800079e:	4a2a      	ldr	r2, [pc, #168]	; (8000848 <MX_ADC2_Init+0xc4>)
 80007a0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007a8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b0:	4b24      	ldr	r3, [pc, #144]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007b8:	2204      	movs	r2, #4
 80007ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007bc:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007fa:	4812      	ldr	r0, [pc, #72]	; (8000844 <MX_ADC2_Init+0xc0>)
 80007fc:	f002 fac2 	bl	8002d84 <HAL_ADC_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000806:	f001 f9ef 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800080a:	2301      	movs	r3, #1
 800080c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800080e:	2306      	movs	r3, #6
 8000810:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000816:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800081a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800081c:	2304      	movs	r3, #4
 800081e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_ADC2_Init+0xc0>)
 800082e:	f002 fc4b 	bl	80030c8 <HAL_ADC_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000838:	f001 f9d6 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	240001b4 	.word	0x240001b4
 8000848:	40022100 	.word	0x40022100

0800084c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000864:	4b27      	ldr	r3, [pc, #156]	; (8000904 <MX_ADC3_Init+0xb8>)
 8000866:	4a28      	ldr	r2, [pc, #160]	; (8000908 <MX_ADC3_Init+0xbc>)
 8000868:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800086a:	4b26      	ldr	r3, [pc, #152]	; (8000904 <MX_ADC3_Init+0xb8>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000870:	4b24      	ldr	r3, [pc, #144]	; (8000904 <MX_ADC3_Init+0xb8>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000876:	4b23      	ldr	r3, [pc, #140]	; (8000904 <MX_ADC3_Init+0xb8>)
 8000878:	2204      	movs	r2, #4
 800087a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800087c:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_ADC3_Init+0xb8>)
 800087e:	2200      	movs	r2, #0
 8000880:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000882:	4b20      	ldr	r3, [pc, #128]	; (8000904 <MX_ADC3_Init+0xb8>)
 8000884:	2200      	movs	r2, #0
 8000886:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <MX_ADC3_Init+0xb8>)
 800088a:	2201      	movs	r2, #1
 800088c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_ADC3_Init+0xb8>)
 8000890:	2200      	movs	r2, #0
 8000892:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_ADC3_Init+0xb8>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_ADC3_Init+0xb8>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_ADC3_Init+0xb8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_ADC3_Init+0xb8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_ADC3_Init+0xb8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_ADC3_Init+0xb8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008ba:	4812      	ldr	r0, [pc, #72]	; (8000904 <MX_ADC3_Init+0xb8>)
 80008bc:	f002 fa62 	bl	8002d84 <HAL_ADC_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80008c6:	f001 f98f 	bl	8001be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_ADC3_Init+0xc0>)
 80008cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ce:	2306      	movs	r3, #6
 80008d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008d6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008da:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008dc:	2304      	movs	r3, #4
 80008de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_ADC3_Init+0xb8>)
 80008ee:	f002 fbeb 	bl	80030c8 <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80008f8:	f001 f976 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	24000218 	.word	0x24000218
 8000908:	58026000 	.word	0x58026000
 800090c:	1d500080 	.word	0x1d500080

08000910 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	; 0x40
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a72      	ldr	r2, [pc, #456]	; (8000af8 <HAL_ADC_MspInit+0x1e8>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d14e      	bne.n	80009d0 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000932:	4b72      	ldr	r3, [pc, #456]	; (8000afc <HAL_ADC_MspInit+0x1ec>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	4a70      	ldr	r2, [pc, #448]	; (8000afc <HAL_ADC_MspInit+0x1ec>)
 800093a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800093c:	4b6f      	ldr	r3, [pc, #444]	; (8000afc <HAL_ADC_MspInit+0x1ec>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d10e      	bne.n	8000962 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000944:	4b6e      	ldr	r3, [pc, #440]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000946:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800094a:	4a6d      	ldr	r2, [pc, #436]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 800094c:	f043 0320 	orr.w	r3, r3, #32
 8000950:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000954:	4b6a      	ldr	r3, [pc, #424]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000956:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800095a:	f003 0320 	and.w	r3, r3, #32
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000960:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b67      	ldr	r3, [pc, #412]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	4a65      	ldr	r2, [pc, #404]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000972:	4b63      	ldr	r3, [pc, #396]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b5f      	ldr	r3, [pc, #380]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000986:	4a5e      	ldr	r2, [pc, #376]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000990:	4b5b      	ldr	r3, [pc, #364]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	623b      	str	r3, [r7, #32]
 800099c:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800099e:	2301      	movs	r3, #1
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a2:	2303      	movs	r3, #3
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ae:	4619      	mov	r1, r3
 80009b0:	4854      	ldr	r0, [pc, #336]	; (8000b04 <HAL_ADC_MspInit+0x1f4>)
 80009b2:	f004 f953 	bl	8004c5c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80009b6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80009ba:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80009be:	f002 f83f 	bl	8002a40 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80009c2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80009c6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80009ca:	f002 f839 	bl	8002a40 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80009ce:	e08f      	b.n	8000af0 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a4c      	ldr	r2, [pc, #304]	; (8000b08 <HAL_ADC_MspInit+0x1f8>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d133      	bne.n	8000a42 <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009da:	4b48      	ldr	r3, [pc, #288]	; (8000afc <HAL_ADC_MspInit+0x1ec>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a46      	ldr	r2, [pc, #280]	; (8000afc <HAL_ADC_MspInit+0x1ec>)
 80009e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009e4:	4b45      	ldr	r3, [pc, #276]	; (8000afc <HAL_ADC_MspInit+0x1ec>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d10e      	bne.n	8000a0a <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009ec:	4b44      	ldr	r3, [pc, #272]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 80009ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009f2:	4a43      	ldr	r2, [pc, #268]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 80009f4:	f043 0320 	orr.w	r3, r3, #32
 80009f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009fc:	4b40      	ldr	r3, [pc, #256]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 80009fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a02:	f003 0320 	and.w	r3, r3, #32
 8000a06:	61fb      	str	r3, [r7, #28]
 8000a08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b3d      	ldr	r3, [pc, #244]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	4a3b      	ldr	r2, [pc, #236]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1a:	4b39      	ldr	r3, [pc, #228]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000a28:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000a2c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000a30:	f002 f806 	bl	8002a40 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000a34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000a38:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000a3c:	f002 f800 	bl	8002a40 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000a40:	e056      	b.n	8000af0 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC3)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <HAL_ADC_MspInit+0x1fc>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d151      	bne.n	8000af0 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a4c:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	4a2b      	ldr	r2, [pc, #172]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000a54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5c:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a6a:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	4a23      	ldr	r2, [pc, #140]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000a72:	f043 0320 	orr.w	r3, r3, #32
 8000a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	f003 0320 	and.w	r3, r3, #32
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_ADC_MspInit+0x1f0>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aac:	2303      	movs	r3, #3
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4815      	ldr	r0, [pc, #84]	; (8000b10 <HAL_ADC_MspInit+0x200>)
 8000abc:	f004 f8ce 	bl	8004c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <HAL_ADC_MspInit+0x1f4>)
 8000ad4:	f004 f8c2 	bl	8004c5c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f001 ffae 	bl	8002a40 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f001 ffa8 	bl	8002a40 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000af0:	bf00      	nop
 8000af2:	3740      	adds	r7, #64	; 0x40
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40022000 	.word	0x40022000
 8000afc:	2400027c 	.word	0x2400027c
 8000b00:	58024400 	.word	0x58024400
 8000b04:	58020800 	.word	0x58020800
 8000b08:	40022100 	.word	0x40022100
 8000b0c:	58026000 	.word	0x58026000
 8000b10:	58021400 	.word	0x58021400

08000b14 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <MX_ETH_Init+0x84>)
 8000b1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b2c:	22e1      	movs	r2, #225	; 0xe1
 8000b2e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b44:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b46:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b50:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <MX_ETH_Init+0x8c>)
 8000b52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <MX_ETH_Init+0x90>)
 8000b58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b5c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b62:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b64:	f003 f8f2 	bl	8003d4c <HAL_ETH_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b6e:	f001 f83b 	bl	8001be8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b72:	2238      	movs	r2, #56	; 0x38
 8000b74:	2100      	movs	r1, #0
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_ETH_Init+0x94>)
 8000b78:	f00a fae4 	bl	800b144 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_ETH_Init+0x94>)
 8000b7e:	2221      	movs	r2, #33	; 0x21
 8000b80:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_ETH_Init+0x94>)
 8000b84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b88:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_ETH_Init+0x94>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	240002b8 	.word	0x240002b8
 8000b98:	40028000 	.word	0x40028000
 8000b9c:	24000368 	.word	0x24000368
 8000ba0:	240000d4 	.word	0x240000d4
 8000ba4:	24000074 	.word	0x24000074
 8000ba8:	24000280 	.word	0x24000280

08000bac <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b092      	sub	sp, #72	; 0x48
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a87      	ldr	r2, [pc, #540]	; (8000de8 <HAL_ETH_MspInit+0x23c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	f040 8108 	bne.w	8000de0 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000bd0:	4b86      	ldr	r3, [pc, #536]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000bd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd6:	4a85      	ldr	r2, [pc, #532]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bdc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000be0:	4b82      	ldr	r3, [pc, #520]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000be2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
 8000bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000bee:	4b7f      	ldr	r3, [pc, #508]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000bf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bf4:	4a7d      	ldr	r2, [pc, #500]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bfe:	4b7b      	ldr	r3, [pc, #492]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c0c:	4b77      	ldr	r3, [pc, #476]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c12:	4a76      	ldr	r2, [pc, #472]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c1c:	4b73      	ldr	r3, [pc, #460]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c28:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2a:	4b70      	ldr	r3, [pc, #448]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	4a6e      	ldr	r2, [pc, #440]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3a:	4b6c      	ldr	r3, [pc, #432]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c48:	4b68      	ldr	r3, [pc, #416]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	4a67      	ldr	r2, [pc, #412]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c50:	f043 0310 	orr.w	r3, r3, #16
 8000c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c58:	4b64      	ldr	r3, [pc, #400]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	623b      	str	r3, [r7, #32]
 8000c64:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c66:	4b61      	ldr	r3, [pc, #388]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	4a5f      	ldr	r2, [pc, #380]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c76:	4b5d      	ldr	r3, [pc, #372]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c80:	61fb      	str	r3, [r7, #28]
 8000c82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	4b59      	ldr	r3, [pc, #356]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	4a58      	ldr	r2, [pc, #352]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c94:	4b55      	ldr	r3, [pc, #340]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca2:	4b52      	ldr	r3, [pc, #328]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	4a50      	ldr	r2, [pc, #320]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb2:	4b4e      	ldr	r3, [pc, #312]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b4a      	ldr	r3, [pc, #296]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	4a49      	ldr	r2, [pc, #292]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd0:	4b46      	ldr	r3, [pc, #280]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	4b43      	ldr	r3, [pc, #268]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	4a41      	ldr	r2, [pc, #260]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cee:	4b3f      	ldr	r3, [pc, #252]	; (8000dec <HAL_ETH_MspInit+0x240>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8000cfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0e:	230b      	movs	r3, #11
 8000d10:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d16:	4619      	mov	r1, r3
 8000d18:	4835      	ldr	r0, [pc, #212]	; (8000df0 <HAL_ETH_MspInit+0x244>)
 8000d1a:	f003 ff9f 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d2e:	230b      	movs	r3, #11
 8000d30:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d36:	4619      	mov	r1, r3
 8000d38:	482e      	ldr	r0, [pc, #184]	; (8000df4 <HAL_ETH_MspInit+0x248>)
 8000d3a:	f003 ff8f 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d50:	230b      	movs	r3, #11
 8000d52:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4827      	ldr	r0, [pc, #156]	; (8000df8 <HAL_ETH_MspInit+0x24c>)
 8000d5c:	f003 ff7e 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8000d60:	233e      	movs	r3, #62	; 0x3e
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d70:	230b      	movs	r3, #11
 8000d72:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4820      	ldr	r0, [pc, #128]	; (8000dfc <HAL_ETH_MspInit+0x250>)
 8000d7c:	f003 ff6e 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8000d80:	230c      	movs	r3, #12
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d90:	230b      	movs	r3, #11
 8000d92:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4819      	ldr	r0, [pc, #100]	; (8000e00 <HAL_ETH_MspInit+0x254>)
 8000d9c:	f003 ff5e 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8000da0:	2386      	movs	r3, #134	; 0x86
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db0:	230b      	movs	r3, #11
 8000db2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000db8:	4619      	mov	r1, r3
 8000dba:	4812      	ldr	r0, [pc, #72]	; (8000e04 <HAL_ETH_MspInit+0x258>)
 8000dbc:	f003 ff4e 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd0:	230b      	movs	r3, #11
 8000dd2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480b      	ldr	r0, [pc, #44]	; (8000e08 <HAL_ETH_MspInit+0x25c>)
 8000ddc:	f003 ff3e 	bl	8004c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000de0:	bf00      	nop
 8000de2:	3748      	adds	r7, #72	; 0x48
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40028000 	.word	0x40028000
 8000dec:	58024400 	.word	0x58024400
 8000df0:	58021800 	.word	0x58021800
 8000df4:	58021000 	.word	0x58021000
 8000df8:	58022000 	.word	0x58022000
 8000dfc:	58020800 	.word	0x58020800
 8000e00:	58021c00 	.word	0x58021c00
 8000e04:	58020000 	.word	0x58020000
 8000e08:	58020400 	.word	0x58020400

08000e0c <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e10:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e12:	4a2f      	ldr	r2, [pc, #188]	; (8000ed0 <MX_FDCAN1_Init+0xc4>)
 8000e14:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e2e:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e36:	2210      	movs	r2, #16
 8000e38:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e48:	2202      	movs	r2, #2
 8000e4a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e7e:	2204      	movs	r2, #4
 8000e80:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e96:	2204      	movs	r2, #4
 8000e98:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <MX_FDCAN1_Init+0xc0>)
 8000eba:	f003 fb6b 	bl	8004594 <HAL_FDCAN_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000ec4:	f000 fe90 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	24000370 	.word	0x24000370
 8000ed0:	4000a000 	.word	0x4000a000

08000ed4 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000ed8:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000eda:	4a2f      	ldr	r2, [pc, #188]	; (8000f98 <MX_FDCAN2_Init+0xc4>)
 8000edc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f02:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f10:	2202      	movs	r2, #2
 8000f12:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f46:	2204      	movs	r2, #4
 8000f48:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f52:	2204      	movs	r2, #4
 8000f54:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f5e:	2204      	movs	r2, #4
 8000f60:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_FDCAN2_Init+0xc0>)
 8000f82:	f003 fb07 	bl	8004594 <HAL_FDCAN_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000f8c:	f000 fe2c 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	24000410 	.word	0x24000410
 8000f98:	4000a400 	.word	0x4000a400

08000f9c <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0ba      	sub	sp, #232	; 0xe8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	22bc      	movs	r2, #188	; 0xbc
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f00a f8c1 	bl	800b144 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a54      	ldr	r2, [pc, #336]	; (8001118 <HAL_FDCAN_MspInit+0x17c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d14e      	bne.n	800106a <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000fd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f005 fcce 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000fea:	f000 fdfd 	bl	8001be8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000fee:	4b4b      	ldr	r3, [pc, #300]	; (800111c <HAL_FDCAN_MspInit+0x180>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a49      	ldr	r2, [pc, #292]	; (800111c <HAL_FDCAN_MspInit+0x180>)
 8000ff6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ff8:	4b48      	ldr	r3, [pc, #288]	; (800111c <HAL_FDCAN_MspInit+0x180>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d10e      	bne.n	800101e <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001000:	4b47      	ldr	r3, [pc, #284]	; (8001120 <HAL_FDCAN_MspInit+0x184>)
 8001002:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001006:	4a46      	ldr	r2, [pc, #280]	; (8001120 <HAL_FDCAN_MspInit+0x184>)
 8001008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001010:	4b43      	ldr	r3, [pc, #268]	; (8001120 <HAL_FDCAN_MspInit+0x184>)
 8001012:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800101e:	4b40      	ldr	r3, [pc, #256]	; (8001120 <HAL_FDCAN_MspInit+0x184>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	4a3e      	ldr	r2, [pc, #248]	; (8001120 <HAL_FDCAN_MspInit+0x184>)
 8001026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102e:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <HAL_FDCAN_MspInit+0x184>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 800103c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001040:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001056:	2309      	movs	r3, #9
 8001058:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800105c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001060:	4619      	mov	r1, r3
 8001062:	4830      	ldr	r0, [pc, #192]	; (8001124 <HAL_FDCAN_MspInit+0x188>)
 8001064:	f003 fdfa 	bl	8004c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001068:	e052      	b.n	8001110 <HAL_FDCAN_MspInit+0x174>
  else if(fdcanHandle->Instance==FDCAN2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <HAL_FDCAN_MspInit+0x18c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d14d      	bne.n	8001110 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001078:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800107a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800107e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	4618      	mov	r0, r3
 8001088:	f005 fc7a 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001092:	f000 fda9 	bl	8001be8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <HAL_FDCAN_MspInit+0x180>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	4a1f      	ldr	r2, [pc, #124]	; (800111c <HAL_FDCAN_MspInit+0x180>)
 800109e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HAL_FDCAN_MspInit+0x180>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d10e      	bne.n	80010c6 <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <HAL_FDCAN_MspInit+0x184>)
 80010aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010ae:	4a1c      	ldr	r2, [pc, #112]	; (8001120 <HAL_FDCAN_MspInit+0x184>)
 80010b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_FDCAN_MspInit+0x184>)
 80010ba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_FDCAN_MspInit+0x184>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	4a14      	ldr	r2, [pc, #80]	; (8001120 <HAL_FDCAN_MspInit+0x184>)
 80010ce:	f043 0302 	orr.w	r3, r3, #2
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_FDCAN_MspInit+0x184>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 80010e4:	f242 0320 	movw	r3, #8224	; 0x2020
 80010e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80010fe:	2309      	movs	r3, #9
 8001100:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001108:	4619      	mov	r1, r3
 800110a:	4808      	ldr	r0, [pc, #32]	; (800112c <HAL_FDCAN_MspInit+0x190>)
 800110c:	f003 fda6 	bl	8004c5c <HAL_GPIO_Init>
}
 8001110:	bf00      	nop
 8001112:	37e8      	adds	r7, #232	; 0xe8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	4000a000 	.word	0x4000a000
 800111c:	240004b0 	.word	0x240004b0
 8001120:	58024400 	.word	0x58024400
 8001124:	58021c00 	.word	0x58021c00
 8001128:	4000a400 	.word	0x4000a400
 800112c:	58020400 	.word	0x58020400

08001130 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <MX_FMC_Init+0x94>)
 800114a:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <MX_FMC_Init+0x98>)
 800114c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_FMC_Init+0x94>)
 8001150:	2201      	movs	r2, #1
 8001152:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <MX_FMC_Init+0x94>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_FMC_Init+0x94>)
 800115c:	2204      	movs	r2, #4
 800115e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <MX_FMC_Init+0x94>)
 8001162:	2210      	movs	r2, #16
 8001164:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_FMC_Init+0x94>)
 8001168:	2240      	movs	r2, #64	; 0x40
 800116a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_FMC_Init+0x94>)
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_FMC_Init+0x94>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_FMC_Init+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_FMC_Init+0x94>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_FMC_Init+0x94>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800118a:	2310      	movs	r3, #16
 800118c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800118e:	2310      	movs	r3, #16
 8001190:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001192:	2310      	movs	r3, #16
 8001194:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001196:	2310      	movs	r3, #16
 8001198:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800119a:	2310      	movs	r3, #16
 800119c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800119e:	2310      	movs	r3, #16
 80011a0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80011a2:	2310      	movs	r3, #16
 80011a4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_FMC_Init+0x94>)
 80011ac:	f008 f95e 	bl	800946c <HAL_SDRAM_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80011b6:	f000 fd17 	bl	8001be8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	240004b4 	.word	0x240004b4
 80011c8:	52004140 	.word	0x52004140

080011cc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0b6      	sub	sp, #216	; 0xd8
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011e2:	4b4f      	ldr	r3, [pc, #316]	; (8001320 <HAL_FMC_MspInit+0x154>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f040 8096 	bne.w	8001318 <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 80011ec:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <HAL_FMC_MspInit+0x154>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	22bc      	movs	r2, #188	; 0xbc
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f009 ffa2 	bl	800b144 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001204:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001206:	2300      	movs	r3, #0
 8001208:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	4618      	mov	r0, r3
 8001210:	f005 fbb6 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 800121a:	f000 fce5 	bl	8001be8 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800121e:	4b41      	ldr	r3, [pc, #260]	; (8001324 <HAL_FMC_MspInit+0x158>)
 8001220:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001224:	4a3f      	ldr	r2, [pc, #252]	; (8001324 <HAL_FMC_MspInit+0x158>)
 8001226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800122a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800122e:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <HAL_FMC_MspInit+0x158>)
 8001230:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800123c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001240:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001256:	230c      	movs	r3, #12
 8001258:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800125c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001260:	4619      	mov	r1, r3
 8001262:	4831      	ldr	r0, [pc, #196]	; (8001328 <HAL_FMC_MspInit+0x15c>)
 8001264:	f003 fcfa 	bl	8004c5c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001268:	f248 1333 	movw	r3, #33075	; 0x8133
 800126c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001282:	230c      	movs	r3, #12
 8001284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001288:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800128c:	4619      	mov	r1, r3
 800128e:	4827      	ldr	r0, [pc, #156]	; (800132c <HAL_FMC_MspInit+0x160>)
 8001290:	f003 fce4 	bl	8004c5c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001294:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001298:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ae:	230c      	movs	r3, #12
 80012b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012b8:	4619      	mov	r1, r3
 80012ba:	481d      	ldr	r0, [pc, #116]	; (8001330 <HAL_FMC_MspInit+0x164>)
 80012bc:	f003 fcce 	bl	8004c5c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80012c0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012da:	230c      	movs	r3, #12
 80012dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4813      	ldr	r0, [pc, #76]	; (8001334 <HAL_FMC_MspInit+0x168>)
 80012e8:	f003 fcb8 	bl	8004c5c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012ec:	23e0      	movs	r3, #224	; 0xe0
 80012ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001304:	230c      	movs	r3, #12
 8001306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800130a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800130e:	4619      	mov	r1, r3
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <HAL_FMC_MspInit+0x16c>)
 8001312:	f003 fca3 	bl	8004c5c <HAL_GPIO_Init>
 8001316:	e000      	b.n	800131a <HAL_FMC_MspInit+0x14e>
    return;
 8001318:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800131a:	37d8      	adds	r7, #216	; 0xd8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	240004e8 	.word	0x240004e8
 8001324:	58024400 	.word	0x58024400
 8001328:	58021000 	.word	0x58021000
 800132c:	58021800 	.word	0x58021800
 8001330:	58020c00 	.word	0x58020c00
 8001334:	58021400 	.word	0x58021400
 8001338:	58021c00 	.word	0x58021c00

0800133c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001344:	f7ff ff42 	bl	80011cc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PA6   ------> S_TIM13_CH1
*/
void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b090      	sub	sp, #64	; 0x40
 8001354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001366:	4bba      	ldr	r3, [pc, #744]	; (8001650 <MX_GPIO_Init+0x300>)
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136c:	4ab8      	ldr	r2, [pc, #736]	; (8001650 <MX_GPIO_Init+0x300>)
 800136e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001376:	4bb6      	ldr	r3, [pc, #728]	; (8001650 <MX_GPIO_Init+0x300>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
 8001382:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4bb2      	ldr	r3, [pc, #712]	; (8001650 <MX_GPIO_Init+0x300>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138a:	4ab1      	ldr	r2, [pc, #708]	; (8001650 <MX_GPIO_Init+0x300>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001394:	4bae      	ldr	r3, [pc, #696]	; (8001650 <MX_GPIO_Init+0x300>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013a2:	4bab      	ldr	r3, [pc, #684]	; (8001650 <MX_GPIO_Init+0x300>)
 80013a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a8:	4aa9      	ldr	r2, [pc, #676]	; (8001650 <MX_GPIO_Init+0x300>)
 80013aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b2:	4ba7      	ldr	r3, [pc, #668]	; (8001650 <MX_GPIO_Init+0x300>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013bc:	623b      	str	r3, [r7, #32]
 80013be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c0:	4ba3      	ldr	r3, [pc, #652]	; (8001650 <MX_GPIO_Init+0x300>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c6:	4aa2      	ldr	r2, [pc, #648]	; (8001650 <MX_GPIO_Init+0x300>)
 80013c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d0:	4b9f      	ldr	r3, [pc, #636]	; (8001650 <MX_GPIO_Init+0x300>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	4b9c      	ldr	r3, [pc, #624]	; (8001650 <MX_GPIO_Init+0x300>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e4:	4a9a      	ldr	r2, [pc, #616]	; (8001650 <MX_GPIO_Init+0x300>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ee:	4b98      	ldr	r3, [pc, #608]	; (8001650 <MX_GPIO_Init+0x300>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fc:	4b94      	ldr	r3, [pc, #592]	; (8001650 <MX_GPIO_Init+0x300>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001402:	4a93      	ldr	r2, [pc, #588]	; (8001650 <MX_GPIO_Init+0x300>)
 8001404:	f043 0310 	orr.w	r3, r3, #16
 8001408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140c:	4b90      	ldr	r3, [pc, #576]	; (8001650 <MX_GPIO_Init+0x300>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800141a:	4b8d      	ldr	r3, [pc, #564]	; (8001650 <MX_GPIO_Init+0x300>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	4a8b      	ldr	r2, [pc, #556]	; (8001650 <MX_GPIO_Init+0x300>)
 8001422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142a:	4b89      	ldr	r3, [pc, #548]	; (8001650 <MX_GPIO_Init+0x300>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001438:	4b85      	ldr	r3, [pc, #532]	; (8001650 <MX_GPIO_Init+0x300>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	4a84      	ldr	r2, [pc, #528]	; (8001650 <MX_GPIO_Init+0x300>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001448:	4b81      	ldr	r3, [pc, #516]	; (8001650 <MX_GPIO_Init+0x300>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	4b7e      	ldr	r3, [pc, #504]	; (8001650 <MX_GPIO_Init+0x300>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	4a7c      	ldr	r2, [pc, #496]	; (8001650 <MX_GPIO_Init+0x300>)
 800145e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001466:	4b7a      	ldr	r3, [pc, #488]	; (8001650 <MX_GPIO_Init+0x300>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001474:	4b76      	ldr	r3, [pc, #472]	; (8001650 <MX_GPIO_Init+0x300>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	4a75      	ldr	r2, [pc, #468]	; (8001650 <MX_GPIO_Init+0x300>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001484:	4b72      	ldr	r3, [pc, #456]	; (8001650 <MX_GPIO_Init+0x300>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001492:	4b6f      	ldr	r3, [pc, #444]	; (8001650 <MX_GPIO_Init+0x300>)
 8001494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001498:	4a6d      	ldr	r2, [pc, #436]	; (8001650 <MX_GPIO_Init+0x300>)
 800149a:	f043 0320 	orr.w	r3, r3, #32
 800149e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a2:	4b6b      	ldr	r3, [pc, #428]	; (8001650 <MX_GPIO_Init+0x300>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a8:	f003 0320 	and.w	r3, r3, #32
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b6:	4867      	ldr	r0, [pc, #412]	; (8001654 <MX_GPIO_Init+0x304>)
 80014b8:	f003 fd80 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2104      	movs	r1, #4
 80014c0:	4865      	ldr	r0, [pc, #404]	; (8001658 <MX_GPIO_Init+0x308>)
 80014c2:	f003 fd7b 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014cc:	4863      	ldr	r0, [pc, #396]	; (800165c <MX_GPIO_Init+0x30c>)
 80014ce:	f003 fd75 	bl	8004fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014e4:	2303      	movs	r3, #3
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ec:	4619      	mov	r1, r3
 80014ee:	485c      	ldr	r0, [pc, #368]	; (8001660 <MX_GPIO_Init+0x310>)
 80014f0:	f003 fbb4 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001504:	4619      	mov	r1, r3
 8001506:	4857      	ldr	r0, [pc, #348]	; (8001664 <MX_GPIO_Init+0x314>)
 8001508:	f003 fba8 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 800150c:	2330      	movs	r3, #48	; 0x30
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800151c:	230a      	movs	r3, #10
 800151e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001524:	4619      	mov	r1, r3
 8001526:	4850      	ldr	r0, [pc, #320]	; (8001668 <MX_GPIO_Init+0x318>)
 8001528:	f003 fb98 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 800152c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800153e:	4619      	mov	r1, r3
 8001540:	484a      	ldr	r0, [pc, #296]	; (800166c <MX_GPIO_Init+0x31c>)
 8001542:	f003 fb8b 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001558:	4619      	mov	r1, r3
 800155a:	4845      	ldr	r0, [pc, #276]	; (8001670 <MX_GPIO_Init+0x320>)
 800155c:	f003 fb7e 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001572:	2301      	movs	r3, #1
 8001574:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157a:	4619      	mov	r1, r3
 800157c:	483b      	ldr	r0, [pc, #236]	; (800166c <MX_GPIO_Init+0x31c>)
 800157e:	f003 fb6d 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001598:	4619      	mov	r1, r3
 800159a:	482e      	ldr	r0, [pc, #184]	; (8001654 <MX_GPIO_Init+0x304>)
 800159c:	f003 fb5e 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80015a0:	2304      	movs	r3, #4
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b2:	4619      	mov	r1, r3
 80015b4:	482f      	ldr	r0, [pc, #188]	; (8001674 <MX_GPIO_Init+0x324>)
 80015b6:	f003 fb51 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015be:	2300      	movs	r3, #0
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ca:	4619      	mov	r1, r3
 80015cc:	482a      	ldr	r0, [pc, #168]	; (8001678 <MX_GPIO_Init+0x328>)
 80015ce:	f003 fb45 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80015d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e6:	4619      	mov	r1, r3
 80015e8:	481d      	ldr	r0, [pc, #116]	; (8001660 <MX_GPIO_Init+0x310>)
 80015ea:	f003 fb37 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015ee:	2340      	movs	r3, #64	; 0x40
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80015fe:	2309      	movs	r3, #9
 8001600:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001606:	4619      	mov	r1, r3
 8001608:	4818      	ldr	r0, [pc, #96]	; (800166c <MX_GPIO_Init+0x31c>)
 800160a:	f003 fb27 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800160e:	2304      	movs	r3, #4
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001622:	4619      	mov	r1, r3
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <MX_GPIO_Init+0x308>)
 8001626:	f003 fb19 	bl	8004c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <MX_GPIO_Init+0x30c>)
 8001644:	f003 fb0a 	bl	8004c5c <HAL_GPIO_Init>

}
 8001648:	bf00      	nop
 800164a:	3740      	adds	r7, #64	; 0x40
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	58024400 	.word	0x58024400
 8001654:	58022000 	.word	0x58022000
 8001658:	58022400 	.word	0x58022400
 800165c:	58020400 	.word	0x58020400
 8001660:	58021c00 	.word	0x58021c00
 8001664:	58020c00 	.word	0x58020c00
 8001668:	58021000 	.word	0x58021000
 800166c:	58020000 	.word	0x58020000
 8001670:	58020800 	.word	0x58020800
 8001674:	58021800 	.word	0x58021800
 8001678:	58022800 	.word	0x58022800

0800167c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b09a      	sub	sp, #104	; 0x68
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001682:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001686:	2234      	movs	r2, #52	; 0x34
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f009 fd5a 	bl	800b144 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001690:	463b      	mov	r3, r7
 8001692:	2234      	movs	r2, #52	; 0x34
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f009 fd54 	bl	800b144 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800169c:	4b4e      	ldr	r3, [pc, #312]	; (80017d8 <MX_LTDC_Init+0x15c>)
 800169e:	4a4f      	ldr	r2, [pc, #316]	; (80017dc <MX_LTDC_Init+0x160>)
 80016a0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80016a2:	4b4d      	ldr	r3, [pc, #308]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80016a8:	4b4b      	ldr	r3, [pc, #300]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80016ae:	4b4a      	ldr	r3, [pc, #296]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80016b4:	4b48      	ldr	r3, [pc, #288]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80016ba:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016bc:	2207      	movs	r2, #7
 80016be:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80016c0:	4b45      	ldr	r3, [pc, #276]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016c2:	2203      	movs	r2, #3
 80016c4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80016c6:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016c8:	220e      	movs	r2, #14
 80016ca:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80016cc:	4b42      	ldr	r3, [pc, #264]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016ce:	2205      	movs	r2, #5
 80016d0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80016d2:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016d4:	f240 228e 	movw	r2, #654	; 0x28e
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80016da:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016dc:	f240 12e5 	movw	r2, #485	; 0x1e5
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80016e2:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016e4:	f44f 7225 	mov.w	r2, #660	; 0x294
 80016e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80016ea:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016ec:	f240 12e7 	movw	r2, #487	; 0x1e7
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80016f2:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001702:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <MX_LTDC_Init+0x15c>)
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800170a:	4833      	ldr	r0, [pc, #204]	; (80017d8 <MX_LTDC_Init+0x15c>)
 800170c:	f003 fc8a 	bl	8005024 <HAL_LTDC_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001716:	f000 fa67 	bl	8001be8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800172a:	2300      	movs	r3, #0
 800172c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800173c:	2305      	movs	r3, #5
 800173e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800175e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	481c      	ldr	r0, [pc, #112]	; (80017d8 <MX_LTDC_Init+0x15c>)
 8001768:	f003 fd2c 	bl	80051c4 <HAL_LTDC_ConfigLayer>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001772:	f000 fa39 	bl	8001be8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001796:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001798:	2305      	movs	r3, #5
 800179a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	2201      	movs	r2, #1
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_LTDC_Init+0x15c>)
 80017c2:	f003 fcff 	bl	80051c4 <HAL_LTDC_ConfigLayer>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80017cc:	f000 fa0c 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3768      	adds	r7, #104	; 0x68
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	240004ec 	.word	0x240004ec
 80017dc:	50001000 	.word	0x50001000

080017e0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0bc      	sub	sp, #240	; 0xf0
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f8:	f107 0320 	add.w	r3, r7, #32
 80017fc:	22bc      	movs	r2, #188	; 0xbc
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f009 fc9f 	bl	800b144 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a64      	ldr	r2, [pc, #400]	; (800199c <HAL_LTDC_MspInit+0x1bc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	f040 80c1 	bne.w	8001994 <HAL_LTDC_MspInit+0x1b4>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001812:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001816:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001818:	2320      	movs	r3, #32
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800181c:	23c0      	movs	r3, #192	; 0xc0
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001820:	2302      	movs	r3, #2
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001824:	2302      	movs	r3, #2
 8001826:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001828:	2302      	movs	r3, #2
 800182a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800182c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001830:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001836:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800183c:	f107 0320 	add.w	r3, r7, #32
 8001840:	4618      	mov	r0, r3
 8001842:	f005 f89d 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_LTDC_MspInit+0x70>
    {
      Error_Handler();
 800184c:	f000 f9cc 	bl	8001be8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 8001852:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001856:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001860:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 8001862:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800186e:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001874:	4a4a      	ldr	r2, [pc, #296]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 8001876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800187a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187e:	4b48      	ldr	r3, [pc, #288]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800188c:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 800188e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001892:	4a43      	ldr	r2, [pc, #268]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189c:	4b40      	ldr	r3, [pc, #256]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 80018ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b0:	4a3b      	ldr	r2, [pc, #236]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 80018b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ba:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c8:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 80018ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ce:	4a34      	ldr	r2, [pc, #208]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <HAL_LTDC_MspInit+0x1c0>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80018e6:	23fc      	movs	r3, #252	; 0xfc
 80018e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018fe:	230e      	movs	r3, #14
 8001900:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001904:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001908:	4619      	mov	r1, r3
 800190a:	4826      	ldr	r0, [pc, #152]	; (80019a4 <HAL_LTDC_MspInit+0x1c4>)
 800190c:	f003 f9a6 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8001910:	f24d 2303 	movw	r3, #53763	; 0xd203
 8001914:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800192a:	230e      	movs	r3, #14
 800192c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001930:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001934:	4619      	mov	r1, r3
 8001936:	481c      	ldr	r0, [pc, #112]	; (80019a8 <HAL_LTDC_MspInit+0x1c8>)
 8001938:	f003 f990 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 800193c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001940:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001956:	230e      	movs	r3, #14
 8001958:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800195c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001960:	4619      	mov	r1, r3
 8001962:	4812      	ldr	r0, [pc, #72]	; (80019ac <HAL_LTDC_MspInit+0x1cc>)
 8001964:	f003 f97a 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001982:	230e      	movs	r3, #14
 8001984:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001988:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800198c:	4619      	mov	r1, r3
 800198e:	4808      	ldr	r0, [pc, #32]	; (80019b0 <HAL_LTDC_MspInit+0x1d0>)
 8001990:	f003 f964 	bl	8004c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001994:	bf00      	nop
 8001996:	37f0      	adds	r7, #240	; 0xf0
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	50001000 	.word	0x50001000
 80019a0:	58024400 	.word	0x58024400
 80019a4:	58022800 	.word	0x58022800
 80019a8:	58022000 	.word	0x58022000
 80019ac:	58022400 	.word	0x58022400
 80019b0:	58021c00 	.word	0x58021c00

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b8:	f000 ff6c 	bl	8002894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019bc:	f000 f85c 	bl	8001a78 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019c0:	f000 f8e6 	bl	8001b90 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c4:	f7ff fcc4 	bl	8001350 <MX_GPIO_Init>
  MX_ADC1_Init();
 80019c8:	f7fe fe64 	bl	8000694 <MX_ADC1_Init>
  MX_ADC2_Init();
 80019cc:	f7fe feda 	bl	8000784 <MX_ADC2_Init>
  MX_ADC3_Init();
 80019d0:	f7fe ff3c 	bl	800084c <MX_ADC3_Init>
  MX_ETH_Init();
 80019d4:	f7ff f89e 	bl	8000b14 <MX_ETH_Init>
  MX_FDCAN1_Init();
 80019d8:	f7ff fa18 	bl	8000e0c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80019dc:	f7ff fa7a 	bl	8000ed4 <MX_FDCAN2_Init>
  MX_FMC_Init();
 80019e0:	f7ff fba6 	bl	8001130 <MX_FMC_Init>
  MX_LTDC_Init();
 80019e4:	f7ff fe4a 	bl	800167c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80019e8:	f000 f904 	bl	8001bf4 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80019ec:	f000 f9f8 	bl	8001de0 <MX_RTC_Init>
  MX_SAI2_Init();
 80019f0:	f000 fa4e 	bl	8001e90 <MX_SAI2_Init>
//  MX_SDMMC1_MMC_Init();
  MX_SPI2_Init();
 80019f4:	f000 fba8 	bl	8002148 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80019f8:	f000 fdc4 	bl	8002584 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80019fc:	f000 fe74 	bl	80026e8 <MX_USB_OTG_FS_PCD_Init>

  // USB_OTG_FS_PCD, USART3, SDMMC1, RTC, LTDC, FMC don't work from RAM !!!!
  // SDMMC1 doesn't work from FLASH !!!!


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13,1);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a06:	4816      	ldr	r0, [pc, #88]	; (8001a60 <main+0xac>)
 8001a08:	f003 fad8 	bl	8004fbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2,0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2104      	movs	r1, #4
 8001a10:	4814      	ldr	r0, [pc, #80]	; (8001a64 <main+0xb0>)
 8001a12:	f003 fad3 	bl	8004fbc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 8001a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1a:	4811      	ldr	r0, [pc, #68]	; (8001a60 <main+0xac>)
 8001a1c:	f003 fae7 	bl	8004fee <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 8001a20:	2104      	movs	r1, #4
 8001a22:	4810      	ldr	r0, [pc, #64]	; (8001a64 <main+0xb0>)
 8001a24:	f003 fae3 	bl	8004fee <HAL_GPIO_TogglePin>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    snprintf (SendBuffer,BUFSIZE,"USART3:%d secs\r\n",Cnt);
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <main+0xb4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <main+0xb8>)
 8001a2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a32:	480f      	ldr	r0, [pc, #60]	; (8001a70 <main+0xbc>)
 8001a34:	f009 fb8e 	bl	800b154 <sniprintf>
	    HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),1);
 8001a38:	480d      	ldr	r0, [pc, #52]	; (8001a70 <main+0xbc>)
 8001a3a:	f7fe fc51 	bl	80002e0 <strlen>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	2301      	movs	r3, #1
 8001a44:	490a      	ldr	r1, [pc, #40]	; (8001a70 <main+0xbc>)
 8001a46:	480b      	ldr	r0, [pc, #44]	; (8001a74 <main+0xc0>)
 8001a48:	f007 febd 	bl	80097c6 <HAL_UART_Transmit>

	    HAL_Delay(1000);
 8001a4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a50:	f000 ffb2 	bl	80029b8 <HAL_Delay>
	    Cnt++;
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <main+0xb4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <main+0xb4>)
 8001a5c:	6013      	str	r3, [r2, #0]
  {
 8001a5e:	e7da      	b.n	8001a16 <main+0x62>
 8001a60:	58022000 	.word	0x58022000
 8001a64:	58022400 	.word	0x58022400
 8001a68:	24000594 	.word	0x24000594
 8001a6c:	0800ba54 	.word	0x0800ba54
 8001a70:	24000598 	.word	0x24000598
 8001a74:	240008c8 	.word	0x240008c8

08001a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b09c      	sub	sp, #112	; 0x70
 8001a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a82:	224c      	movs	r2, #76	; 0x4c
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f009 fb5c 	bl	800b144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	2220      	movs	r2, #32
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f009 fb56 	bl	800b144 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f003 feb3 	bl	8005804 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <SystemClock_Config+0x10c>)
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	4a37      	ldr	r2, [pc, #220]	; (8001b84 <SystemClock_Config+0x10c>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001aae:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <SystemClock_Config+0x10c>)
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <SystemClock_Config+0x110>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ac0:	4a31      	ldr	r2, [pc, #196]	; (8001b88 <SystemClock_Config+0x110>)
 8001ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <SystemClock_Config+0x110>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ad4:	bf00      	nop
 8001ad6:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <SystemClock_Config+0x110>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ae2:	d1f8      	bne.n	8001ad6 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <SystemClock_Config+0x114>)
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	f023 0303 	bic.w	r3, r3, #3
 8001aec:	4a27      	ldr	r2, [pc, #156]	; (8001b8c <SystemClock_Config+0x114>)
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001af4:	230b      	movs	r3, #11
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001af8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b02:	2340      	movs	r3, #64	; 0x40
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b06:	2301      	movs	r3, #1
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8001b12:	2316      	movs	r3, #22
 8001b14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8001b16:	23a9      	movs	r3, #169	; 0xa9
 8001b18:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b22:	2302      	movs	r3, #2
 8001b24:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 ff68 	bl	8005a0c <HAL_RCC_OscConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001b42:	f000 f851 	bl	8001be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b46:	233f      	movs	r3, #63	; 0x3f
 8001b48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f004 fb7c 	bl	8006268 <HAL_RCC_ClockConfig>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <SystemClock_Config+0x102>
  {
    Error_Handler();
 8001b76:	f000 f837 	bl	8001be8 <Error_Handler>
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3770      	adds	r7, #112	; 0x70
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	58000400 	.word	0x58000400
 8001b88:	58024800 	.word	0x58024800
 8001b8c:	58024400 	.word	0x58024400

08001b90 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b0b0      	sub	sp, #192	; 0xc0
 8001b94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	22bc      	movs	r2, #188	; 0xbc
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f009 fad1 	bl	800b144 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ba2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ba6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001bac:	230c      	movs	r3, #12
 8001bae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8001bb0:	2305      	movs	r3, #5
 8001bb2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001bbc:	23c0      	movs	r3, #192	; 0xc0
 8001bbe:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001bc0:	2320      	movs	r3, #32
 8001bc2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f004 fed5 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8001bdc:	f000 f804 	bl	8001be8 <Error_Handler>
  }
}
 8001be0:	bf00      	nop
 8001be2:	37c0      	adds	r7, #192	; 0xc0
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bec:	b672      	cpsid	i
}
 8001bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <Error_Handler+0x8>
	...

08001bf4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001bfa:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <MX_QUADSPI_Init+0x54>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c00:	22ff      	movs	r2, #255	; 0xff
 8001c02:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c30:	f003 fe32 	bl	8005898 <HAL_QSPI_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001c3a:	f7ff ffd5 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	24000698 	.word	0x24000698
 8001c48:	52005000 	.word	0x52005000

08001c4c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b0ba      	sub	sp, #232	; 0xe8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c64:	f107 0318 	add.w	r3, r7, #24
 8001c68:	22bc      	movs	r2, #188	; 0xbc
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f009 fa69 	bl	800b144 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a55      	ldr	r2, [pc, #340]	; (8001dcc <HAL_QSPI_MspInit+0x180>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	f040 80a2 	bne.w	8001dc2 <HAL_QSPI_MspInit+0x176>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c88:	f107 0318 	add.w	r3, r7, #24
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f004 fe77 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8001c98:	f7ff ffa6 	bl	8001be8 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c9c:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <HAL_QSPI_MspInit+0x184>)
 8001c9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ca2:	4a4b      	ldr	r2, [pc, #300]	; (8001dd0 <HAL_QSPI_MspInit+0x184>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001cac:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <HAL_QSPI_MspInit+0x184>)
 8001cae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	4b45      	ldr	r3, [pc, #276]	; (8001dd0 <HAL_QSPI_MspInit+0x184>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc0:	4a43      	ldr	r2, [pc, #268]	; (8001dd0 <HAL_QSPI_MspInit+0x184>)
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cca:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <HAL_QSPI_MspInit+0x184>)
 8001ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cd8:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_QSPI_MspInit+0x184>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	4a3c      	ldr	r2, [pc, #240]	; (8001dd0 <HAL_QSPI_MspInit+0x184>)
 8001ce0:	f043 0320 	orr.w	r3, r3, #32
 8001ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce8:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <HAL_QSPI_MspInit+0x184>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf6:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <HAL_QSPI_MspInit+0x184>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	4a34      	ldr	r2, [pc, #208]	; (8001dd0 <HAL_QSPI_MspInit+0x184>)
 8001cfe:	f043 0308 	orr.w	r3, r3, #8
 8001d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d06:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <HAL_QSPI_MspInit+0x184>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d14:	2340      	movs	r3, #64	; 0x40
 8001d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d2c:	230a      	movs	r3, #10
 8001d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4826      	ldr	r0, [pc, #152]	; (8001dd4 <HAL_QSPI_MspInit+0x188>)
 8001d3a:	f002 ff8f 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001d3e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d58:	2309      	movs	r3, #9
 8001d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d5e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d62:	4619      	mov	r1, r3
 8001d64:	481c      	ldr	r0, [pc, #112]	; (8001dd8 <HAL_QSPI_MspInit+0x18c>)
 8001d66:	f002 ff79 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d84:	230a      	movs	r3, #10
 8001d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d8a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4811      	ldr	r0, [pc, #68]	; (8001dd8 <HAL_QSPI_MspInit+0x18c>)
 8001d92:	f002 ff63 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001db0:	2309      	movs	r3, #9
 8001db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4807      	ldr	r0, [pc, #28]	; (8001ddc <HAL_QSPI_MspInit+0x190>)
 8001dbe:	f002 ff4d 	bl	8004c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	37e8      	adds	r7, #232	; 0xe8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	52005000 	.word	0x52005000
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	58020400 	.word	0x58020400
 8001dd8:	58021400 	.word	0x58021400
 8001ddc:	58020c00 	.word	0x58020c00

08001de0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <MX_RTC_Init+0x48>)
 8001de6:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <MX_RTC_Init+0x4c>)
 8001de8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <MX_RTC_Init+0x48>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001df0:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <MX_RTC_Init+0x48>)
 8001df2:	227f      	movs	r2, #127	; 0x7f
 8001df4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <MX_RTC_Init+0x48>)
 8001df8:	22ff      	movs	r2, #255	; 0xff
 8001dfa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <MX_RTC_Init+0x48>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <MX_RTC_Init+0x48>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <MX_RTC_Init+0x48>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MX_RTC_Init+0x48>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e14:	4804      	ldr	r0, [pc, #16]	; (8001e28 <MX_RTC_Init+0x48>)
 8001e16:	f006 ff3f 	bl	8008c98 <HAL_RTC_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001e20:	f7ff fee2 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	240006e4 	.word	0x240006e4
 8001e2c:	58004000 	.word	0x58004000

08001e30 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0b2      	sub	sp, #200	; 0xc8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	22bc      	movs	r2, #188	; 0xbc
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f009 f97f 	bl	800b144 <memset>
  if(rtcHandle->Instance==RTC)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a0f      	ldr	r2, [pc, #60]	; (8001e88 <HAL_RTC_MspInit+0x58>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d116      	bne.n	8001e7e <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e54:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 fd8c 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001e6e:	f7ff febb 	bl	8001be8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RTC_MspInit+0x5c>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <HAL_RTC_MspInit+0x5c>)
 8001e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e7c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e7e:	bf00      	nop
 8001e80:	37c8      	adds	r7, #200	; 0xc8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	58004000 	.word	0x58004000
 8001e8c:	58024400 	.word	0x58024400

08001e90 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001e94:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001e96:	4a59      	ldr	r2, [pc, #356]	; (8001ffc <MX_SAI2_Init+0x16c>)
 8001e98:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e9a:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ea0:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001ea6:	4b54      	ldr	r3, [pc, #336]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001ea8:	2240      	movs	r2, #64	; 0x40
 8001eaa:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001eac:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001eb2:	4b51      	ldr	r3, [pc, #324]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001eb8:	4b4f      	ldr	r3, [pc, #316]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001ebe:	4b4e      	ldr	r3, [pc, #312]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001ec4:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001eca:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001ed0:	4b49      	ldr	r3, [pc, #292]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001ed2:	4a4b      	ldr	r2, [pc, #300]	; (8002000 <MX_SAI2_Init+0x170>)
 8001ed4:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ed6:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001edc:	4b46      	ldr	r3, [pc, #280]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ee2:	4b45      	ldr	r3, [pc, #276]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ee8:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001eee:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001ef6:	4b40      	ldr	r3, [pc, #256]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001efc:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001f04:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001f06:	2208      	movs	r2, #8
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001f22:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001f28:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001f2e:	4b32      	ldr	r3, [pc, #200]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001f34:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001f3a:	482f      	ldr	r0, [pc, #188]	; (8001ff8 <MX_SAI2_Init+0x168>)
 8001f3c:	f006 ffbc 	bl	8008eb8 <HAL_SAI_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001f46:	f7ff fe4f 	bl	8001be8 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001f4a:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f4c:	4a2e      	ldr	r2, [pc, #184]	; (8002008 <MX_SAI2_Init+0x178>)
 8001f4e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f58:	2203      	movs	r2, #3
 8001f5a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001f5c:	4b29      	ldr	r3, [pc, #164]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001f62:	4b28      	ldr	r3, [pc, #160]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001f6e:	4b25      	ldr	r3, [pc, #148]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001f74:	4b23      	ldr	r3, [pc, #140]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001f7a:	4b22      	ldr	r3, [pc, #136]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001f80:	4b20      	ldr	r3, [pc, #128]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <MX_SAI2_Init+0x174>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <MX_SAI2_Init+0x174>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <MX_SAI2_Init+0x174>)
 8001fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <MX_SAI2_Init+0x174>)
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <MX_SAI2_Init+0x174>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <MX_SAI2_Init+0x174>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001fc0:	4b10      	ldr	r3, [pc, #64]	; (8002004 <MX_SAI2_Init+0x174>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <MX_SAI2_Init+0x174>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <MX_SAI2_Init+0x174>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_SAI2_Init+0x174>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <MX_SAI2_Init+0x174>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_SAI2_Init+0x174>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001fe4:	4807      	ldr	r0, [pc, #28]	; (8002004 <MX_SAI2_Init+0x174>)
 8001fe6:	f006 ff67 	bl	8008eb8 <HAL_SAI_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8001ff0:	f7ff fdfa 	bl	8001be8 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	24000708 	.word	0x24000708
 8001ffc:	40015c04 	.word	0x40015c04
 8002000:	0002ee00 	.word	0x0002ee00
 8002004:	240007a0 	.word	0x240007a0
 8002008:	40015c24 	.word	0x40015c24

0800200c <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b0b8      	sub	sp, #224	; 0xe0
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	22bc      	movs	r2, #188	; 0xbc
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f009 f891 	bl	800b144 <memset>
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a42      	ldr	r2, [pc, #264]	; (8002130 <HAL_SAI_MspInit+0x124>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d13b      	bne.n	80020a4 <HAL_SAI_MspInit+0x98>
    {
    /* SAI2 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800202c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002030:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8002032:	2300      	movs	r3, #0
 8002034:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	4618      	mov	r0, r3
 800203c:	f004 fca0 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_SAI_MspInit+0x3e>
    {
      Error_Handler();
 8002046:	f7ff fdcf 	bl	8001be8 <Error_Handler>
    }

    if (SAI2_client == 0)
 800204a:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <HAL_SAI_MspInit+0x128>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10e      	bne.n	8002070 <HAL_SAI_MspInit+0x64>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_SAI_MspInit+0x12c>)
 8002054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002058:	4a37      	ldr	r2, [pc, #220]	; (8002138 <HAL_SAI_MspInit+0x12c>)
 800205a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800205e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002062:	4b35      	ldr	r3, [pc, #212]	; (8002138 <HAL_SAI_MspInit+0x12c>)
 8002064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002070:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_SAI_MspInit+0x128>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	4a2f      	ldr	r2, [pc, #188]	; (8002134 <HAL_SAI_MspInit+0x128>)
 8002078:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 800207a:	23f0      	movs	r3, #240	; 0xf0
 800207c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002092:	230a      	movs	r3, #10
 8002094:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002098:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800209c:	4619      	mov	r1, r3
 800209e:	4827      	ldr	r0, [pc, #156]	; (800213c <HAL_SAI_MspInit+0x130>)
 80020a0:	f002 fddc 	bl	8004c5c <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a25      	ldr	r2, [pc, #148]	; (8002140 <HAL_SAI_MspInit+0x134>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d13c      	bne.n	8002128 <HAL_SAI_MspInit+0x11c>
    {
      /* SAI2 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80020ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	4618      	mov	r0, r3
 80020be:	f004 fc5f 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_SAI_MspInit+0xc0>
    {
      Error_Handler();
 80020c8:	f7ff fd8e 	bl	8001be8 <Error_Handler>
    }

      if (SAI2_client == 0)
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_SAI_MspInit+0x128>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10e      	bne.n	80020f2 <HAL_SAI_MspInit+0xe6>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_SAI_MspInit+0x12c>)
 80020d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_SAI_MspInit+0x12c>)
 80020dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_SAI_MspInit+0x12c>)
 80020e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_SAI_MspInit+0x128>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3301      	adds	r3, #1
 80020f8:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <HAL_SAI_MspInit+0x128>)
 80020fa:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002100:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002116:	230a      	movs	r3, #10
 8002118:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800211c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002120:	4619      	mov	r1, r3
 8002122:	4808      	ldr	r0, [pc, #32]	; (8002144 <HAL_SAI_MspInit+0x138>)
 8002124:	f002 fd9a 	bl	8004c5c <HAL_GPIO_Init>

    }
}
 8002128:	bf00      	nop
 800212a:	37e0      	adds	r7, #224	; 0xe0
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40015c04 	.word	0x40015c04
 8002134:	24000838 	.word	0x24000838
 8002138:	58024400 	.word	0x58024400
 800213c:	58022000 	.word	0x58022000
 8002140:	40015c24 	.word	0x40015c24
 8002144:	58021800 	.word	0x58021800

08002148 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <MX_SPI2_Init+0xa0>)
 800214e:	4a27      	ldr	r2, [pc, #156]	; (80021ec <MX_SPI2_Init+0xa4>)
 8002150:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002152:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <MX_SPI2_Init+0xa0>)
 8002154:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002158:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <MX_SPI2_Init+0xa0>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <MX_SPI2_Init+0xa0>)
 8002162:	2203      	movs	r2, #3
 8002164:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <MX_SPI2_Init+0xa0>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <MX_SPI2_Init+0xa0>)
 800216e:	2200      	movs	r2, #0
 8002170:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <MX_SPI2_Init+0xa0>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <MX_SPI2_Init+0xa0>)
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <MX_SPI2_Init+0xa0>)
 8002180:	2200      	movs	r2, #0
 8002182:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002184:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <MX_SPI2_Init+0xa0>)
 8002186:	2200      	movs	r2, #0
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <MX_SPI2_Init+0xa0>)
 800218c:	2200      	movs	r2, #0
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <MX_SPI2_Init+0xa0>)
 8002192:	2200      	movs	r2, #0
 8002194:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <MX_SPI2_Init+0xa0>)
 8002198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800219c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <MX_SPI2_Init+0xa0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <MX_SPI2_Init+0xa0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <MX_SPI2_Init+0xa0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <MX_SPI2_Init+0xa0>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_SPI2_Init+0xa0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <MX_SPI2_Init+0xa0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_SPI2_Init+0xa0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <MX_SPI2_Init+0xa0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_SPI2_Init+0xa0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021d4:	4804      	ldr	r0, [pc, #16]	; (80021e8 <MX_SPI2_Init+0xa0>)
 80021d6:	f007 f985 	bl	80094e4 <HAL_SPI_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 80021e0:	f7ff fd02 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	2400083c 	.word	0x2400083c
 80021ec:	40003800 	.word	0x40003800

080021f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b0ba      	sub	sp, #232	; 0xe8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002208:	f107 0318 	add.w	r3, r7, #24
 800220c:	22bc      	movs	r2, #188	; 0xbc
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f008 ff97 	bl	800b144 <memset>
  if(spiHandle->Instance==SPI2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a54      	ldr	r2, [pc, #336]	; (800236c <HAL_SPI_MspInit+0x17c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	f040 80a0 	bne.w	8002362 <HAL_SPI_MspInit+0x172>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002226:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002228:	2300      	movs	r3, #0
 800222a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800222c:	f107 0318 	add.w	r3, r7, #24
 8002230:	4618      	mov	r0, r3
 8002232:	f004 fba5 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800223c:	f7ff fcd4 	bl	8001be8 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002240:	4b4b      	ldr	r3, [pc, #300]	; (8002370 <HAL_SPI_MspInit+0x180>)
 8002242:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002246:	4a4a      	ldr	r2, [pc, #296]	; (8002370 <HAL_SPI_MspInit+0x180>)
 8002248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002250:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_SPI_MspInit+0x180>)
 8002252:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225e:	4b44      	ldr	r3, [pc, #272]	; (8002370 <HAL_SPI_MspInit+0x180>)
 8002260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002264:	4a42      	ldr	r2, [pc, #264]	; (8002370 <HAL_SPI_MspInit+0x180>)
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800226e:	4b40      	ldr	r3, [pc, #256]	; (8002370 <HAL_SPI_MspInit+0x180>)
 8002270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800227c:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <HAL_SPI_MspInit+0x180>)
 800227e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002282:	4a3b      	ldr	r2, [pc, #236]	; (8002370 <HAL_SPI_MspInit+0x180>)
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800228c:	4b38      	ldr	r3, [pc, #224]	; (8002370 <HAL_SPI_MspInit+0x180>)
 800228e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800229a:	4b35      	ldr	r3, [pc, #212]	; (8002370 <HAL_SPI_MspInit+0x180>)
 800229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a0:	4a33      	ldr	r2, [pc, #204]	; (8002370 <HAL_SPI_MspInit+0x180>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022aa:	4b31      	ldr	r3, [pc, #196]	; (8002370 <HAL_SPI_MspInit+0x180>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022b8:	2310      	movs	r3, #16
 80022ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80022d0:	2307      	movs	r3, #7
 80022d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022da:	4619      	mov	r1, r3
 80022dc:	4825      	ldr	r0, [pc, #148]	; (8002374 <HAL_SPI_MspInit+0x184>)
 80022de:	f002 fcbd 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022e2:	2308      	movs	r3, #8
 80022e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022fa:	2305      	movs	r3, #5
 80022fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002300:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002304:	4619      	mov	r1, r3
 8002306:	481c      	ldr	r0, [pc, #112]	; (8002378 <HAL_SPI_MspInit+0x188>)
 8002308:	f002 fca8 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800230c:	2304      	movs	r3, #4
 800230e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002324:	2305      	movs	r3, #5
 8002326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800232a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800232e:	4619      	mov	r1, r3
 8002330:	4812      	ldr	r0, [pc, #72]	; (800237c <HAL_SPI_MspInit+0x18c>)
 8002332:	f002 fc93 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002350:	2305      	movs	r3, #5
 8002352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002356:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800235a:	4619      	mov	r1, r3
 800235c:	4805      	ldr	r0, [pc, #20]	; (8002374 <HAL_SPI_MspInit+0x184>)
 800235e:	f002 fc7d 	bl	8004c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002362:	bf00      	nop
 8002364:	37e8      	adds	r7, #232	; 0xe8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40003800 	.word	0x40003800
 8002370:	58024400 	.word	0x58024400
 8002374:	58020400 	.word	0x58020400
 8002378:	58020c00 	.word	0x58020c00
 800237c:	58022000 	.word	0x58022000

08002380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_MspInit+0x30>)
 8002388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800238c:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <HAL_MspInit+0x30>)
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_MspInit+0x30>)
 8002398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	58024400 	.word	0x58024400

080023b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <NMI_Handler+0x4>

080023ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023be:	e7fe      	b.n	80023be <HardFault_Handler+0x4>

080023c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <MemManage_Handler+0x4>

080023c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <BusFault_Handler+0x4>

080023cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <UsageFault_Handler+0x4>

080023d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002400:	f000 faba 	bl	8002978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}

08002408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <_sbrk+0x5c>)
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <_sbrk+0x60>)
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <_sbrk+0x64>)
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <_sbrk+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	429a      	cmp	r2, r3
 8002436:	d207      	bcs.n	8002448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002438:	f008 fe4c 	bl	800b0d4 <__errno>
 800243c:	4603      	mov	r3, r0
 800243e:	220c      	movs	r2, #12
 8002440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	e009      	b.n	800245c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <_sbrk+0x64>)
 8002458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	24080000 	.word	0x24080000
 8002468:	00000400 	.word	0x00000400
 800246c:	240008c4 	.word	0x240008c4
 8002470:	24000e78 	.word	0x24000e78

08002474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002478:	4b37      	ldr	r3, [pc, #220]	; (8002558 <SystemInit+0xe4>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	4a36      	ldr	r2, [pc, #216]	; (8002558 <SystemInit+0xe4>)
 8002480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002488:	4b34      	ldr	r3, [pc, #208]	; (800255c <SystemInit+0xe8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	2b06      	cmp	r3, #6
 8002492:	d807      	bhi.n	80024a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002494:	4b31      	ldr	r3, [pc, #196]	; (800255c <SystemInit+0xe8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 030f 	bic.w	r3, r3, #15
 800249c:	4a2f      	ldr	r2, [pc, #188]	; (800255c <SystemInit+0xe8>)
 800249e:	f043 0307 	orr.w	r3, r3, #7
 80024a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024a4:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <SystemInit+0xec>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2d      	ldr	r2, [pc, #180]	; (8002560 <SystemInit+0xec>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024b0:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <SystemInit+0xec>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <SystemInit+0xec>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4929      	ldr	r1, [pc, #164]	; (8002560 <SystemInit+0xec>)
 80024bc:	4b29      	ldr	r3, [pc, #164]	; (8002564 <SystemInit+0xf0>)
 80024be:	4013      	ands	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024c2:	4b26      	ldr	r3, [pc, #152]	; (800255c <SystemInit+0xe8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024ce:	4b23      	ldr	r3, [pc, #140]	; (800255c <SystemInit+0xe8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 030f 	bic.w	r3, r3, #15
 80024d6:	4a21      	ldr	r2, [pc, #132]	; (800255c <SystemInit+0xe8>)
 80024d8:	f043 0307 	orr.w	r3, r3, #7
 80024dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <SystemInit+0xec>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80024e4:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <SystemInit+0xec>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <SystemInit+0xec>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <SystemInit+0xec>)
 80024f2:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <SystemInit+0xf4>)
 80024f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80024f6:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <SystemInit+0xec>)
 80024f8:	4a1c      	ldr	r2, [pc, #112]	; (800256c <SystemInit+0xf8>)
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024fc:	4b18      	ldr	r3, [pc, #96]	; (8002560 <SystemInit+0xec>)
 80024fe:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <SystemInit+0xfc>)
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <SystemInit+0xec>)
 8002504:	2200      	movs	r2, #0
 8002506:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <SystemInit+0xec>)
 800250a:	4a19      	ldr	r2, [pc, #100]	; (8002570 <SystemInit+0xfc>)
 800250c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <SystemInit+0xec>)
 8002510:	2200      	movs	r2, #0
 8002512:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <SystemInit+0xec>)
 8002516:	4a16      	ldr	r2, [pc, #88]	; (8002570 <SystemInit+0xfc>)
 8002518:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <SystemInit+0xec>)
 800251c:	2200      	movs	r2, #0
 800251e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <SystemInit+0xec>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <SystemInit+0xec>)
 8002526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <SystemInit+0xec>)
 800252e:	2200      	movs	r2, #0
 8002530:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <SystemInit+0x100>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <SystemInit+0x104>)
 8002538:	4013      	ands	r3, r2
 800253a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800253e:	d202      	bcs.n	8002546 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <SystemInit+0x108>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <SystemInit+0x10c>)
 8002548:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800254c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00
 800255c:	52002000 	.word	0x52002000
 8002560:	58024400 	.word	0x58024400
 8002564:	eaf6ed7f 	.word	0xeaf6ed7f
 8002568:	02020200 	.word	0x02020200
 800256c:	01ff0000 	.word	0x01ff0000
 8002570:	01010280 	.word	0x01010280
 8002574:	5c001000 	.word	0x5c001000
 8002578:	ffff0000 	.word	0xffff0000
 800257c:	51008108 	.word	0x51008108
 8002580:	52004000 	.word	0x52004000

08002584 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <MX_USART3_UART_Init+0x90>)
 800258a:	4a23      	ldr	r2, [pc, #140]	; (8002618 <MX_USART3_UART_Init+0x94>)
 800258c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800258e:	4b21      	ldr	r3, [pc, #132]	; (8002614 <MX_USART3_UART_Init+0x90>)
 8002590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002594:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002596:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <MX_USART3_UART_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <MX_USART3_UART_Init+0x90>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <MX_USART3_UART_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025a8:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <MX_USART3_UART_Init+0x90>)
 80025aa:	220c      	movs	r2, #12
 80025ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <MX_USART3_UART_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b4:	4b17      	ldr	r3, [pc, #92]	; (8002614 <MX_USART3_UART_Init+0x90>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <MX_USART3_UART_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <MX_USART3_UART_Init+0x90>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <MX_USART3_UART_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025cc:	4811      	ldr	r0, [pc, #68]	; (8002614 <MX_USART3_UART_Init+0x90>)
 80025ce:	f007 f8aa 	bl	8009726 <HAL_UART_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80025d8:	f7ff fb06 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025dc:	2100      	movs	r1, #0
 80025de:	480d      	ldr	r0, [pc, #52]	; (8002614 <MX_USART3_UART_Init+0x90>)
 80025e0:	f008 f8de 	bl	800a7a0 <HAL_UARTEx_SetTxFifoThreshold>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80025ea:	f7ff fafd 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025ee:	2100      	movs	r1, #0
 80025f0:	4808      	ldr	r0, [pc, #32]	; (8002614 <MX_USART3_UART_Init+0x90>)
 80025f2:	f008 f913 	bl	800a81c <HAL_UARTEx_SetRxFifoThreshold>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80025fc:	f7ff faf4 	bl	8001be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <MX_USART3_UART_Init+0x90>)
 8002602:	f008 f894 	bl	800a72e <HAL_UARTEx_DisableFifoMode>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800260c:	f7ff faec 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	240008c8 	.word	0x240008c8
 8002618:	40004800 	.word	0x40004800

0800261c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b0b8      	sub	sp, #224	; 0xe0
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002634:	f107 0310 	add.w	r3, r7, #16
 8002638:	22bc      	movs	r2, #188	; 0xbc
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f008 fd81 	bl	800b144 <memset>
  if(uartHandle->Instance==USART3)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a25      	ldr	r2, [pc, #148]	; (80026dc <HAL_UART_MspInit+0xc0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d142      	bne.n	80026d2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800264c:	2302      	movs	r3, #2
 800264e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002656:	f107 0310 	add.w	r3, r7, #16
 800265a:	4618      	mov	r0, r3
 800265c:	f004 f990 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002666:	f7ff fabf 	bl	8001be8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <HAL_UART_MspInit+0xc4>)
 800266c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002670:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <HAL_UART_MspInit+0xc4>)
 8002672:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002676:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_UART_MspInit+0xc4>)
 800267c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_UART_MspInit+0xc4>)
 800268a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800268e:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <HAL_UART_MspInit+0xc4>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_UART_MspInit+0xc4>)
 800269a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80026a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026c0:	2307      	movs	r3, #7
 80026c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026ca:	4619      	mov	r1, r3
 80026cc:	4805      	ldr	r0, [pc, #20]	; (80026e4 <HAL_UART_MspInit+0xc8>)
 80026ce:	f002 fac5 	bl	8004c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80026d2:	bf00      	nop
 80026d4:	37e0      	adds	r7, #224	; 0xe0
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40004800 	.word	0x40004800
 80026e0:	58024400 	.word	0x58024400
 80026e4:	58020400 	.word	0x58020400

080026e8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80026ec:	4b15      	ldr	r3, [pc, #84]	; (8002744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026ee:	4a16      	ldr	r2, [pc, #88]	; (8002748 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80026f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80026f2:	4b14      	ldr	r3, [pc, #80]	; (8002744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026f4:	2209      	movs	r2, #9
 80026f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026fa:	2202      	movs	r2, #2
 80026fc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80026fe:	4b11      	ldr	r3, [pc, #68]	; (8002744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002706:	2202      	movs	r2, #2
 8002708:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800270c:	2200      	movs	r2, #0
 800270e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002712:	2200      	movs	r2, #0
 8002714:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002718:	2200      	movs	r2, #0
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800271e:	2201      	movs	r2, #1
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002724:	2201      	movs	r2, #1
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800272a:	2200      	movs	r2, #0
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800272e:	4805      	ldr	r0, [pc, #20]	; (8002744 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002730:	f002 ff20 	bl	8005574 <HAL_PCD_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800273a:	f7ff fa55 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	24000958 	.word	0x24000958
 8002748:	40080000 	.word	0x40080000

0800274c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b0b8      	sub	sp, #224	; 0xe0
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002764:	f107 0310 	add.w	r3, r7, #16
 8002768:	22bc      	movs	r2, #188	; 0xbc
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f008 fce9 	bl	800b144 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a2f      	ldr	r2, [pc, #188]	; (8002834 <HAL_PCD_MspInit+0xe8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d156      	bne.n	800282a <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800277c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002780:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002782:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800278a:	f107 0310 	add.w	r3, r7, #16
 800278e:	4618      	mov	r0, r3
 8002790:	f004 f8f6 	bl	8006980 <HAL_RCCEx_PeriphCLKConfig>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800279a:	f7ff fa25 	bl	8001be8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800279e:	f003 f86b 	bl	8005878 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	4b25      	ldr	r3, [pc, #148]	; (8002838 <HAL_PCD_MspInit+0xec>)
 80027a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a8:	4a23      	ldr	r2, [pc, #140]	; (8002838 <HAL_PCD_MspInit+0xec>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_PCD_MspInit+0xec>)
 80027b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 80027c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 80027d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027d8:	4619      	mov	r1, r3
 80027da:	4818      	ldr	r0, [pc, #96]	; (800283c <HAL_PCD_MspInit+0xf0>)
 80027dc:	f002 fa3e 	bl	8004c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 80027e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80027fa:	230a      	movs	r3, #10
 80027fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002800:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002804:	4619      	mov	r1, r3
 8002806:	480d      	ldr	r0, [pc, #52]	; (800283c <HAL_PCD_MspInit+0xf0>)
 8002808:	f002 fa28 	bl	8004c5c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_PCD_MspInit+0xec>)
 800280e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002812:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_PCD_MspInit+0xec>)
 8002814:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002818:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_PCD_MspInit+0xec>)
 800281e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800282a:	bf00      	nop
 800282c:	37e0      	adds	r7, #224	; 0xe0
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40080000 	.word	0x40080000
 8002838:	58024400 	.word	0x58024400
 800283c:	58020000 	.word	0x58020000

08002840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002878 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002844:	f7ff fe16 	bl	8002474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002848:	480c      	ldr	r0, [pc, #48]	; (800287c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800284a:	490d      	ldr	r1, [pc, #52]	; (8002880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002860:	4c0a      	ldr	r4, [pc, #40]	; (800288c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800286e:	f008 fc37 	bl	800b0e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002872:	f7ff f89f 	bl	80019b4 <main>
  bx  lr
 8002876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002878:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800287c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002880:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002884:	0800bb30 	.word	0x0800bb30
  ldr r2, =_sbss
 8002888:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 800288c:	24000e78 	.word	0x24000e78

08002890 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC3_IRQHandler>
	...

08002894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800289a:	2003      	movs	r0, #3
 800289c:	f001 fa24 	bl	8003ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028a0:	f003 fe98 	bl	80065d4 <HAL_RCC_GetSysClockFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_Init+0x68>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	0a1b      	lsrs	r3, r3, #8
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	4913      	ldr	r1, [pc, #76]	; (8002900 <HAL_Init+0x6c>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_Init+0x68>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <HAL_Init+0x6c>)
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
 80028d4:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <HAL_Init+0x70>)
 80028d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028d8:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <HAL_Init+0x74>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028de:	2000      	movs	r0, #0
 80028e0:	f000 f814 	bl	800290c <HAL_InitTick>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e002      	b.n	80028f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028ee:	f7ff fd47 	bl	8002380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	58024400 	.word	0x58024400
 8002900:	0800bab4 	.word	0x0800bab4
 8002904:	24000004 	.word	0x24000004
 8002908:	24000000 	.word	0x24000000

0800290c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002914:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_InitTick+0x60>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e021      	b.n	8002964 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002920:	4b13      	ldr	r3, [pc, #76]	; (8002970 <HAL_InitTick+0x64>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_InitTick+0x60>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800292e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	4618      	mov	r0, r3
 8002938:	f001 f9fb 	bl	8003d32 <HAL_SYSTICK_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e00e      	b.n	8002964 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b0f      	cmp	r3, #15
 800294a:	d80a      	bhi.n	8002962 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800294c:	2200      	movs	r2, #0
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f001 f9d3 	bl	8003cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002958:	4a06      	ldr	r2, [pc, #24]	; (8002974 <HAL_InitTick+0x68>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	2400000c 	.word	0x2400000c
 8002970:	24000000 	.word	0x24000000
 8002974:	24000008 	.word	0x24000008

08002978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_IncTick+0x20>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_IncTick+0x24>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4413      	add	r3, r2
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <HAL_IncTick+0x24>)
 800298a:	6013      	str	r3, [r2, #0]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	2400000c 	.word	0x2400000c
 800299c:	24000e64 	.word	0x24000e64

080029a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return uwTick;
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_GetTick+0x14>)
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	24000e64 	.word	0x24000e64

080029b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c0:	f7ff ffee 	bl	80029a0 <HAL_GetTick>
 80029c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d005      	beq.n	80029de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <HAL_Delay+0x44>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4413      	add	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029de:	bf00      	nop
 80029e0:	f7ff ffde 	bl	80029a0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d8f7      	bhi.n	80029e0 <HAL_Delay+0x28>
  {
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	2400000c 	.word	0x2400000c

08002a00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <HAL_GetREVID+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0c1b      	lsrs	r3, r3, #16
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	5c001000 	.word	0x5c001000

08002a18 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a28:	4904      	ldr	r1, [pc, #16]	; (8002a3c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	58000400 	.word	0x58000400

08002a40 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	401a      	ands	r2, r3
 8002a54:	4904      	ldr	r1, [pc, #16]	; (8002a68 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	58000400 	.word	0x58000400

08002a6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	609a      	str	r2, [r3, #8]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3360      	adds	r3, #96	; 0x60
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	431a      	orrs	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b08:	bf00      	nop
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	431a      	orrs	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	611a      	str	r2, [r3, #16]
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b087      	sub	sp, #28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3360      	adds	r3, #96	; 0x60
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	601a      	str	r2, [r3, #0]
  }
}
 8002b70:	bf00      	nop
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3330      	adds	r3, #48	; 0x30
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	4413      	add	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	211f      	movs	r1, #31
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	401a      	ands	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	0e9b      	lsrs	r3, r3, #26
 8002bb4:	f003 011f 	and.w	r1, r3, #31
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bc8:	bf00      	nop
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3314      	adds	r3, #20
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	0e5b      	lsrs	r3, r3, #25
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	4413      	add	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	0d1b      	lsrs	r3, r3, #20
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	2107      	movs	r1, #7
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	401a      	ands	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	0d1b      	lsrs	r3, r3, #20
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c44:	43db      	mvns	r3, r3
 8002c46:	401a      	ands	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f003 0318 	and.w	r3, r3, #24
 8002c4e:	4908      	ldr	r1, [pc, #32]	; (8002c70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c50:	40d9      	lsrs	r1, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	400b      	ands	r3, r1
 8002c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	000fffff 	.word	0x000fffff

08002c74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6093      	str	r3, [r2, #8]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	5fffffc0 	.word	0x5fffffc0

08002c98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cac:	d101      	bne.n	8002cb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	6fffffc0 	.word	0x6fffffc0

08002ce8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cfc:	d101      	bne.n	8002d02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <LL_ADC_IsEnabled+0x18>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <LL_ADC_IsEnabled+0x1a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d101      	bne.n	8002d4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d101      	bne.n	8002d74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e18f      	b.n	80030be <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7fd fdaf 	bl	8000910 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff67 	bl	8002c98 <LL_ADC_IsDeepPowerDownEnabled>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff4d 	bl	8002c74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff82 	bl	8002ce8 <LL_ADC_IsInternalRegulatorEnabled>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d114      	bne.n	8002e14 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ff66 	bl	8002cc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002df4:	4b87      	ldr	r3, [pc, #540]	; (8003014 <HAL_ADC_Init+0x290>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	4a87      	ldr	r2, [pc, #540]	; (8003018 <HAL_ADC_Init+0x294>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	3301      	adds	r3, #1
 8002e04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e06:	e002      	b.n	8002e0e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f9      	bne.n	8002e08 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff65 	bl	8002ce8 <LL_ADC_IsInternalRegulatorEnabled>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10d      	bne.n	8002e40 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e28:	f043 0210 	orr.w	r2, r3, #16
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f043 0201 	orr.w	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff76 	bl	8002d36 <LL_ADC_REG_IsConversionOngoing>
 8002e4a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 8129 	bne.w	80030ac <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 8125 	bne.w	80030ac <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e6a:	f043 0202 	orr.w	r2, r3, #2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff4a 	bl	8002d10 <LL_ADC_IsEnabled>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d136      	bne.n	8002ef0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a65      	ldr	r2, [pc, #404]	; (800301c <HAL_ADC_Init+0x298>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <HAL_ADC_Init+0x112>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a63      	ldr	r2, [pc, #396]	; (8003020 <HAL_ADC_Init+0x29c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10e      	bne.n	8002eb4 <HAL_ADC_Init+0x130>
 8002e96:	4861      	ldr	r0, [pc, #388]	; (800301c <HAL_ADC_Init+0x298>)
 8002e98:	f7ff ff3a 	bl	8002d10 <LL_ADC_IsEnabled>
 8002e9c:	4604      	mov	r4, r0
 8002e9e:	4860      	ldr	r0, [pc, #384]	; (8003020 <HAL_ADC_Init+0x29c>)
 8002ea0:	f7ff ff36 	bl	8002d10 <LL_ADC_IsEnabled>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4323      	orrs	r3, r4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e008      	b.n	8002ec6 <HAL_ADC_Init+0x142>
 8002eb4:	485b      	ldr	r0, [pc, #364]	; (8003024 <HAL_ADC_Init+0x2a0>)
 8002eb6:	f7ff ff2b 	bl	8002d10 <LL_ADC_IsEnabled>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d012      	beq.n	8002ef0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a53      	ldr	r2, [pc, #332]	; (800301c <HAL_ADC_Init+0x298>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_ADC_Init+0x15a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a51      	ldr	r2, [pc, #324]	; (8003020 <HAL_ADC_Init+0x29c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_Init+0x15e>
 8002ede:	4a52      	ldr	r2, [pc, #328]	; (8003028 <HAL_ADC_Init+0x2a4>)
 8002ee0:	e000      	b.n	8002ee4 <HAL_ADC_Init+0x160>
 8002ee2:	4a52      	ldr	r2, [pc, #328]	; (800302c <HAL_ADC_Init+0x2a8>)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f7ff fdbe 	bl	8002a6c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002ef0:	f7ff fd86 	bl	8002a00 <HAL_GetREVID>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d914      	bls.n	8002f28 <HAL_ADC_Init+0x1a4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d110      	bne.n	8002f28 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7d5b      	ldrb	r3, [r3, #21]
 8002f0a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f10:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7f1b      	ldrb	r3, [r3, #28]
 8002f1c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f1e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f20:	f043 030c 	orr.w	r3, r3, #12
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	e00d      	b.n	8002f44 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7d5b      	ldrb	r3, [r3, #21]
 8002f2c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f32:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f38:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	7f1b      	ldrb	r3, [r3, #28]
 8002f3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	7f1b      	ldrb	r3, [r3, #28]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d106      	bne.n	8002f5a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	045b      	lsls	r3, r3, #17
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	4b2c      	ldr	r3, [pc, #176]	; (8003030 <HAL_ADC_Init+0x2ac>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	69b9      	ldr	r1, [r7, #24]
 8002f86:	430b      	orrs	r3, r1
 8002f88:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fed1 	bl	8002d36 <LL_ADC_REG_IsConversionOngoing>
 8002f94:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fede 	bl	8002d5c <LL_ADC_INJ_IsConversionOngoing>
 8002fa0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d15f      	bne.n	8003068 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d15c      	bne.n	8003068 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7d1b      	ldrb	r3, [r3, #20]
 8002fb2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <HAL_ADC_Init+0x2b0>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	69b9      	ldr	r1, [r7, #24]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d130      	bne.n	800303c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <HAL_ADC_Init+0x2b4>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fee:	3a01      	subs	r2, #1
 8002ff0:	0411      	lsls	r1, r2, #16
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ff6:	4311      	orrs	r1, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ffc:	4311      	orrs	r1, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003002:	430a      	orrs	r2, r1
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	611a      	str	r2, [r3, #16]
 8003010:	e01c      	b.n	800304c <HAL_ADC_Init+0x2c8>
 8003012:	bf00      	nop
 8003014:	24000000 	.word	0x24000000
 8003018:	053e2d63 	.word	0x053e2d63
 800301c:	40022000 	.word	0x40022000
 8003020:	40022100 	.word	0x40022100
 8003024:	58026000 	.word	0x58026000
 8003028:	40022300 	.word	0x40022300
 800302c:	58026300 	.word	0x58026300
 8003030:	fff0c003 	.word	0xfff0c003
 8003034:	ffffbffc 	.word	0xffffbffc
 8003038:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fb80 	bl	8003768 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d10c      	bne.n	800308a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f023 010f 	bic.w	r1, r3, #15
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	1e5a      	subs	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
 8003088:	e007      	b.n	800309a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 020f 	bic.w	r2, r2, #15
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	f023 0303 	bic.w	r3, r3, #3
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
 80030aa:	e007      	b.n	80030bc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	f043 0210 	orr.w	r2, r3, #16
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd90      	pop	{r4, r7, pc}
 80030c6:	bf00      	nop

080030c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b0a1      	sub	sp, #132	; 0x84
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4a9d      	ldr	r2, [pc, #628]	; (8003358 <HAL_ADC_ConfigChannel+0x290>)
 80030e2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x2a>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e321      	b.n	8003736 <HAL_ADC_ConfigChannel+0x66e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fe19 	bl	8002d36 <LL_ADC_REG_IsConversionOngoing>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 8306 	bne.w	8003718 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003114:	2b00      	cmp	r3, #0
 8003116:	d108      	bne.n	800312a <HAL_ADC_ConfigChannel+0x62>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	0e9b      	lsrs	r3, r3, #26
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	2201      	movs	r2, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	e016      	b.n	8003158 <HAL_ADC_ConfigChannel+0x90>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800313a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800313c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003142:	2320      	movs	r3, #32
 8003144:	e003      	b.n	800314e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003146:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	2201      	movs	r2, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	69d1      	ldr	r1, [r2, #28]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	430b      	orrs	r3, r1
 8003164:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	f7ff fd02 	bl	8002b7c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fdda 	bl	8002d36 <LL_ADC_REG_IsConversionOngoing>
 8003182:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fde7 	bl	8002d5c <LL_ADC_INJ_IsConversionOngoing>
 800318e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 80b3 	bne.w	80032fe <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 80af 	bne.w	80032fe <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6819      	ldr	r1, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	461a      	mov	r2, r3
 80031ae:	f7ff fd11 	bl	8002bd4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031b2:	4b6a      	ldr	r3, [pc, #424]	; (800335c <HAL_ADC_ConfigChannel+0x294>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80031ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031be:	d10b      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x110>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	e01d      	b.n	8003214 <HAL_ADC_ConfigChannel+0x14c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x136>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	e00a      	b.n	8003214 <HAL_ADC_ConfigChannel+0x14c>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b04      	cmp	r3, #4
 800321c:	d027      	beq.n	800326e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6919      	ldr	r1, [r3, #16]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800322c:	f7ff fc52 	bl	8002ad4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6919      	ldr	r1, [r3, #16]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	7e5b      	ldrb	r3, [r3, #25]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d102      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x17e>
 8003240:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003244:	e000      	b.n	8003248 <HAL_ADC_ConfigChannel+0x180>
 8003246:	2300      	movs	r3, #0
 8003248:	461a      	mov	r2, r3
 800324a:	f7ff fc7c 	bl	8002b46 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6919      	ldr	r1, [r3, #16]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	7e1b      	ldrb	r3, [r3, #24]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d102      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x19c>
 800325e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003262:	e000      	b.n	8003266 <HAL_ADC_ConfigChannel+0x19e>
 8003264:	2300      	movs	r3, #0
 8003266:	461a      	mov	r2, r3
 8003268:	f7ff fc54 	bl	8002b14 <LL_ADC_SetDataRightShift>
 800326c:	e047      	b.n	80032fe <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003274:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	069b      	lsls	r3, r3, #26
 800327e:	429a      	cmp	r2, r3
 8003280:	d107      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003290:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003298:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	069b      	lsls	r3, r3, #26
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d107      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032b4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	069b      	lsls	r3, r3, #26
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d107      	bne.n	80032da <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032d8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	069b      	lsls	r3, r3, #26
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d107      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032fc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fd04 	bl	8002d10 <LL_ADC_IsEnabled>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 820d 	bne.w	800372a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6819      	ldr	r1, [r3, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	461a      	mov	r2, r3
 800331e:	f7ff fc85 	bl	8002c2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	4a0c      	ldr	r2, [pc, #48]	; (8003358 <HAL_ADC_ConfigChannel+0x290>)
 8003328:	4293      	cmp	r3, r2
 800332a:	f040 8133 	bne.w	8003594 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800333a:	2b00      	cmp	r3, #0
 800333c:	d110      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x298>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	0e9b      	lsrs	r3, r3, #26
 8003344:	3301      	adds	r3, #1
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2b09      	cmp	r3, #9
 800334c:	bf94      	ite	ls
 800334e:	2301      	movls	r3, #1
 8003350:	2300      	movhi	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	e01e      	b.n	8003394 <HAL_ADC_ConfigChannel+0x2cc>
 8003356:	bf00      	nop
 8003358:	47ff0000 	.word	0x47ff0000
 800335c:	5c001000 	.word	0x5c001000
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800336e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003370:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003378:	2320      	movs	r3, #32
 800337a:	e003      	b.n	8003384 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800337c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	3301      	adds	r3, #1
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2b09      	cmp	r3, #9
 800338c:	bf94      	ite	ls
 800338e:	2301      	movls	r3, #1
 8003390:	2300      	movhi	r3, #0
 8003392:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003394:	2b00      	cmp	r3, #0
 8003396:	d079      	beq.n	800348c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d107      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x2ec>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0e9b      	lsrs	r3, r3, #26
 80033aa:	3301      	adds	r3, #1
 80033ac:	069b      	lsls	r3, r3, #26
 80033ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033b2:	e015      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x318>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80033c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80033c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80033cc:	2320      	movs	r3, #32
 80033ce:	e003      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80033d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	069b      	lsls	r3, r3, #26
 80033dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x338>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0e9b      	lsrs	r3, r3, #26
 80033f2:	3301      	adds	r3, #1
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2101      	movs	r1, #1
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	e017      	b.n	8003430 <HAL_ADC_ConfigChannel+0x368>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800340e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003410:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003418:	2320      	movs	r3, #32
 800341a:	e003      	b.n	8003424 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800341c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	3301      	adds	r3, #1
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f303 	lsl.w	r3, r1, r3
 8003430:	ea42 0103 	orr.w	r1, r2, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x38e>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	0e9b      	lsrs	r3, r3, #26
 8003446:	3301      	adds	r3, #1
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	051b      	lsls	r3, r3, #20
 8003454:	e018      	b.n	8003488 <HAL_ADC_ConfigChannel+0x3c0>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800346e:	2320      	movs	r3, #32
 8003470:	e003      	b.n	800347a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003474:	fab3 f383 	clz	r3, r3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	3301      	adds	r3, #1
 800347c:	f003 021f 	and.w	r2, r3, #31
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003488:	430b      	orrs	r3, r1
 800348a:	e07e      	b.n	800358a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003494:	2b00      	cmp	r3, #0
 8003496:	d107      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x3e0>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0e9b      	lsrs	r3, r3, #26
 800349e:	3301      	adds	r3, #1
 80034a0:	069b      	lsls	r3, r3, #26
 80034a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034a6:	e015      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x40c>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80034c0:	2320      	movs	r3, #32
 80034c2:	e003      	b.n	80034cc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	3301      	adds	r3, #1
 80034ce:	069b      	lsls	r3, r3, #26
 80034d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x42c>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	0e9b      	lsrs	r3, r3, #26
 80034e6:	3301      	adds	r3, #1
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2101      	movs	r1, #1
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	e017      	b.n	8003524 <HAL_ADC_ConfigChannel+0x45c>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	61bb      	str	r3, [r7, #24]
  return result;
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800350c:	2320      	movs	r3, #32
 800350e:	e003      	b.n	8003518 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3301      	adds	r3, #1
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2101      	movs	r1, #1
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	ea42 0103 	orr.w	r1, r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10d      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x488>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	0e9b      	lsrs	r3, r3, #26
 800353a:	3301      	adds	r3, #1
 800353c:	f003 021f 	and.w	r2, r3, #31
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	3b1e      	subs	r3, #30
 8003548:	051b      	lsls	r3, r3, #20
 800354a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800354e:	e01b      	b.n	8003588 <HAL_ADC_ConfigChannel+0x4c0>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	60fb      	str	r3, [r7, #12]
  return result;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003568:	2320      	movs	r3, #32
 800356a:	e003      	b.n	8003574 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	3301      	adds	r3, #1
 8003576:	f003 021f 	and.w	r2, r3, #31
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	3b1e      	subs	r3, #30
 8003582:	051b      	lsls	r3, r3, #20
 8003584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003588:	430b      	orrs	r3, r1
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	6892      	ldr	r2, [r2, #8]
 800358e:	4619      	mov	r1, r3
 8003590:	f7ff fb20 	bl	8002bd4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f280 80c6 	bge.w	800372a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a67      	ldr	r2, [pc, #412]	; (8003740 <HAL_ADC_ConfigChannel+0x678>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d004      	beq.n	80035b2 <HAL_ADC_ConfigChannel+0x4ea>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a65      	ldr	r2, [pc, #404]	; (8003744 <HAL_ADC_ConfigChannel+0x67c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x4ee>
 80035b2:	4b65      	ldr	r3, [pc, #404]	; (8003748 <HAL_ADC_ConfigChannel+0x680>)
 80035b4:	e000      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x4f0>
 80035b6:	4b65      	ldr	r3, [pc, #404]	; (800374c <HAL_ADC_ConfigChannel+0x684>)
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fa7d 	bl	8002ab8 <LL_ADC_GetCommonPathInternalCh>
 80035be:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a5e      	ldr	r2, [pc, #376]	; (8003740 <HAL_ADC_ConfigChannel+0x678>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_ADC_ConfigChannel+0x50c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a5d      	ldr	r2, [pc, #372]	; (8003744 <HAL_ADC_ConfigChannel+0x67c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10e      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x52a>
 80035d4:	485a      	ldr	r0, [pc, #360]	; (8003740 <HAL_ADC_ConfigChannel+0x678>)
 80035d6:	f7ff fb9b 	bl	8002d10 <LL_ADC_IsEnabled>
 80035da:	4604      	mov	r4, r0
 80035dc:	4859      	ldr	r0, [pc, #356]	; (8003744 <HAL_ADC_ConfigChannel+0x67c>)
 80035de:	f7ff fb97 	bl	8002d10 <LL_ADC_IsEnabled>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4323      	orrs	r3, r4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	e008      	b.n	8003604 <HAL_ADC_ConfigChannel+0x53c>
 80035f2:	4857      	ldr	r0, [pc, #348]	; (8003750 <HAL_ADC_ConfigChannel+0x688>)
 80035f4:	f7ff fb8c 	bl	8002d10 <LL_ADC_IsEnabled>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d07d      	beq.n	8003704 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a51      	ldr	r2, [pc, #324]	; (8003754 <HAL_ADC_ConfigChannel+0x68c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d130      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x5ac>
 8003612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d12b      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a4b      	ldr	r2, [pc, #300]	; (8003750 <HAL_ADC_ConfigChannel+0x688>)
 8003622:	4293      	cmp	r3, r2
 8003624:	f040 8081 	bne.w	800372a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a44      	ldr	r2, [pc, #272]	; (8003740 <HAL_ADC_ConfigChannel+0x678>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_ADC_ConfigChannel+0x574>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a43      	ldr	r2, [pc, #268]	; (8003744 <HAL_ADC_ConfigChannel+0x67c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d101      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x578>
 800363c:	4a42      	ldr	r2, [pc, #264]	; (8003748 <HAL_ADC_ConfigChannel+0x680>)
 800363e:	e000      	b.n	8003642 <HAL_ADC_ConfigChannel+0x57a>
 8003640:	4a42      	ldr	r2, [pc, #264]	; (800374c <HAL_ADC_ConfigChannel+0x684>)
 8003642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003644:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f7ff fa21 	bl	8002a92 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003650:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_ADC_ConfigChannel+0x690>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	099b      	lsrs	r3, r3, #6
 8003656:	4a41      	ldr	r2, [pc, #260]	; (800375c <HAL_ADC_ConfigChannel+0x694>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	3301      	adds	r3, #1
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003664:	e002      	b.n	800366c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	3b01      	subs	r3, #1
 800366a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f9      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003672:	e05a      	b.n	800372a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a39      	ldr	r2, [pc, #228]	; (8003760 <HAL_ADC_ConfigChannel+0x698>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d11e      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x5f4>
 800367e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d119      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a30      	ldr	r2, [pc, #192]	; (8003750 <HAL_ADC_ConfigChannel+0x688>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d14b      	bne.n	800372a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2a      	ldr	r2, [pc, #168]	; (8003740 <HAL_ADC_ConfigChannel+0x678>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_ADC_ConfigChannel+0x5de>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a28      	ldr	r2, [pc, #160]	; (8003744 <HAL_ADC_ConfigChannel+0x67c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x5e2>
 80036a6:	4a28      	ldr	r2, [pc, #160]	; (8003748 <HAL_ADC_ConfigChannel+0x680>)
 80036a8:	e000      	b.n	80036ac <HAL_ADC_ConfigChannel+0x5e4>
 80036aa:	4a28      	ldr	r2, [pc, #160]	; (800374c <HAL_ADC_ConfigChannel+0x684>)
 80036ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b2:	4619      	mov	r1, r3
 80036b4:	4610      	mov	r0, r2
 80036b6:	f7ff f9ec 	bl	8002a92 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036ba:	e036      	b.n	800372a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a28      	ldr	r2, [pc, #160]	; (8003764 <HAL_ADC_ConfigChannel+0x69c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d131      	bne.n	800372a <HAL_ADC_ConfigChannel+0x662>
 80036c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d12c      	bne.n	800372a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <HAL_ADC_ConfigChannel+0x688>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d127      	bne.n	800372a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a18      	ldr	r2, [pc, #96]	; (8003740 <HAL_ADC_ConfigChannel+0x678>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_ADC_ConfigChannel+0x626>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a16      	ldr	r2, [pc, #88]	; (8003744 <HAL_ADC_ConfigChannel+0x67c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x62a>
 80036ee:	4a16      	ldr	r2, [pc, #88]	; (8003748 <HAL_ADC_ConfigChannel+0x680>)
 80036f0:	e000      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x62c>
 80036f2:	4a16      	ldr	r2, [pc, #88]	; (800374c <HAL_ADC_ConfigChannel+0x684>)
 80036f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f7ff f9c8 	bl	8002a92 <LL_ADC_SetCommonPathInternalCh>
 8003702:	e012      	b.n	800372a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003716:	e008      	b.n	800372a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003732:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003736:	4618      	mov	r0, r3
 8003738:	3784      	adds	r7, #132	; 0x84
 800373a:	46bd      	mov	sp, r7
 800373c:	bd90      	pop	{r4, r7, pc}
 800373e:	bf00      	nop
 8003740:	40022000 	.word	0x40022000
 8003744:	40022100 	.word	0x40022100
 8003748:	40022300 	.word	0x40022300
 800374c:	58026300 	.word	0x58026300
 8003750:	58026000 	.word	0x58026000
 8003754:	cb840000 	.word	0xcb840000
 8003758:	24000000 	.word	0x24000000
 800375c:	053e2d63 	.word	0x053e2d63
 8003760:	c7520000 	.word	0xc7520000
 8003764:	cfb80000 	.word	0xcfb80000

08003768 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a79      	ldr	r2, [pc, #484]	; (800395c <ADC_ConfigureBoostMode+0x1f4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <ADC_ConfigureBoostMode+0x1c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a78      	ldr	r2, [pc, #480]	; (8003960 <ADC_ConfigureBoostMode+0x1f8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d109      	bne.n	8003798 <ADC_ConfigureBoostMode+0x30>
 8003784:	4b77      	ldr	r3, [pc, #476]	; (8003964 <ADC_ConfigureBoostMode+0x1fc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e008      	b.n	80037aa <ADC_ConfigureBoostMode+0x42>
 8003798:	4b73      	ldr	r3, [pc, #460]	; (8003968 <ADC_ConfigureBoostMode+0x200>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01c      	beq.n	80037e8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80037ae:	f003 f88b 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 80037b2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037bc:	d010      	beq.n	80037e0 <ADC_ConfigureBoostMode+0x78>
 80037be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037c2:	d871      	bhi.n	80038a8 <ADC_ConfigureBoostMode+0x140>
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c8:	d002      	beq.n	80037d0 <ADC_ConfigureBoostMode+0x68>
 80037ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ce:	d16b      	bne.n	80038a8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037dc:	60fb      	str	r3, [r7, #12]
        break;
 80037de:	e066      	b.n	80038ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	60fb      	str	r3, [r7, #12]
        break;
 80037e6:	e062      	b.n	80038ae <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80037e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80037ec:	f004 f80e 	bl	800780c <HAL_RCCEx_GetPeriphCLKFreq>
 80037f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80037fa:	d051      	beq.n	80038a0 <ADC_ConfigureBoostMode+0x138>
 80037fc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003800:	d854      	bhi.n	80038ac <ADC_ConfigureBoostMode+0x144>
 8003802:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003806:	d047      	beq.n	8003898 <ADC_ConfigureBoostMode+0x130>
 8003808:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800380c:	d84e      	bhi.n	80038ac <ADC_ConfigureBoostMode+0x144>
 800380e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003812:	d03d      	beq.n	8003890 <ADC_ConfigureBoostMode+0x128>
 8003814:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003818:	d848      	bhi.n	80038ac <ADC_ConfigureBoostMode+0x144>
 800381a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800381e:	d033      	beq.n	8003888 <ADC_ConfigureBoostMode+0x120>
 8003820:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003824:	d842      	bhi.n	80038ac <ADC_ConfigureBoostMode+0x144>
 8003826:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800382a:	d029      	beq.n	8003880 <ADC_ConfigureBoostMode+0x118>
 800382c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003830:	d83c      	bhi.n	80038ac <ADC_ConfigureBoostMode+0x144>
 8003832:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003836:	d01a      	beq.n	800386e <ADC_ConfigureBoostMode+0x106>
 8003838:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800383c:	d836      	bhi.n	80038ac <ADC_ConfigureBoostMode+0x144>
 800383e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003842:	d014      	beq.n	800386e <ADC_ConfigureBoostMode+0x106>
 8003844:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003848:	d830      	bhi.n	80038ac <ADC_ConfigureBoostMode+0x144>
 800384a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800384e:	d00e      	beq.n	800386e <ADC_ConfigureBoostMode+0x106>
 8003850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003854:	d82a      	bhi.n	80038ac <ADC_ConfigureBoostMode+0x144>
 8003856:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800385a:	d008      	beq.n	800386e <ADC_ConfigureBoostMode+0x106>
 800385c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003860:	d824      	bhi.n	80038ac <ADC_ConfigureBoostMode+0x144>
 8003862:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003866:	d002      	beq.n	800386e <ADC_ConfigureBoostMode+0x106>
 8003868:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800386c:	d11e      	bne.n	80038ac <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	0c9b      	lsrs	r3, r3, #18
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	fbb2 f3f3 	udiv	r3, r2, r3
 800387c:	60fb      	str	r3, [r7, #12]
        break;
 800387e:	e016      	b.n	80038ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
        break;
 8003886:	e012      	b.n	80038ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	60fb      	str	r3, [r7, #12]
        break;
 800388e:	e00e      	b.n	80038ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	60fb      	str	r3, [r7, #12]
        break;
 8003896:	e00a      	b.n	80038ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	09db      	lsrs	r3, r3, #7
 800389c:	60fb      	str	r3, [r7, #12]
        break;
 800389e:	e006      	b.n	80038ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	60fb      	str	r3, [r7, #12]
        break;
 80038a6:	e002      	b.n	80038ae <ADC_ConfigureBoostMode+0x146>
        break;
 80038a8:	bf00      	nop
 80038aa:	e000      	b.n	80038ae <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80038ac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80038ae:	f7ff f8a7 	bl	8002a00 <HAL_GetREVID>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d815      	bhi.n	80038e8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4a2b      	ldr	r2, [pc, #172]	; (800396c <ADC_ConfigureBoostMode+0x204>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d908      	bls.n	80038d6 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80038d4:	e03e      	b.n	8003954 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e4:	609a      	str	r2, [r3, #8]
}
 80038e6:	e035      	b.n	8003954 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	085b      	lsrs	r3, r3, #1
 80038ec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <ADC_ConfigureBoostMode+0x208>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d808      	bhi.n	8003908 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003904:	609a      	str	r2, [r3, #8]
}
 8003906:	e025      	b.n	8003954 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a1a      	ldr	r2, [pc, #104]	; (8003974 <ADC_ConfigureBoostMode+0x20c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d80a      	bhi.n	8003926 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003922:	609a      	str	r2, [r3, #8]
}
 8003924:	e016      	b.n	8003954 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4a13      	ldr	r2, [pc, #76]	; (8003978 <ADC_ConfigureBoostMode+0x210>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d80a      	bhi.n	8003944 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003940:	609a      	str	r2, [r3, #8]
}
 8003942:	e007      	b.n	8003954 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003952:	609a      	str	r2, [r3, #8]
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40022000 	.word	0x40022000
 8003960:	40022100 	.word	0x40022100
 8003964:	40022300 	.word	0x40022300
 8003968:	58026300 	.word	0x58026300
 800396c:	01312d00 	.word	0x01312d00
 8003970:	005f5e10 	.word	0x005f5e10
 8003974:	00bebc20 	.word	0x00bebc20
 8003978:	017d7840 	.word	0x017d7840

0800397c <LL_ADC_IsEnabled>:
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <LL_ADC_IsEnabled+0x18>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <LL_ADC_IsEnabled+0x1a>
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d101      	bne.n	80039ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b09f      	sub	sp, #124	; 0x7c
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e0be      	b.n	8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80039f2:	2300      	movs	r3, #0
 80039f4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a5c      	ldr	r2, [pc, #368]	; (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d102      	bne.n	8003a06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a00:	4b5b      	ldr	r3, [pc, #364]	; (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	e001      	b.n	8003a0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10b      	bne.n	8003a28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e09d      	b.n	8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff ffb9 	bl	80039a2 <LL_ADC_REG_IsConversionOngoing>
 8003a30:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff ffb3 	bl	80039a2 <LL_ADC_REG_IsConversionOngoing>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d17f      	bne.n	8003b42 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d17c      	bne.n	8003b42 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a47      	ldr	r2, [pc, #284]	; (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a46      	ldr	r2, [pc, #280]	; (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003a5c:	4b45      	ldr	r3, [pc, #276]	; (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a5e:	e000      	b.n	8003a62 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003a60:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a62:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d039      	beq.n	8003ae0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a3a      	ldr	r2, [pc, #232]	; (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a38      	ldr	r2, [pc, #224]	; (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d10e      	bne.n	8003ab0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a92:	4836      	ldr	r0, [pc, #216]	; (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a94:	f7ff ff72 	bl	800397c <LL_ADC_IsEnabled>
 8003a98:	4604      	mov	r4, r0
 8003a9a:	4835      	ldr	r0, [pc, #212]	; (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a9c:	f7ff ff6e 	bl	800397c <LL_ADC_IsEnabled>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4323      	orrs	r3, r4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2301      	moveq	r3, #1
 8003aaa:	2300      	movne	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	e008      	b.n	8003ac2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003ab0:	4832      	ldr	r0, [pc, #200]	; (8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ab2:	f7ff ff63 	bl	800397c <LL_ADC_IsEnabled>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d047      	beq.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	4b2d      	ldr	r3, [pc, #180]	; (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	6811      	ldr	r1, [r2, #0]
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	6892      	ldr	r2, [r2, #8]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003adc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ade:	e03a      	b.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d10e      	bne.n	8003b1e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003b00:	481a      	ldr	r0, [pc, #104]	; (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b02:	f7ff ff3b 	bl	800397c <LL_ADC_IsEnabled>
 8003b06:	4604      	mov	r4, r0
 8003b08:	4819      	ldr	r0, [pc, #100]	; (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b0a:	f7ff ff37 	bl	800397c <LL_ADC_IsEnabled>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4323      	orrs	r3, r4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf0c      	ite	eq
 8003b16:	2301      	moveq	r3, #1
 8003b18:	2300      	movne	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	e008      	b.n	8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003b1e:	4817      	ldr	r0, [pc, #92]	; (8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003b20:	f7ff ff2c 	bl	800397c <LL_ADC_IsEnabled>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bf0c      	ite	eq
 8003b2a:	2301      	moveq	r3, #1
 8003b2c:	2300      	movne	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d010      	beq.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b3e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b40:	e009      	b.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003b54:	e000      	b.n	8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b56:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	377c      	adds	r7, #124	; 0x7c
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd90      	pop	{r4, r7, pc}
 8003b6c:	40022000 	.word	0x40022000
 8003b70:	40022100 	.word	0x40022100
 8003b74:	40022300 	.word	0x40022300
 8003b78:	58026300 	.word	0x58026300
 8003b7c:	58026000 	.word	0x58026000
 8003b80:	fffff0e0 	.word	0xfffff0e0

08003b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bb2:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	60d3      	str	r3, [r2, #12]
}
 8003bb8:	bf00      	nop
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000ed00 	.word	0xe000ed00
 8003bc8:	05fa0000 	.word	0x05fa0000

08003bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	0a1b      	lsrs	r3, r3, #8
 8003bd6:	f003 0307 	and.w	r3, r3, #7
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	6039      	str	r1, [r7, #0]
 8003bf2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	db0a      	blt.n	8003c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	490c      	ldr	r1, [pc, #48]	; (8003c34 <__NVIC_SetPriority+0x4c>)
 8003c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c06:	0112      	lsls	r2, r2, #4
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c10:	e00a      	b.n	8003c28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4908      	ldr	r1, [pc, #32]	; (8003c38 <__NVIC_SetPriority+0x50>)
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	3b04      	subs	r3, #4
 8003c20:	0112      	lsls	r2, r2, #4
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	440b      	add	r3, r1
 8003c26:	761a      	strb	r2, [r3, #24]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	e000e100 	.word	0xe000e100
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	; 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f1c3 0307 	rsb	r3, r3, #7
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	bf28      	it	cs
 8003c5a:	2304      	movcs	r3, #4
 8003c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3304      	adds	r3, #4
 8003c62:	2b06      	cmp	r3, #6
 8003c64:	d902      	bls.n	8003c6c <NVIC_EncodePriority+0x30>
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3b03      	subs	r3, #3
 8003c6a:	e000      	b.n	8003c6e <NVIC_EncodePriority+0x32>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c70:	f04f 32ff 	mov.w	r2, #4294967295
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	401a      	ands	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c84:	f04f 31ff 	mov.w	r1, #4294967295
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	43d9      	mvns	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c94:	4313      	orrs	r3, r2
         );
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3724      	adds	r7, #36	; 0x24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cb4:	d301      	bcc.n	8003cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e00f      	b.n	8003cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <SysTick_Config+0x40>)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cc2:	210f      	movs	r1, #15
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc8:	f7ff ff8e 	bl	8003be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <SysTick_Config+0x40>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cd2:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <SysTick_Config+0x40>)
 8003cd4:	2207      	movs	r2, #7
 8003cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	e000e010 	.word	0xe000e010

08003ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ff47 	bl	8003b84 <__NVIC_SetPriorityGrouping>
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	4603      	mov	r3, r0
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d0c:	f7ff ff5e 	bl	8003bcc <__NVIC_GetPriorityGrouping>
 8003d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68b9      	ldr	r1, [r7, #8]
 8003d16:	6978      	ldr	r0, [r7, #20]
 8003d18:	f7ff ff90 	bl	8003c3c <NVIC_EncodePriority>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d22:	4611      	mov	r1, r2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ff5f 	bl	8003be8 <__NVIC_SetPriority>
}
 8003d2a:	bf00      	nop
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff ffb2 	bl	8003ca4 <SysTick_Config>
 8003d40:	4603      	mov	r3, r0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0cf      	b.n	8003efe <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d106      	bne.n	8003d76 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2223      	movs	r2, #35	; 0x23
 8003d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7fc ff1b 	bl	8000bac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d76:	4b64      	ldr	r3, [pc, #400]	; (8003f08 <HAL_ETH_Init+0x1bc>)
 8003d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d7c:	4a62      	ldr	r2, [pc, #392]	; (8003f08 <HAL_ETH_Init+0x1bc>)
 8003d7e:	f043 0302 	orr.w	r3, r3, #2
 8003d82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d86:	4b60      	ldr	r3, [pc, #384]	; (8003f08 <HAL_ETH_Init+0x1bc>)
 8003d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	7a1b      	ldrb	r3, [r3, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d103      	bne.n	8003da4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f7fe fe3b 	bl	8002a18 <HAL_SYSCFG_ETHInterfaceSelect>
 8003da2:	e003      	b.n	8003dac <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003da4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003da8:	f7fe fe36 	bl	8002a18 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003dac:	4b57      	ldr	r3, [pc, #348]	; (8003f0c <HAL_ETH_Init+0x1c0>)
 8003dae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dc8:	f7fe fdea 	bl	80029a0 <HAL_GetTick>
 8003dcc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003dce:	e011      	b.n	8003df4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003dd0:	f7fe fde6 	bl	80029a0 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dde:	d909      	bls.n	8003df4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2204      	movs	r2, #4
 8003de4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	22e0      	movs	r2, #224	; 0xe0
 8003dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e084      	b.n	8003efe <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e4      	bne.n	8003dd0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f886 	bl	8003f18 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003e0c:	f002 fd5c 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 8003e10:	4603      	mov	r3, r0
 8003e12:	4a3f      	ldr	r2, [pc, #252]	; (8003f10 <HAL_ETH_Init+0x1c4>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	0c9a      	lsrs	r2, r3, #18
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3a01      	subs	r2, #1
 8003e20:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fa71 	bl	800430c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e32:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e36:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e46:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	22e0      	movs	r2, #224	; 0xe0
 8003e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e049      	b.n	8003efe <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e72:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003e76:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <HAL_ETH_Init+0x1c8>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6952      	ldr	r2, [r2, #20]
 8003e7e:	0051      	lsls	r1, r2, #1
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	430b      	orrs	r3, r1
 8003e86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e8a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fad9 	bl	8004446 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fb1f 	bl	80044d8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	3305      	adds	r3, #5
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	021a      	lsls	r2, r3, #8
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	4619      	mov	r1, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	3303      	adds	r3, #3
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	061a      	lsls	r2, r3, #24
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	041b      	lsls	r3, r3, #16
 8003ecc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ed8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ee6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ee8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2210      	movs	r2, #16
 8003ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	58024400 	.word	0x58024400
 8003f0c:	58000400 	.word	0x58000400
 8003f10:	431bde83 	.word	0x431bde83
 8003f14:	ffff8001 	.word	0xffff8001

08003f18 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003f32:	f002 fcc9 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 8003f36:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	; (8003fb4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d908      	bls.n	8003f52 <HAL_ETH_SetMDIOClockRange+0x3a>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d804      	bhi.n	8003f52 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	e027      	b.n	8003fa2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d908      	bls.n	8003f6c <HAL_ETH_SetMDIOClockRange+0x54>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4a17      	ldr	r2, [pc, #92]	; (8003fbc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d204      	bcs.n	8003f6c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	e01a      	b.n	8003fa2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4a13      	ldr	r2, [pc, #76]	; (8003fbc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d303      	bcc.n	8003f7c <HAL_ETH_SetMDIOClockRange+0x64>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d911      	bls.n	8003fa0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4a10      	ldr	r2, [pc, #64]	; (8003fc0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d908      	bls.n	8003f96 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4a0f      	ldr	r2, [pc, #60]	; (8003fc4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d804      	bhi.n	8003f96 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	e005      	b.n	8003fa2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	e000      	b.n	8003fa2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003fa0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	01312cff 	.word	0x01312cff
 8003fb8:	02160ebf 	.word	0x02160ebf
 8003fbc:	03938700 	.word	0x03938700
 8003fc0:	05f5e0ff 	.word	0x05f5e0ff
 8003fc4:	08f0d17f 	.word	0x08f0d17f

08003fc8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003fda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	791b      	ldrb	r3, [r3, #4]
 8003fe0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003fe2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	7b1b      	ldrb	r3, [r3, #12]
 8003fe8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003fea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	7b5b      	ldrb	r3, [r3, #13]
 8003ff0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003ff2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	7b9b      	ldrb	r3, [r3, #14]
 8003ff8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003ffa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	7bdb      	ldrb	r3, [r3, #15]
 8004000:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004002:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	7c12      	ldrb	r2, [r2, #16]
 8004008:	2a00      	cmp	r2, #0
 800400a:	d102      	bne.n	8004012 <ETH_SetMACConfig+0x4a>
 800400c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004010:	e000      	b.n	8004014 <ETH_SetMACConfig+0x4c>
 8004012:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004014:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	7c52      	ldrb	r2, [r2, #17]
 800401a:	2a00      	cmp	r2, #0
 800401c:	d102      	bne.n	8004024 <ETH_SetMACConfig+0x5c>
 800401e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004022:	e000      	b.n	8004026 <ETH_SetMACConfig+0x5e>
 8004024:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004026:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	7c9b      	ldrb	r3, [r3, #18]
 800402c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800402e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004034:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800403a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	7f1b      	ldrb	r3, [r3, #28]
 8004040:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004042:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	7f5b      	ldrb	r3, [r3, #29]
 8004048:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800404a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	7f92      	ldrb	r2, [r2, #30]
 8004050:	2a00      	cmp	r2, #0
 8004052:	d102      	bne.n	800405a <ETH_SetMACConfig+0x92>
 8004054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004058:	e000      	b.n	800405c <ETH_SetMACConfig+0x94>
 800405a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800405c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	7fdb      	ldrb	r3, [r3, #31]
 8004062:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004064:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	f892 2020 	ldrb.w	r2, [r2, #32]
 800406c:	2a00      	cmp	r2, #0
 800406e:	d102      	bne.n	8004076 <ETH_SetMACConfig+0xae>
 8004070:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004074:	e000      	b.n	8004078 <ETH_SetMACConfig+0xb0>
 8004076:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004078:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800407e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004086:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004088:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b56      	ldr	r3, [pc, #344]	; (80041f4 <ETH_SetMACConfig+0x22c>)
 800409a:	4013      	ands	r3, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	68f9      	ldr	r1, [r7, #12]
 80040a2:	430b      	orrs	r3, r1
 80040a4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040b2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80040b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040bc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80040be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040c6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80040c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	d102      	bne.n	80040da <ETH_SetMACConfig+0x112>
 80040d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040d8:	e000      	b.n	80040dc <ETH_SetMACConfig+0x114>
 80040da:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80040dc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	4b42      	ldr	r3, [pc, #264]	; (80041f8 <ETH_SetMACConfig+0x230>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	68f9      	ldr	r1, [r7, #12]
 80040f6:	430b      	orrs	r3, r1
 80040f8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004100:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	4b3a      	ldr	r3, [pc, #232]	; (80041fc <ETH_SetMACConfig+0x234>)
 8004112:	4013      	ands	r3, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	68f9      	ldr	r1, [r7, #12]
 800411a:	430b      	orrs	r3, r1
 800411c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004124:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800412a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004132:	2a00      	cmp	r2, #0
 8004134:	d101      	bne.n	800413a <ETH_SetMACConfig+0x172>
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	e000      	b.n	800413c <ETH_SetMACConfig+0x174>
 800413a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800413c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004142:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800414e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004152:	4013      	ands	r3, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	430b      	orrs	r3, r1
 800415c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004164:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800416c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	f023 0103 	bic.w	r1, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	430a      	orrs	r2, r1
 8004186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004192:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80041ae:	2a00      	cmp	r2, #0
 80041b0:	d101      	bne.n	80041b6 <ETH_SetMACConfig+0x1ee>
 80041b2:	2240      	movs	r2, #64	; 0x40
 80041b4:	e000      	b.n	80041b8 <ETH_SetMACConfig+0x1f0>
 80041b6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80041b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80041c0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80041c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80041ca:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80041d8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	00048083 	.word	0x00048083
 80041f8:	c0f88000 	.word	0xc0f88000
 80041fc:	fffffef0 	.word	0xfffffef0

08004200 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b38      	ldr	r3, [pc, #224]	; (80042f8 <ETH_SetDMAConfig+0xf8>)
 8004216:	4013      	ands	r3, r2
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	6811      	ldr	r1, [r2, #0]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	430b      	orrs	r3, r1
 8004222:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004226:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	791b      	ldrb	r3, [r3, #4]
 800422c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004232:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	7b1b      	ldrb	r3, [r3, #12]
 8004238:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	4b2c      	ldr	r3, [pc, #176]	; (80042fc <ETH_SetDMAConfig+0xfc>)
 800424a:	4013      	ands	r3, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	68f9      	ldr	r1, [r7, #12]
 8004252:	430b      	orrs	r3, r1
 8004254:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004258:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	7b5b      	ldrb	r3, [r3, #13]
 800425e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004270:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004274:	4b22      	ldr	r3, [pc, #136]	; (8004300 <ETH_SetDMAConfig+0x100>)
 8004276:	4013      	ands	r3, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	68f9      	ldr	r1, [r7, #12]
 800427e:	430b      	orrs	r3, r1
 8004280:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004284:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	7d1b      	ldrb	r3, [r3, #20]
 8004290:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004292:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	7f5b      	ldrb	r3, [r3, #29]
 8004298:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80042aa:	4b16      	ldr	r3, [pc, #88]	; (8004304 <ETH_SetDMAConfig+0x104>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	68f9      	ldr	r1, [r7, #12]
 80042b4:	430b      	orrs	r3, r1
 80042b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042ba:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	7f1b      	ldrb	r3, [r3, #28]
 80042c2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <ETH_SetDMAConfig+0x108>)
 80042da:	4013      	ands	r3, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	68f9      	ldr	r1, [r7, #12]
 80042e2:	430b      	orrs	r3, r1
 80042e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042e8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	ffff87fd 	.word	0xffff87fd
 80042fc:	ffff2ffe 	.word	0xffff2ffe
 8004300:	fffec000 	.word	0xfffec000
 8004304:	ffc0efef 	.word	0xffc0efef
 8004308:	7fc0ffff 	.word	0x7fc0ffff

0800430c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b0a4      	sub	sp, #144	; 0x90
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800431a:	2300      	movs	r3, #0
 800431c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800431e:	2300      	movs	r3, #0
 8004320:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004324:	2300      	movs	r3, #0
 8004326:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800432a:	2301      	movs	r3, #1
 800432c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004330:	2301      	movs	r3, #1
 8004332:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004336:	2301      	movs	r3, #1
 8004338:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800433c:	2300      	movs	r3, #0
 800433e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800434c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800434e:	2300      	movs	r3, #0
 8004350:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004354:	2300      	movs	r3, #0
 8004356:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004358:	2300      	movs	r3, #0
 800435a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800435e:	2300      	movs	r3, #0
 8004360:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004364:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004368:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800436a:	2300      	movs	r3, #0
 800436c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004370:	2300      	movs	r3, #0
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800437a:	2300      	movs	r3, #0
 800437c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004380:	2300      	movs	r3, #0
 8004382:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004386:	2300      	movs	r3, #0
 8004388:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800438a:	2300      	movs	r3, #0
 800438c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800438e:	2300      	movs	r3, #0
 8004390:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004392:	2300      	movs	r3, #0
 8004394:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004398:	2300      	movs	r3, #0
 800439a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80043a4:	2320      	movs	r3, #32
 80043a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80043b6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80043bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043c0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80043c8:	2302      	movs	r3, #2
 80043ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80043da:	2300      	movs	r3, #0
 80043dc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80043e6:	2300      	movs	r3, #0
 80043e8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80043ea:	2301      	movs	r3, #1
 80043ec:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80043f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fde6 	bl	8003fc8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80043fc:	2301      	movs	r3, #1
 80043fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004400:	2301      	movs	r3, #1
 8004402:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004404:	2300      	movs	r3, #0
 8004406:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004408:	2300      	movs	r3, #0
 800440a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800440e:	2300      	movs	r3, #0
 8004410:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004412:	2300      	movs	r3, #0
 8004414:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004416:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800441a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800441c:	2300      	movs	r3, #0
 800441e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004420:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004424:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004426:	2300      	movs	r3, #0
 8004428:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800442c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004430:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004432:	f107 0308 	add.w	r3, r7, #8
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff fee1 	bl	8004200 <ETH_SetDMAConfig>
}
 800443e:	bf00      	nop
 8004440:	3790      	adds	r7, #144	; 0x90
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	e01d      	b.n	8004490 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68d9      	ldr	r1, [r3, #12]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4413      	add	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	440b      	add	r3, r1
 8004464:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2200      	movs	r2, #0
 8004470:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2200      	movs	r2, #0
 8004476:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2200      	movs	r2, #0
 800447c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	3206      	adds	r2, #6
 8004486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3301      	adds	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b03      	cmp	r3, #3
 8004494:	d9de      	bls.n	8004454 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a4:	461a      	mov	r2, r3
 80044a6:	2303      	movs	r3, #3
 80044a8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	e023      	b.n	800452e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6919      	ldr	r1, [r3, #16]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4613      	mov	r3, r2
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	4413      	add	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	440b      	add	r3, r1
 80044f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2200      	movs	r2, #0
 8004502:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2200      	movs	r2, #0
 8004508:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2200      	movs	r2, #0
 800450e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2200      	movs	r2, #0
 8004514:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2200      	movs	r2, #0
 800451a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	3212      	adds	r2, #18
 8004524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3301      	adds	r3, #1
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b03      	cmp	r3, #3
 8004532:	d9d8      	bls.n	80044e6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455a:	461a      	mov	r2, r3
 800455c:	2303      	movs	r3, #3
 800455e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004582:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b098      	sub	sp, #96	; 0x60
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800459c:	4a84      	ldr	r2, [pc, #528]	; (80047b0 <HAL_FDCAN_Init+0x21c>)
 800459e:	f107 030c 	add.w	r3, r7, #12
 80045a2:	4611      	mov	r1, r2
 80045a4:	224c      	movs	r2, #76	; 0x4c
 80045a6:	4618      	mov	r0, r3
 80045a8:	f006 fdbe 	bl	800b128 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e1c6      	b.n	8004944 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a7e      	ldr	r2, [pc, #504]	; (80047b4 <HAL_FDCAN_Init+0x220>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d106      	bne.n	80045ce <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80045c8:	461a      	mov	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fc fcda 	bl	8000f9c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0210 	bic.w	r2, r2, #16
 80045f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045f8:	f7fe f9d2 	bl	80029a0 <HAL_GetTick>
 80045fc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80045fe:	e014      	b.n	800462a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004600:	f7fe f9ce 	bl	80029a0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b0a      	cmp	r3, #10
 800460c:	d90d      	bls.n	800462a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004614:	f043 0201 	orr.w	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2203      	movs	r2, #3
 8004622:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e18c      	b.n	8004944 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b08      	cmp	r3, #8
 8004636:	d0e3      	beq.n	8004600 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004648:	f7fe f9aa 	bl	80029a0 <HAL_GetTick>
 800464c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800464e:	e014      	b.n	800467a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004650:	f7fe f9a6 	bl	80029a0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b0a      	cmp	r3, #10
 800465c:	d90d      	bls.n	800467a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004664:	f043 0201 	orr.w	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2203      	movs	r2, #3
 8004672:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e164      	b.n	8004944 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0e3      	beq.n	8004650 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0202 	orr.w	r2, r2, #2
 8004696:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	7c1b      	ldrb	r3, [r3, #16]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d108      	bne.n	80046b2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ae:	619a      	str	r2, [r3, #24]
 80046b0:	e007      	b.n	80046c2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	7c5b      	ldrb	r3, [r3, #17]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d108      	bne.n	80046dc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046d8:	619a      	str	r2, [r3, #24]
 80046da:	e007      	b.n	80046ec <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	7c9b      	ldrb	r3, [r3, #18]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d108      	bne.n	8004706 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004702:	619a      	str	r2, [r3, #24]
 8004704:	e007      	b.n	8004716 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699a      	ldr	r2, [r3, #24]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004714:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800473a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0210 	bic.w	r2, r2, #16
 800474a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d108      	bne.n	8004766 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0204 	orr.w	r2, r2, #4
 8004762:	619a      	str	r2, [r3, #24]
 8004764:	e030      	b.n	80047c8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d02c      	beq.n	80047c8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d020      	beq.n	80047b8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699a      	ldr	r2, [r3, #24]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004784:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0210 	orr.w	r2, r2, #16
 8004794:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d114      	bne.n	80047c8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0220 	orr.w	r2, r2, #32
 80047ac:	619a      	str	r2, [r3, #24]
 80047ae:	e00b      	b.n	80047c8 <HAL_FDCAN_Init+0x234>
 80047b0:	0800ba68 	.word	0x0800ba68
 80047b4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0220 	orr.w	r2, r2, #32
 80047c6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047d8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047e0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047f0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047f2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047fc:	d115      	bne.n	800482a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	3b01      	subs	r3, #1
 800480a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800480c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	3b01      	subs	r3, #1
 8004814:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004816:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	3b01      	subs	r3, #1
 8004820:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004826:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004828:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004850:	4413      	add	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d011      	beq.n	800487a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800485e:	f023 0107 	bic.w	r1, r3, #7
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	3360      	adds	r3, #96	; 0x60
 800486a:	443b      	add	r3, r7
 800486c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	2b00      	cmp	r3, #0
 8004880:	d011      	beq.n	80048a6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800488a:	f023 0107 	bic.w	r1, r3, #7
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	3360      	adds	r3, #96	; 0x60
 8004896:	443b      	add	r3, r7
 8004898:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d012      	beq.n	80048d4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048b6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	3360      	adds	r3, #96	; 0x60
 80048c2:	443b      	add	r3, r7
 80048c4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80048c8:	011a      	lsls	r2, r3, #4
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d012      	beq.n	8004902 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048e4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	3360      	adds	r3, #96	; 0x60
 80048f0:	443b      	add	r3, r7
 80048f2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80048f6:	021a      	lsls	r2, r3, #8
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a11      	ldr	r2, [pc, #68]	; (800494c <HAL_FDCAN_Init+0x3b8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d107      	bne.n	800491c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f022 0203 	bic.w	r2, r2, #3
 800491a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f80b 	bl	8004950 <FDCAN_CalcultateRamBlockAddresses>
 800493a:	4603      	mov	r3, r0
 800493c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004940:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004944:	4618      	mov	r0, r3
 8004946:	3760      	adds	r7, #96	; 0x60
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	4000a000 	.word	0x4000a000

08004950 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004966:	4ba7      	ldr	r3, [pc, #668]	; (8004c04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004968:	4013      	ands	r3, r2
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	0091      	lsls	r1, r2, #2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	430b      	orrs	r3, r1
 8004974:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004980:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	041a      	lsls	r2, r3, #16
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	4413      	add	r3, r2
 800499c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049a6:	4b97      	ldr	r3, [pc, #604]	; (8004c04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	0091      	lsls	r1, r2, #2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	430b      	orrs	r3, r1
 80049b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c8:	041a      	lsls	r2, r3, #16
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	4413      	add	r3, r2
 80049de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80049e8:	4b86      	ldr	r3, [pc, #536]	; (8004c04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	0091      	lsls	r1, r2, #2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	430b      	orrs	r3, r1
 80049f6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a02:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	041a      	lsls	r2, r3, #16
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a1e:	fb02 f303 	mul.w	r3, r2, r3
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	4413      	add	r3, r2
 8004a26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a30:	4b74      	ldr	r3, [pc, #464]	; (8004c04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	0091      	lsls	r1, r2, #2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a4a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a52:	041a      	lsls	r2, r3, #16
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004a78:	4b62      	ldr	r3, [pc, #392]	; (8004c04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	0091      	lsls	r1, r2, #2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	430b      	orrs	r3, r1
 8004a86:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4413      	add	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004aa4:	4b57      	ldr	r3, [pc, #348]	; (8004c04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	0091      	lsls	r1, r2, #2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004abe:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	041a      	lsls	r2, r3, #16
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	4413      	add	r3, r2
 8004adc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004ae6:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	0091      	lsls	r1, r2, #2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6812      	ldr	r2, [r2, #0]
 8004af2:	430b      	orrs	r3, r1
 8004af4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b00:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	041a      	lsls	r2, r3, #16
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b1c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b24:	061a      	lsls	r2, r3, #24
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b34:	4b34      	ldr	r3, [pc, #208]	; (8004c08 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004b36:	4413      	add	r3, r2
 8004b38:	009a      	lsls	r2, r3, #2
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	441a      	add	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	441a      	add	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004b6a:	fb01 f303 	mul.w	r3, r1, r3
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	441a      	add	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	441a      	add	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	441a      	add	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	441a      	add	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004bca:	fb01 f303 	mul.w	r3, r1, r3
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004be6:	fb01 f303 	mul.w	r3, r1, r3
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	4a04      	ldr	r2, [pc, #16]	; (8004c0c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d915      	bls.n	8004c2c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004c00:	e006      	b.n	8004c10 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004c02:	bf00      	nop
 8004c04:	ffff0003 	.word	0xffff0003
 8004c08:	10002b00 	.word	0x10002b00
 8004c0c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c16:	f043 0220 	orr.w	r2, r3, #32
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2203      	movs	r2, #3
 8004c24:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e010      	b.n	8004c4e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	e005      	b.n	8004c40 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d3f3      	bcc.n	8004c34 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop

08004c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b089      	sub	sp, #36	; 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c6a:	4b89      	ldr	r3, [pc, #548]	; (8004e90 <HAL_GPIO_Init+0x234>)
 8004c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c6e:	e194      	b.n	8004f9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	2101      	movs	r1, #1
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8186 	beq.w	8004f94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d005      	beq.n	8004ca0 <HAL_GPIO_Init+0x44>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d130      	bne.n	8004d02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	2203      	movs	r2, #3
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	f003 0201 	and.w	r2, r3, #1
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d017      	beq.n	8004d3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	2203      	movs	r2, #3
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4013      	ands	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d123      	bne.n	8004d92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	08da      	lsrs	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3208      	adds	r2, #8
 8004d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	220f      	movs	r2, #15
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43db      	mvns	r3, r3
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	08da      	lsrs	r2, r3, #3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3208      	adds	r2, #8
 8004d8c:	69b9      	ldr	r1, [r7, #24]
 8004d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43db      	mvns	r3, r3
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	4013      	ands	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0203 	and.w	r2, r3, #3
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80e0 	beq.w	8004f94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dd4:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <HAL_GPIO_Init+0x238>)
 8004dd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dda:	4a2e      	ldr	r2, [pc, #184]	; (8004e94 <HAL_GPIO_Init+0x238>)
 8004ddc:	f043 0302 	orr.w	r3, r3, #2
 8004de0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004de4:	4b2b      	ldr	r3, [pc, #172]	; (8004e94 <HAL_GPIO_Init+0x238>)
 8004de6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004df2:	4a29      	ldr	r2, [pc, #164]	; (8004e98 <HAL_GPIO_Init+0x23c>)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	089b      	lsrs	r3, r3, #2
 8004df8:	3302      	adds	r3, #2
 8004dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	220f      	movs	r2, #15
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4013      	ands	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a20      	ldr	r2, [pc, #128]	; (8004e9c <HAL_GPIO_Init+0x240>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d052      	beq.n	8004ec4 <HAL_GPIO_Init+0x268>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a1f      	ldr	r2, [pc, #124]	; (8004ea0 <HAL_GPIO_Init+0x244>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d031      	beq.n	8004e8a <HAL_GPIO_Init+0x22e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1e      	ldr	r2, [pc, #120]	; (8004ea4 <HAL_GPIO_Init+0x248>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d02b      	beq.n	8004e86 <HAL_GPIO_Init+0x22a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1d      	ldr	r2, [pc, #116]	; (8004ea8 <HAL_GPIO_Init+0x24c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d025      	beq.n	8004e82 <HAL_GPIO_Init+0x226>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a1c      	ldr	r2, [pc, #112]	; (8004eac <HAL_GPIO_Init+0x250>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d01f      	beq.n	8004e7e <HAL_GPIO_Init+0x222>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1b      	ldr	r2, [pc, #108]	; (8004eb0 <HAL_GPIO_Init+0x254>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d019      	beq.n	8004e7a <HAL_GPIO_Init+0x21e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1a      	ldr	r2, [pc, #104]	; (8004eb4 <HAL_GPIO_Init+0x258>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d013      	beq.n	8004e76 <HAL_GPIO_Init+0x21a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a19      	ldr	r2, [pc, #100]	; (8004eb8 <HAL_GPIO_Init+0x25c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00d      	beq.n	8004e72 <HAL_GPIO_Init+0x216>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <HAL_GPIO_Init+0x260>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <HAL_GPIO_Init+0x212>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <HAL_GPIO_Init+0x264>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d101      	bne.n	8004e6a <HAL_GPIO_Init+0x20e>
 8004e66:	2309      	movs	r3, #9
 8004e68:	e02d      	b.n	8004ec6 <HAL_GPIO_Init+0x26a>
 8004e6a:	230a      	movs	r3, #10
 8004e6c:	e02b      	b.n	8004ec6 <HAL_GPIO_Init+0x26a>
 8004e6e:	2308      	movs	r3, #8
 8004e70:	e029      	b.n	8004ec6 <HAL_GPIO_Init+0x26a>
 8004e72:	2307      	movs	r3, #7
 8004e74:	e027      	b.n	8004ec6 <HAL_GPIO_Init+0x26a>
 8004e76:	2306      	movs	r3, #6
 8004e78:	e025      	b.n	8004ec6 <HAL_GPIO_Init+0x26a>
 8004e7a:	2305      	movs	r3, #5
 8004e7c:	e023      	b.n	8004ec6 <HAL_GPIO_Init+0x26a>
 8004e7e:	2304      	movs	r3, #4
 8004e80:	e021      	b.n	8004ec6 <HAL_GPIO_Init+0x26a>
 8004e82:	2303      	movs	r3, #3
 8004e84:	e01f      	b.n	8004ec6 <HAL_GPIO_Init+0x26a>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e01d      	b.n	8004ec6 <HAL_GPIO_Init+0x26a>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e01b      	b.n	8004ec6 <HAL_GPIO_Init+0x26a>
 8004e8e:	bf00      	nop
 8004e90:	58000080 	.word	0x58000080
 8004e94:	58024400 	.word	0x58024400
 8004e98:	58000400 	.word	0x58000400
 8004e9c:	58020000 	.word	0x58020000
 8004ea0:	58020400 	.word	0x58020400
 8004ea4:	58020800 	.word	0x58020800
 8004ea8:	58020c00 	.word	0x58020c00
 8004eac:	58021000 	.word	0x58021000
 8004eb0:	58021400 	.word	0x58021400
 8004eb4:	58021800 	.word	0x58021800
 8004eb8:	58021c00 	.word	0x58021c00
 8004ebc:	58022000 	.word	0x58022000
 8004ec0:	58022400 	.word	0x58022400
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	f002 0203 	and.w	r2, r2, #3
 8004ecc:	0092      	lsls	r2, r2, #2
 8004ece:	4093      	lsls	r3, r2
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ed6:	4938      	ldr	r1, [pc, #224]	; (8004fb8 <HAL_GPIO_Init+0x35c>)
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	089b      	lsrs	r3, r3, #2
 8004edc:	3302      	adds	r3, #2
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4013      	ands	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	43db      	mvns	r3, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4013      	ands	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	3301      	adds	r3, #1
 8004f98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f47f ae63 	bne.w	8004c70 <HAL_GPIO_Init+0x14>
  }
}
 8004faa:	bf00      	nop
 8004fac:	bf00      	nop
 8004fae:	3724      	adds	r7, #36	; 0x24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	58000400 	.word	0x58000400

08004fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	807b      	strh	r3, [r7, #2]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fcc:	787b      	ldrb	r3, [r7, #1]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004fd8:	e003      	b.n	8004fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004fda:	887b      	ldrh	r3, [r7, #2]
 8004fdc:	041a      	lsls	r2, r3, #16
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	619a      	str	r2, [r3, #24]
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005000:	887a      	ldrh	r2, [r7, #2]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4013      	ands	r3, r2
 8005006:	041a      	lsls	r2, r3, #16
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	43d9      	mvns	r1, r3
 800500c:	887b      	ldrh	r3, [r7, #2]
 800500e:	400b      	ands	r3, r1
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	619a      	str	r2, [r3, #24]
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0bf      	b.n	80051b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fc fbc8 	bl	80017e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005066:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6999      	ldr	r1, [r3, #24]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800507c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6899      	ldr	r1, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b4a      	ldr	r3, [pc, #296]	; (80051c0 <HAL_LTDC_Init+0x19c>)
 8005098:	400b      	ands	r3, r1
 800509a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	041b      	lsls	r3, r3, #16
 80050a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6899      	ldr	r1, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68d9      	ldr	r1, [r3, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	4b3e      	ldr	r3, [pc, #248]	; (80051c0 <HAL_LTDC_Init+0x19c>)
 80050c6:	400b      	ands	r3, r1
 80050c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	041b      	lsls	r3, r3, #16
 80050d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68d9      	ldr	r1, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1a      	ldr	r2, [r3, #32]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6919      	ldr	r1, [r3, #16]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b33      	ldr	r3, [pc, #204]	; (80051c0 <HAL_LTDC_Init+0x19c>)
 80050f4:	400b      	ands	r3, r1
 80050f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	041b      	lsls	r3, r3, #16
 80050fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6919      	ldr	r1, [r3, #16]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6959      	ldr	r1, [r3, #20]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4b27      	ldr	r3, [pc, #156]	; (80051c0 <HAL_LTDC_Init+0x19c>)
 8005122:	400b      	ands	r3, r1
 8005124:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	041b      	lsls	r3, r3, #16
 800512c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6959      	ldr	r1, [r3, #20]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0206 	orr.w	r2, r2, #6
 8005192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	f000f800 	.word	0xf000f800

080051c4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80051c4:	b5b0      	push	{r4, r5, r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d101      	bne.n	80051de <HAL_LTDC_ConfigLayer+0x1a>
 80051da:	2302      	movs	r3, #2
 80051dc:	e02c      	b.n	8005238 <HAL_LTDC_ConfigLayer+0x74>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2134      	movs	r1, #52	; 0x34
 80051f4:	fb01 f303 	mul.w	r3, r1, r3
 80051f8:	4413      	add	r3, r2
 80051fa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4614      	mov	r4, r2
 8005202:	461d      	mov	r5, r3
 8005204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800520a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800520c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800520e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005210:	682b      	ldr	r3, [r5, #0]
 8005212:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f811 	bl	8005240 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2201      	movs	r2, #1
 8005224:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bdb0      	pop	{r4, r5, r7, pc}

08005240 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005240:	b480      	push	{r7}
 8005242:	b089      	sub	sp, #36	; 0x24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	0c1b      	lsrs	r3, r3, #16
 8005258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800525c:	4413      	add	r3, r2
 800525e:	041b      	lsls	r3, r3, #16
 8005260:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	01db      	lsls	r3, r3, #7
 800526c:	4413      	add	r3, r2
 800526e:	3384      	adds	r3, #132	; 0x84
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	6812      	ldr	r2, [r2, #0]
 8005276:	4611      	mov	r1, r2
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	01d2      	lsls	r2, r2, #7
 800527c:	440a      	add	r2, r1
 800527e:	3284      	adds	r2, #132	; 0x84
 8005280:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005284:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	0c1b      	lsrs	r3, r3, #16
 8005292:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005296:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005298:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4619      	mov	r1, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	01db      	lsls	r3, r3, #7
 80052a4:	440b      	add	r3, r1
 80052a6:	3384      	adds	r3, #132	; 0x84
 80052a8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80052ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052be:	4413      	add	r3, r2
 80052c0:	041b      	lsls	r3, r3, #16
 80052c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	461a      	mov	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	01db      	lsls	r3, r3, #7
 80052ce:	4413      	add	r3, r2
 80052d0:	3384      	adds	r3, #132	; 0x84
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	4611      	mov	r1, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	01d2      	lsls	r2, r2, #7
 80052de:	440a      	add	r2, r1
 80052e0:	3284      	adds	r2, #132	; 0x84
 80052e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80052e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052f6:	4413      	add	r3, r2
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4619      	mov	r1, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	01db      	lsls	r3, r3, #7
 8005304:	440b      	add	r3, r1
 8005306:	3384      	adds	r3, #132	; 0x84
 8005308:	4619      	mov	r1, r3
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4313      	orrs	r3, r2
 800530e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	01db      	lsls	r3, r3, #7
 800531a:	4413      	add	r3, r2
 800531c:	3384      	adds	r3, #132	; 0x84
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	4611      	mov	r1, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	01d2      	lsls	r2, r2, #7
 800532a:	440a      	add	r2, r1
 800532c:	3284      	adds	r2, #132	; 0x84
 800532e:	f023 0307 	bic.w	r3, r3, #7
 8005332:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	01db      	lsls	r3, r3, #7
 800533e:	4413      	add	r3, r2
 8005340:	3384      	adds	r3, #132	; 0x84
 8005342:	461a      	mov	r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800535a:	041b      	lsls	r3, r3, #16
 800535c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	061b      	lsls	r3, r3, #24
 8005364:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	01db      	lsls	r3, r3, #7
 8005370:	4413      	add	r3, r2
 8005372:	3384      	adds	r3, #132	; 0x84
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	01db      	lsls	r3, r3, #7
 8005380:	4413      	add	r3, r2
 8005382:	3384      	adds	r3, #132	; 0x84
 8005384:	461a      	mov	r2, r3
 8005386:	2300      	movs	r3, #0
 8005388:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005390:	461a      	mov	r2, r3
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	431a      	orrs	r2, r3
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	431a      	orrs	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4619      	mov	r1, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	01db      	lsls	r3, r3, #7
 80053a4:	440b      	add	r3, r1
 80053a6:	3384      	adds	r3, #132	; 0x84
 80053a8:	4619      	mov	r1, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	01db      	lsls	r3, r3, #7
 80053ba:	4413      	add	r3, r2
 80053bc:	3384      	adds	r3, #132	; 0x84
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	6812      	ldr	r2, [r2, #0]
 80053c4:	4611      	mov	r1, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	01d2      	lsls	r2, r2, #7
 80053ca:	440a      	add	r2, r1
 80053cc:	3284      	adds	r2, #132	; 0x84
 80053ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	01db      	lsls	r3, r3, #7
 80053de:	4413      	add	r3, r2
 80053e0:	3384      	adds	r3, #132	; 0x84
 80053e2:	461a      	mov	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	01db      	lsls	r3, r3, #7
 80053f4:	4413      	add	r3, r2
 80053f6:	3384      	adds	r3, #132	; 0x84
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4619      	mov	r1, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	01db      	lsls	r3, r3, #7
 8005404:	440b      	add	r3, r1
 8005406:	3384      	adds	r3, #132	; 0x84
 8005408:	4619      	mov	r1, r3
 800540a:	4b58      	ldr	r3, [pc, #352]	; (800556c <LTDC_SetConfig+0x32c>)
 800540c:	4013      	ands	r3, r2
 800540e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	68f9      	ldr	r1, [r7, #12]
 800541a:	6809      	ldr	r1, [r1, #0]
 800541c:	4608      	mov	r0, r1
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	01c9      	lsls	r1, r1, #7
 8005422:	4401      	add	r1, r0
 8005424:	3184      	adds	r1, #132	; 0x84
 8005426:	4313      	orrs	r3, r2
 8005428:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	01db      	lsls	r3, r3, #7
 8005434:	4413      	add	r3, r2
 8005436:	3384      	adds	r3, #132	; 0x84
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	01db      	lsls	r3, r3, #7
 8005444:	4413      	add	r3, r2
 8005446:	3384      	adds	r3, #132	; 0x84
 8005448:	461a      	mov	r2, r3
 800544a:	2300      	movs	r3, #0
 800544c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	01db      	lsls	r3, r3, #7
 8005458:	4413      	add	r3, r2
 800545a:	3384      	adds	r3, #132	; 0x84
 800545c:	461a      	mov	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d102      	bne.n	8005472 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800546c:	2304      	movs	r3, #4
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	e01b      	b.n	80054aa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d102      	bne.n	8005480 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800547a:	2303      	movs	r3, #3
 800547c:	61fb      	str	r3, [r7, #28]
 800547e:	e014      	b.n	80054aa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b04      	cmp	r3, #4
 8005486:	d00b      	beq.n	80054a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800548c:	2b02      	cmp	r3, #2
 800548e:	d007      	beq.n	80054a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005494:	2b03      	cmp	r3, #3
 8005496:	d003      	beq.n	80054a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800549c:	2b07      	cmp	r3, #7
 800549e:	d102      	bne.n	80054a6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80054a0:	2302      	movs	r3, #2
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	e001      	b.n	80054aa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80054a6:	2301      	movs	r3, #1
 80054a8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	01db      	lsls	r3, r3, #7
 80054b4:	4413      	add	r3, r2
 80054b6:	3384      	adds	r3, #132	; 0x84
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	4611      	mov	r1, r2
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	01d2      	lsls	r2, r2, #7
 80054c4:	440a      	add	r2, r1
 80054c6:	3284      	adds	r2, #132	; 0x84
 80054c8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80054cc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	fb02 f303 	mul.w	r3, r2, r3
 80054d8:	041a      	lsls	r2, r3, #16
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6859      	ldr	r1, [r3, #4]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	1acb      	subs	r3, r1, r3
 80054e4:	69f9      	ldr	r1, [r7, #28]
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	3307      	adds	r3, #7
 80054ec:	68f9      	ldr	r1, [r7, #12]
 80054ee:	6809      	ldr	r1, [r1, #0]
 80054f0:	4608      	mov	r0, r1
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	01c9      	lsls	r1, r1, #7
 80054f6:	4401      	add	r1, r0
 80054f8:	3184      	adds	r1, #132	; 0x84
 80054fa:	4313      	orrs	r3, r2
 80054fc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	01db      	lsls	r3, r3, #7
 8005508:	4413      	add	r3, r2
 800550a:	3384      	adds	r3, #132	; 0x84
 800550c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4619      	mov	r1, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	01db      	lsls	r3, r3, #7
 8005518:	440b      	add	r3, r1
 800551a:	3384      	adds	r3, #132	; 0x84
 800551c:	4619      	mov	r1, r3
 800551e:	4b14      	ldr	r3, [pc, #80]	; (8005570 <LTDC_SetConfig+0x330>)
 8005520:	4013      	ands	r3, r2
 8005522:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	01db      	lsls	r3, r3, #7
 800552e:	4413      	add	r3, r2
 8005530:	3384      	adds	r3, #132	; 0x84
 8005532:	461a      	mov	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	01db      	lsls	r3, r3, #7
 8005544:	4413      	add	r3, r2
 8005546:	3384      	adds	r3, #132	; 0x84
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	6812      	ldr	r2, [r2, #0]
 800554e:	4611      	mov	r1, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	01d2      	lsls	r2, r2, #7
 8005554:	440a      	add	r2, r1
 8005556:	3284      	adds	r2, #132	; 0x84
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6013      	str	r3, [r2, #0]
}
 800555e:	bf00      	nop
 8005560:	3724      	adds	r7, #36	; 0x24
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	fffff8f8 	.word	0xfffff8f8
 8005570:	fffff800 	.word	0xfffff800

08005574 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005576:	b08f      	sub	sp, #60	; 0x3c
 8005578:	af0a      	add	r7, sp, #40	; 0x28
 800557a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e116      	b.n	80057b4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fd f8d3 	bl	800274c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2203      	movs	r2, #3
 80055aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d102      	bne.n	80055c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f005 fae9 	bl	800ab9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	603b      	str	r3, [r7, #0]
 80055d0:	687e      	ldr	r6, [r7, #4]
 80055d2:	466d      	mov	r5, sp
 80055d4:	f106 0410 	add.w	r4, r6, #16
 80055d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80055e8:	1d33      	adds	r3, r6, #4
 80055ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055ec:	6838      	ldr	r0, [r7, #0]
 80055ee:	f005 fa67 	bl	800aac0 <USB_CoreInit>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e0d7      	b.n	80057b4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2100      	movs	r1, #0
 800560a:	4618      	mov	r0, r3
 800560c:	f005 fad7 	bl	800abbe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]
 8005614:	e04a      	b.n	80056ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005616:	7bfa      	ldrb	r2, [r7, #15]
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	333d      	adds	r3, #61	; 0x3d
 8005626:	2201      	movs	r2, #1
 8005628:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800562a:	7bfa      	ldrb	r2, [r7, #15]
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	440b      	add	r3, r1
 8005638:	333c      	adds	r3, #60	; 0x3c
 800563a:	7bfa      	ldrb	r2, [r7, #15]
 800563c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800563e:	7bfa      	ldrb	r2, [r7, #15]
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	b298      	uxth	r0, r3
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	440b      	add	r3, r1
 8005650:	3344      	adds	r3, #68	; 0x44
 8005652:	4602      	mov	r2, r0
 8005654:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005656:	7bfa      	ldrb	r2, [r7, #15]
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	3340      	adds	r3, #64	; 0x40
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800566a:	7bfa      	ldrb	r2, [r7, #15]
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	3348      	adds	r3, #72	; 0x48
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800567e:	7bfa      	ldrb	r2, [r7, #15]
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	4613      	mov	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	440b      	add	r3, r1
 800568c:	334c      	adds	r3, #76	; 0x4c
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005692:	7bfa      	ldrb	r2, [r7, #15]
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	3354      	adds	r3, #84	; 0x54
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	3301      	adds	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
 80056ac:	7bfa      	ldrb	r2, [r7, #15]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d3af      	bcc.n	8005616 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
 80056ba:	e044      	b.n	8005746 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056bc:	7bfa      	ldrb	r2, [r7, #15]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80056ce:	2200      	movs	r2, #0
 80056d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056d2:	7bfa      	ldrb	r2, [r7, #15]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056e8:	7bfa      	ldrb	r2, [r7, #15]
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056fe:	7bfa      	ldrb	r2, [r7, #15]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005714:	7bfa      	ldrb	r2, [r7, #15]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800572a:	7bfa      	ldrb	r2, [r7, #15]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	3301      	adds	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
 8005746:	7bfa      	ldrb	r2, [r7, #15]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	429a      	cmp	r2, r3
 800574e:	d3b5      	bcc.n	80056bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	687e      	ldr	r6, [r7, #4]
 8005758:	466d      	mov	r5, sp
 800575a:	f106 0410 	add.w	r4, r6, #16
 800575e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005766:	e894 0003 	ldmia.w	r4, {r0, r1}
 800576a:	e885 0003 	stmia.w	r5, {r0, r1}
 800576e:	1d33      	adds	r3, r6, #4
 8005770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005772:	6838      	ldr	r0, [r7, #0]
 8005774:	f005 fa70 	bl	800ac58 <USB_DevInit>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2202      	movs	r2, #2
 8005782:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e014      	b.n	80057b4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d102      	bne.n	80057a8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f80a 	bl	80057bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f005 fc2e 	bl	800b00e <USB_DevDisconnect>

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <HAL_PCDEx_ActivateLPM+0x44>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	10000003 	.word	0x10000003

08005804 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800580c:	4b19      	ldr	r3, [pc, #100]	; (8005874 <HAL_PWREx_ConfigSupply+0x70>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b04      	cmp	r3, #4
 8005816:	d00a      	beq.n	800582e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005818:	4b16      	ldr	r3, [pc, #88]	; (8005874 <HAL_PWREx_ConfigSupply+0x70>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d001      	beq.n	800582a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e01f      	b.n	800586a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e01d      	b.n	800586a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800582e:	4b11      	ldr	r3, [pc, #68]	; (8005874 <HAL_PWREx_ConfigSupply+0x70>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f023 0207 	bic.w	r2, r3, #7
 8005836:	490f      	ldr	r1, [pc, #60]	; (8005874 <HAL_PWREx_ConfigSupply+0x70>)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4313      	orrs	r3, r2
 800583c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800583e:	f7fd f8af 	bl	80029a0 <HAL_GetTick>
 8005842:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005844:	e009      	b.n	800585a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005846:	f7fd f8ab 	bl	80029a0 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005854:	d901      	bls.n	800585a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e007      	b.n	800586a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <HAL_PWREx_ConfigSupply+0x70>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005866:	d1ee      	bne.n	8005846 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	58024800 	.word	0x58024800

08005878 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4a04      	ldr	r2, [pc, #16]	; (8005894 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005886:	60d3      	str	r3, [r2, #12]
}
 8005888:	bf00      	nop
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	58024800 	.word	0x58024800

08005898 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af02      	add	r7, sp, #8
 800589e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80058a0:	f7fd f87e 	bl	80029a0 <HAL_GetTick>
 80058a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e05f      	b.n	8005970 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d107      	bne.n	80058cc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fc f9c5 	bl	8001c4c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80058c2:	f241 3188 	movw	r1, #5000	; 0x1388
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f85a 	bl	8005980 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	3b01      	subs	r3, #1
 80058dc:	021a      	lsls	r2, r3, #8
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	2120      	movs	r1, #32
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f852 	bl	800599c <QSPI_WaitFlagStateUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80058fc:	7afb      	ldrb	r3, [r7, #11]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d135      	bne.n	800596e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	4b1b      	ldr	r3, [pc, #108]	; (8005978 <HAL_QSPI_Init+0xe0>)
 800590a:	4013      	ands	r3, r2
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6852      	ldr	r2, [r2, #4]
 8005910:	0611      	lsls	r1, r2, #24
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	68d2      	ldr	r2, [r2, #12]
 8005916:	4311      	orrs	r1, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	69d2      	ldr	r2, [r2, #28]
 800591c:	4311      	orrs	r1, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6a12      	ldr	r2, [r2, #32]
 8005922:	4311      	orrs	r1, r2
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	430b      	orrs	r3, r1
 800592a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	4b12      	ldr	r3, [pc, #72]	; (800597c <HAL_QSPI_Init+0xe4>)
 8005934:	4013      	ands	r3, r2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6912      	ldr	r2, [r2, #16]
 800593a:	0411      	lsls	r1, r2, #16
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6952      	ldr	r2, [r2, #20]
 8005940:	4311      	orrs	r1, r2
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6992      	ldr	r2, [r2, #24]
 8005946:	4311      	orrs	r1, r2
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6812      	ldr	r2, [r2, #0]
 800594c:	430b      	orrs	r3, r1
 800594e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800596e:	7afb      	ldrb	r3, [r7, #11]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	00ffff2f 	.word	0x00ffff2f
 800597c:	ffe0f8fe 	.word	0xffe0f8fe

08005980 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	4613      	mov	r3, r2
 80059aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80059ac:	e01a      	b.n	80059e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b4:	d016      	beq.n	80059e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b6:	f7fc fff3 	bl	80029a0 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10b      	bne.n	80059e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2204      	movs	r2, #4
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d8:	f043 0201 	orr.w	r2, r3, #1
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e00e      	b.n	8005a02 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4013      	ands	r3, r2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bf14      	ite	ne
 80059f2:	2301      	movne	r3, #1
 80059f4:	2300      	moveq	r3, #0
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d1d6      	bne.n	80059ae <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08c      	sub	sp, #48	; 0x30
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d102      	bne.n	8005a20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f000 bc1d 	b.w	800625a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8087 	beq.w	8005b3c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a2e:	4b99      	ldr	r3, [pc, #612]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a38:	4b96      	ldr	r3, [pc, #600]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d007      	beq.n	8005a54 <HAL_RCC_OscConfig+0x48>
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	2b18      	cmp	r3, #24
 8005a48:	d110      	bne.n	8005a6c <HAL_RCC_OscConfig+0x60>
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d10b      	bne.n	8005a6c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a54:	4b8f      	ldr	r3, [pc, #572]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d06c      	beq.n	8005b3a <HAL_RCC_OscConfig+0x12e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d168      	bne.n	8005b3a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e3f6      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a74:	d106      	bne.n	8005a84 <HAL_RCC_OscConfig+0x78>
 8005a76:	4b87      	ldr	r3, [pc, #540]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a86      	ldr	r2, [pc, #536]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	e02e      	b.n	8005ae2 <HAL_RCC_OscConfig+0xd6>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10c      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x9a>
 8005a8c:	4b81      	ldr	r3, [pc, #516]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a80      	ldr	r2, [pc, #512]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	4b7e      	ldr	r3, [pc, #504]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a7d      	ldr	r2, [pc, #500]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	e01d      	b.n	8005ae2 <HAL_RCC_OscConfig+0xd6>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aae:	d10c      	bne.n	8005aca <HAL_RCC_OscConfig+0xbe>
 8005ab0:	4b78      	ldr	r3, [pc, #480]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a77      	ldr	r2, [pc, #476]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005ab6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	4b75      	ldr	r3, [pc, #468]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a74      	ldr	r2, [pc, #464]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	e00b      	b.n	8005ae2 <HAL_RCC_OscConfig+0xd6>
 8005aca:	4b72      	ldr	r3, [pc, #456]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a71      	ldr	r2, [pc, #452]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	4b6f      	ldr	r3, [pc, #444]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a6e      	ldr	r2, [pc, #440]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ae0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d013      	beq.n	8005b12 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aea:	f7fc ff59 	bl	80029a0 <HAL_GetTick>
 8005aee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005af2:	f7fc ff55 	bl	80029a0 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b64      	cmp	r3, #100	; 0x64
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e3aa      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b04:	4b63      	ldr	r3, [pc, #396]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0f0      	beq.n	8005af2 <HAL_RCC_OscConfig+0xe6>
 8005b10:	e014      	b.n	8005b3c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b12:	f7fc ff45 	bl	80029a0 <HAL_GetTick>
 8005b16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b1a:	f7fc ff41 	bl	80029a0 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b64      	cmp	r3, #100	; 0x64
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e396      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b2c:	4b59      	ldr	r3, [pc, #356]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f0      	bne.n	8005b1a <HAL_RCC_OscConfig+0x10e>
 8005b38:	e000      	b.n	8005b3c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 80cb 	beq.w	8005ce0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b4a:	4b52      	ldr	r3, [pc, #328]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b52:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b54:	4b4f      	ldr	r3, [pc, #316]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d007      	beq.n	8005b70 <HAL_RCC_OscConfig+0x164>
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	2b18      	cmp	r3, #24
 8005b64:	d156      	bne.n	8005c14 <HAL_RCC_OscConfig+0x208>
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d151      	bne.n	8005c14 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b70:	4b48      	ldr	r3, [pc, #288]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <HAL_RCC_OscConfig+0x17c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e368      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b88:	4b42      	ldr	r3, [pc, #264]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f023 0219 	bic.w	r2, r3, #25
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	493f      	ldr	r1, [pc, #252]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b9a:	f7fc ff01 	bl	80029a0 <HAL_GetTick>
 8005b9e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ba2:	f7fc fefd 	bl	80029a0 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e352      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bb4:	4b37      	ldr	r3, [pc, #220]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0f0      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc0:	f7fc ff1e 	bl	8002a00 <HAL_GetREVID>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d817      	bhi.n	8005bfe <HAL_RCC_OscConfig+0x1f2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b40      	cmp	r3, #64	; 0x40
 8005bd4:	d108      	bne.n	8005be8 <HAL_RCC_OscConfig+0x1dc>
 8005bd6:	4b2f      	ldr	r3, [pc, #188]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005bde:	4a2d      	ldr	r2, [pc, #180]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005be4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005be6:	e07b      	b.n	8005ce0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be8:	4b2a      	ldr	r3, [pc, #168]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	031b      	lsls	r3, r3, #12
 8005bf6:	4927      	ldr	r1, [pc, #156]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bfc:	e070      	b.n	8005ce0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bfe:	4b25      	ldr	r3, [pc, #148]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	061b      	lsls	r3, r3, #24
 8005c0c:	4921      	ldr	r1, [pc, #132]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c12:	e065      	b.n	8005ce0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d048      	beq.n	8005cae <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c1c:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f023 0219 	bic.w	r2, r3, #25
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	491a      	ldr	r1, [pc, #104]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2e:	f7fc feb7 	bl	80029a0 <HAL_GetTick>
 8005c32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c34:	e008      	b.n	8005c48 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c36:	f7fc feb3 	bl	80029a0 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e308      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c48:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0f0      	beq.n	8005c36 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c54:	f7fc fed4 	bl	8002a00 <HAL_GetREVID>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d81a      	bhi.n	8005c98 <HAL_RCC_OscConfig+0x28c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b40      	cmp	r3, #64	; 0x40
 8005c68:	d108      	bne.n	8005c7c <HAL_RCC_OscConfig+0x270>
 8005c6a:	4b0a      	ldr	r3, [pc, #40]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005c72:	4a08      	ldr	r2, [pc, #32]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c78:	6053      	str	r3, [r2, #4]
 8005c7a:	e031      	b.n	8005ce0 <HAL_RCC_OscConfig+0x2d4>
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	031b      	lsls	r3, r3, #12
 8005c8a:	4902      	ldr	r1, [pc, #8]	; (8005c94 <HAL_RCC_OscConfig+0x288>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	604b      	str	r3, [r1, #4]
 8005c90:	e026      	b.n	8005ce0 <HAL_RCC_OscConfig+0x2d4>
 8005c92:	bf00      	nop
 8005c94:	58024400 	.word	0x58024400
 8005c98:	4b9a      	ldr	r3, [pc, #616]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	061b      	lsls	r3, r3, #24
 8005ca6:	4997      	ldr	r1, [pc, #604]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	604b      	str	r3, [r1, #4]
 8005cac:	e018      	b.n	8005ce0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cae:	4b95      	ldr	r3, [pc, #596]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a94      	ldr	r2, [pc, #592]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cba:	f7fc fe71 	bl	80029a0 <HAL_GetTick>
 8005cbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cc2:	f7fc fe6d 	bl	80029a0 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e2c2      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cd4:	4b8b      	ldr	r3, [pc, #556]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f0      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80a9 	beq.w	8005e40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cee:	4b85      	ldr	r3, [pc, #532]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cf6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cf8:	4b82      	ldr	r3, [pc, #520]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d007      	beq.n	8005d14 <HAL_RCC_OscConfig+0x308>
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	2b18      	cmp	r3, #24
 8005d08:	d13a      	bne.n	8005d80 <HAL_RCC_OscConfig+0x374>
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f003 0303 	and.w	r3, r3, #3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d135      	bne.n	8005d80 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d14:	4b7b      	ldr	r3, [pc, #492]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <HAL_RCC_OscConfig+0x320>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	2b80      	cmp	r3, #128	; 0x80
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e296      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d2c:	f7fc fe68 	bl	8002a00 <HAL_GetREVID>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d817      	bhi.n	8005d6a <HAL_RCC_OscConfig+0x35e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d108      	bne.n	8005d54 <HAL_RCC_OscConfig+0x348>
 8005d42:	4b70      	ldr	r3, [pc, #448]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d4a:	4a6e      	ldr	r2, [pc, #440]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d50:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d52:	e075      	b.n	8005e40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d54:	4b6b      	ldr	r3, [pc, #428]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	069b      	lsls	r3, r3, #26
 8005d62:	4968      	ldr	r1, [pc, #416]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d68:	e06a      	b.n	8005e40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d6a:	4b66      	ldr	r3, [pc, #408]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	061b      	lsls	r3, r3, #24
 8005d78:	4962      	ldr	r1, [pc, #392]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d7e:	e05f      	b.n	8005e40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d042      	beq.n	8005e0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d88:	4b5e      	ldr	r3, [pc, #376]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a5d      	ldr	r2, [pc, #372]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fc fe04 	bl	80029a0 <HAL_GetTick>
 8005d98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d9c:	f7fc fe00 	bl	80029a0 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e255      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005dae:	4b55      	ldr	r3, [pc, #340]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dba:	f7fc fe21 	bl	8002a00 <HAL_GetREVID>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d817      	bhi.n	8005df8 <HAL_RCC_OscConfig+0x3ec>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d108      	bne.n	8005de2 <HAL_RCC_OscConfig+0x3d6>
 8005dd0:	4b4c      	ldr	r3, [pc, #304]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005dd8:	4a4a      	ldr	r2, [pc, #296]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005dda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dde:	6053      	str	r3, [r2, #4]
 8005de0:	e02e      	b.n	8005e40 <HAL_RCC_OscConfig+0x434>
 8005de2:	4b48      	ldr	r3, [pc, #288]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	069b      	lsls	r3, r3, #26
 8005df0:	4944      	ldr	r1, [pc, #272]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	604b      	str	r3, [r1, #4]
 8005df6:	e023      	b.n	8005e40 <HAL_RCC_OscConfig+0x434>
 8005df8:	4b42      	ldr	r3, [pc, #264]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	061b      	lsls	r3, r3, #24
 8005e06:	493f      	ldr	r1, [pc, #252]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60cb      	str	r3, [r1, #12]
 8005e0c:	e018      	b.n	8005e40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e0e:	4b3d      	ldr	r3, [pc, #244]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a3c      	ldr	r2, [pc, #240]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1a:	f7fc fdc1 	bl	80029a0 <HAL_GetTick>
 8005e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e20:	e008      	b.n	8005e34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005e22:	f7fc fdbd 	bl	80029a0 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e212      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e34:	4b33      	ldr	r3, [pc, #204]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1f0      	bne.n	8005e22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d036      	beq.n	8005eba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d019      	beq.n	8005e88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e54:	4b2b      	ldr	r3, [pc, #172]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e58:	4a2a      	ldr	r2, [pc, #168]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e60:	f7fc fd9e 	bl	80029a0 <HAL_GetTick>
 8005e64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e68:	f7fc fd9a 	bl	80029a0 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e1ef      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e7a:	4b22      	ldr	r3, [pc, #136]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f0      	beq.n	8005e68 <HAL_RCC_OscConfig+0x45c>
 8005e86:	e018      	b.n	8005eba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e88:	4b1e      	ldr	r3, [pc, #120]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8c:	4a1d      	ldr	r2, [pc, #116]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e94:	f7fc fd84 	bl	80029a0 <HAL_GetTick>
 8005e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e9c:	f7fc fd80 	bl	80029a0 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e1d5      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005eae:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d039      	beq.n	8005f3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d01c      	beq.n	8005f08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ece:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a0c      	ldr	r2, [pc, #48]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005ed4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ed8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005eda:	f7fc fd61 	bl	80029a0 <HAL_GetTick>
 8005ede:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ee2:	f7fc fd5d 	bl	80029a0 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e1b2      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ef4:	4b03      	ldr	r3, [pc, #12]	; (8005f04 <HAL_RCC_OscConfig+0x4f8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f0      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x4d6>
 8005f00:	e01b      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
 8005f02:	bf00      	nop
 8005f04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f08:	4b9b      	ldr	r3, [pc, #620]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a9a      	ldr	r2, [pc, #616]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f14:	f7fc fd44 	bl	80029a0 <HAL_GetTick>
 8005f18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005f1c:	f7fc fd40 	bl	80029a0 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e195      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f2e:	4b92      	ldr	r3, [pc, #584]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f0      	bne.n	8005f1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 8081 	beq.w	800604a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f48:	4b8c      	ldr	r3, [pc, #560]	; (800617c <HAL_RCC_OscConfig+0x770>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a8b      	ldr	r2, [pc, #556]	; (800617c <HAL_RCC_OscConfig+0x770>)
 8005f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f54:	f7fc fd24 	bl	80029a0 <HAL_GetTick>
 8005f58:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f5c:	f7fc fd20 	bl	80029a0 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	; 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e175      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f6e:	4b83      	ldr	r3, [pc, #524]	; (800617c <HAL_RCC_OscConfig+0x770>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0f0      	beq.n	8005f5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d106      	bne.n	8005f90 <HAL_RCC_OscConfig+0x584>
 8005f82:	4b7d      	ldr	r3, [pc, #500]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	4a7c      	ldr	r2, [pc, #496]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8e:	e02d      	b.n	8005fec <HAL_RCC_OscConfig+0x5e0>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10c      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x5a6>
 8005f98:	4b77      	ldr	r3, [pc, #476]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	4a76      	ldr	r2, [pc, #472]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005f9e:	f023 0301 	bic.w	r3, r3, #1
 8005fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa4:	4b74      	ldr	r3, [pc, #464]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa8:	4a73      	ldr	r2, [pc, #460]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005faa:	f023 0304 	bic.w	r3, r3, #4
 8005fae:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb0:	e01c      	b.n	8005fec <HAL_RCC_OscConfig+0x5e0>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	d10c      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x5c8>
 8005fba:	4b6f      	ldr	r3, [pc, #444]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbe:	4a6e      	ldr	r2, [pc, #440]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005fc0:	f043 0304 	orr.w	r3, r3, #4
 8005fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc6:	4b6c      	ldr	r3, [pc, #432]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fca:	4a6b      	ldr	r2, [pc, #428]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005fcc:	f043 0301 	orr.w	r3, r3, #1
 8005fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd2:	e00b      	b.n	8005fec <HAL_RCC_OscConfig+0x5e0>
 8005fd4:	4b68      	ldr	r3, [pc, #416]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd8:	4a67      	ldr	r2, [pc, #412]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005fda:	f023 0301 	bic.w	r3, r3, #1
 8005fde:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe0:	4b65      	ldr	r3, [pc, #404]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe4:	4a64      	ldr	r2, [pc, #400]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8005fe6:	f023 0304 	bic.w	r3, r3, #4
 8005fea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d015      	beq.n	8006020 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff4:	f7fc fcd4 	bl	80029a0 <HAL_GetTick>
 8005ff8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ffa:	e00a      	b.n	8006012 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ffc:	f7fc fcd0 	bl	80029a0 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	f241 3288 	movw	r2, #5000	; 0x1388
 800600a:	4293      	cmp	r3, r2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e123      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006012:	4b59      	ldr	r3, [pc, #356]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0ee      	beq.n	8005ffc <HAL_RCC_OscConfig+0x5f0>
 800601e:	e014      	b.n	800604a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006020:	f7fc fcbe 	bl	80029a0 <HAL_GetTick>
 8006024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006026:	e00a      	b.n	800603e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006028:	f7fc fcba 	bl	80029a0 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	f241 3288 	movw	r2, #5000	; 0x1388
 8006036:	4293      	cmp	r3, r2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e10d      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800603e:	4b4e      	ldr	r3, [pc, #312]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1ee      	bne.n	8006028 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 8102 	beq.w	8006258 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006054:	4b48      	ldr	r3, [pc, #288]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800605c:	2b18      	cmp	r3, #24
 800605e:	f000 80bd 	beq.w	80061dc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	2b02      	cmp	r3, #2
 8006068:	f040 809e 	bne.w	80061a8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800606c:	4b42      	ldr	r3, [pc, #264]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a41      	ldr	r2, [pc, #260]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fc fc92 	bl	80029a0 <HAL_GetTick>
 800607c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006080:	f7fc fc8e 	bl	80029a0 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e0e3      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006092:	4b39      	ldr	r3, [pc, #228]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f0      	bne.n	8006080 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800609e:	4b36      	ldr	r3, [pc, #216]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 80060a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060a2:	4b37      	ldr	r3, [pc, #220]	; (8006180 <HAL_RCC_OscConfig+0x774>)
 80060a4:	4013      	ands	r3, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060ae:	0112      	lsls	r2, r2, #4
 80060b0:	430a      	orrs	r2, r1
 80060b2:	4931      	ldr	r1, [pc, #196]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	628b      	str	r3, [r1, #40]	; 0x28
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	3b01      	subs	r3, #1
 80060be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c6:	3b01      	subs	r3, #1
 80060c8:	025b      	lsls	r3, r3, #9
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	3b01      	subs	r3, #1
 80060d4:	041b      	lsls	r3, r3, #16
 80060d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e0:	3b01      	subs	r3, #1
 80060e2:	061b      	lsls	r3, r3, #24
 80060e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060e8:	4923      	ldr	r1, [pc, #140]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80060ee:	4b22      	ldr	r3, [pc, #136]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	4a21      	ldr	r2, [pc, #132]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 80060f4:	f023 0301 	bic.w	r3, r3, #1
 80060f8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060fa:	4b1f      	ldr	r3, [pc, #124]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 80060fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060fe:	4b21      	ldr	r3, [pc, #132]	; (8006184 <HAL_RCC_OscConfig+0x778>)
 8006100:	4013      	ands	r3, r2
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006106:	00d2      	lsls	r2, r2, #3
 8006108:	491b      	ldr	r1, [pc, #108]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 800610a:	4313      	orrs	r3, r2
 800610c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800610e:	4b1a      	ldr	r3, [pc, #104]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	f023 020c 	bic.w	r2, r3, #12
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	4917      	ldr	r1, [pc, #92]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 800611c:	4313      	orrs	r3, r2
 800611e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006120:	4b15      	ldr	r3, [pc, #84]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	f023 0202 	bic.w	r2, r3, #2
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612c:	4912      	ldr	r1, [pc, #72]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 800612e:	4313      	orrs	r3, r2
 8006130:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006132:	4b11      	ldr	r3, [pc, #68]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	4a10      	ldr	r2, [pc, #64]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800613c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800613e:	4b0e      	ldr	r3, [pc, #56]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	4a0d      	ldr	r2, [pc, #52]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006148:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800614a:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	4a0a      	ldr	r2, [pc, #40]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006154:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006156:	4b08      	ldr	r3, [pc, #32]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	4a07      	ldr	r2, [pc, #28]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a04      	ldr	r2, [pc, #16]	; (8006178 <HAL_RCC_OscConfig+0x76c>)
 8006168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800616c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616e:	f7fc fc17 	bl	80029a0 <HAL_GetTick>
 8006172:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006174:	e011      	b.n	800619a <HAL_RCC_OscConfig+0x78e>
 8006176:	bf00      	nop
 8006178:	58024400 	.word	0x58024400
 800617c:	58024800 	.word	0x58024800
 8006180:	fffffc0c 	.word	0xfffffc0c
 8006184:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006188:	f7fc fc0a 	bl	80029a0 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e05f      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800619a:	4b32      	ldr	r3, [pc, #200]	; (8006264 <HAL_RCC_OscConfig+0x858>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0x77c>
 80061a6:	e057      	b.n	8006258 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a8:	4b2e      	ldr	r3, [pc, #184]	; (8006264 <HAL_RCC_OscConfig+0x858>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a2d      	ldr	r2, [pc, #180]	; (8006264 <HAL_RCC_OscConfig+0x858>)
 80061ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b4:	f7fc fbf4 	bl	80029a0 <HAL_GetTick>
 80061b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061bc:	f7fc fbf0 	bl	80029a0 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e045      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ce:	4b25      	ldr	r3, [pc, #148]	; (8006264 <HAL_RCC_OscConfig+0x858>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f0      	bne.n	80061bc <HAL_RCC_OscConfig+0x7b0>
 80061da:	e03d      	b.n	8006258 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80061dc:	4b21      	ldr	r3, [pc, #132]	; (8006264 <HAL_RCC_OscConfig+0x858>)
 80061de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80061e2:	4b20      	ldr	r3, [pc, #128]	; (8006264 <HAL_RCC_OscConfig+0x858>)
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d031      	beq.n	8006254 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f003 0203 	and.w	r2, r3, #3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d12a      	bne.n	8006254 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	091b      	lsrs	r3, r3, #4
 8006202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800620a:	429a      	cmp	r2, r3
 800620c:	d122      	bne.n	8006254 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800621a:	429a      	cmp	r2, r3
 800621c:	d11a      	bne.n	8006254 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	0a5b      	lsrs	r3, r3, #9
 8006222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800622c:	429a      	cmp	r2, r3
 800622e:	d111      	bne.n	8006254 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	0c1b      	lsrs	r3, r3, #16
 8006234:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800623e:	429a      	cmp	r2, r3
 8006240:	d108      	bne.n	8006254 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	0e1b      	lsrs	r3, r3, #24
 8006246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006250:	429a      	cmp	r2, r3
 8006252:	d001      	beq.n	8006258 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3730      	adds	r7, #48	; 0x30
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	58024400 	.word	0x58024400

08006268 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e19c      	b.n	80065b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800627c:	4b8a      	ldr	r3, [pc, #552]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d910      	bls.n	80062ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800628a:	4b87      	ldr	r3, [pc, #540]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f023 020f 	bic.w	r2, r3, #15
 8006292:	4985      	ldr	r1, [pc, #532]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	4313      	orrs	r3, r2
 8006298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800629a:	4b83      	ldr	r3, [pc, #524]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d001      	beq.n	80062ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e184      	b.n	80065b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d010      	beq.n	80062da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	4b7b      	ldr	r3, [pc, #492]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d908      	bls.n	80062da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062c8:	4b78      	ldr	r3, [pc, #480]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	4975      	ldr	r1, [pc, #468]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0308 	and.w	r3, r3, #8
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d010      	beq.n	8006308 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	695a      	ldr	r2, [r3, #20]
 80062ea:	4b70      	ldr	r3, [pc, #448]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d908      	bls.n	8006308 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062f6:	4b6d      	ldr	r3, [pc, #436]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	496a      	ldr	r1, [pc, #424]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 8006304:	4313      	orrs	r3, r2
 8006306:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b00      	cmp	r3, #0
 8006312:	d010      	beq.n	8006336 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	4b64      	ldr	r3, [pc, #400]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006320:	429a      	cmp	r2, r3
 8006322:	d908      	bls.n	8006336 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006324:	4b61      	ldr	r3, [pc, #388]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	495e      	ldr	r1, [pc, #376]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 8006332:	4313      	orrs	r3, r2
 8006334:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d010      	beq.n	8006364 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69da      	ldr	r2, [r3, #28]
 8006346:	4b59      	ldr	r3, [pc, #356]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800634e:	429a      	cmp	r2, r3
 8006350:	d908      	bls.n	8006364 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006352:	4b56      	ldr	r3, [pc, #344]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	4953      	ldr	r1, [pc, #332]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 8006360:	4313      	orrs	r3, r2
 8006362:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d010      	beq.n	8006392 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	4b4d      	ldr	r3, [pc, #308]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f003 030f 	and.w	r3, r3, #15
 800637c:	429a      	cmp	r2, r3
 800637e:	d908      	bls.n	8006392 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006380:	4b4a      	ldr	r3, [pc, #296]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	f023 020f 	bic.w	r2, r3, #15
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	4947      	ldr	r1, [pc, #284]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 800638e:	4313      	orrs	r3, r2
 8006390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d055      	beq.n	800644a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800639e:	4b43      	ldr	r3, [pc, #268]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	4940      	ldr	r1, [pc, #256]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d107      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063b8:	4b3c      	ldr	r3, [pc, #240]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d121      	bne.n	8006408 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0f6      	b.n	80065b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d107      	bne.n	80063e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063d0:	4b36      	ldr	r3, [pc, #216]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d115      	bne.n	8006408 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e0ea      	b.n	80065b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d107      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063e8:	4b30      	ldr	r3, [pc, #192]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d109      	bne.n	8006408 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0de      	b.n	80065b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063f8:	4b2c      	ldr	r3, [pc, #176]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e0d6      	b.n	80065b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006408:	4b28      	ldr	r3, [pc, #160]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f023 0207 	bic.w	r2, r3, #7
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	4925      	ldr	r1, [pc, #148]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 8006416:	4313      	orrs	r3, r2
 8006418:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641a:	f7fc fac1 	bl	80029a0 <HAL_GetTick>
 800641e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006420:	e00a      	b.n	8006438 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006422:	f7fc fabd 	bl	80029a0 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006430:	4293      	cmp	r3, r2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e0be      	b.n	80065b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006438:	4b1c      	ldr	r3, [pc, #112]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	00db      	lsls	r3, r3, #3
 8006446:	429a      	cmp	r2, r3
 8006448:	d1eb      	bne.n	8006422 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d010      	beq.n	8006478 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	4b14      	ldr	r3, [pc, #80]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	429a      	cmp	r2, r3
 8006464:	d208      	bcs.n	8006478 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006466:	4b11      	ldr	r3, [pc, #68]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f023 020f 	bic.w	r2, r3, #15
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	490e      	ldr	r1, [pc, #56]	; (80064ac <HAL_RCC_ClockConfig+0x244>)
 8006474:	4313      	orrs	r3, r2
 8006476:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006478:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d214      	bcs.n	80064b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006486:	4b08      	ldr	r3, [pc, #32]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f023 020f 	bic.w	r2, r3, #15
 800648e:	4906      	ldr	r1, [pc, #24]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	4313      	orrs	r3, r2
 8006494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006496:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <HAL_RCC_ClockConfig+0x240>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d005      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e086      	b.n	80065b6 <HAL_RCC_ClockConfig+0x34e>
 80064a8:	52002000 	.word	0x52002000
 80064ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d010      	beq.n	80064de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	4b3f      	ldr	r3, [pc, #252]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d208      	bcs.n	80064de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064cc:	4b3c      	ldr	r3, [pc, #240]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	4939      	ldr	r1, [pc, #228]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d010      	beq.n	800650c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	4b34      	ldr	r3, [pc, #208]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d208      	bcs.n	800650c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064fa:	4b31      	ldr	r3, [pc, #196]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	492e      	ldr	r1, [pc, #184]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 8006508:	4313      	orrs	r3, r2
 800650a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0310 	and.w	r3, r3, #16
 8006514:	2b00      	cmp	r3, #0
 8006516:	d010      	beq.n	800653a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	699a      	ldr	r2, [r3, #24]
 800651c:	4b28      	ldr	r3, [pc, #160]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006524:	429a      	cmp	r2, r3
 8006526:	d208      	bcs.n	800653a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006528:	4b25      	ldr	r3, [pc, #148]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	4922      	ldr	r1, [pc, #136]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 8006536:	4313      	orrs	r3, r2
 8006538:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d010      	beq.n	8006568 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69da      	ldr	r2, [r3, #28]
 800654a:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006552:	429a      	cmp	r2, r3
 8006554:	d208      	bcs.n	8006568 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006556:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	4917      	ldr	r1, [pc, #92]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 8006564:	4313      	orrs	r3, r2
 8006566:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006568:	f000 f834 	bl	80065d4 <HAL_RCC_GetSysClockFreq>
 800656c:	4602      	mov	r2, r0
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	4912      	ldr	r1, [pc, #72]	; (80065c4 <HAL_RCC_ClockConfig+0x35c>)
 800657a:	5ccb      	ldrb	r3, [r1, r3]
 800657c:	f003 031f 	and.w	r3, r3, #31
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
 8006584:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006586:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <HAL_RCC_ClockConfig+0x358>)
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	4a0d      	ldr	r2, [pc, #52]	; (80065c4 <HAL_RCC_ClockConfig+0x35c>)
 8006590:	5cd3      	ldrb	r3, [r2, r3]
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	fa22 f303 	lsr.w	r3, r2, r3
 800659c:	4a0a      	ldr	r2, [pc, #40]	; (80065c8 <HAL_RCC_ClockConfig+0x360>)
 800659e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065a0:	4a0a      	ldr	r2, [pc, #40]	; (80065cc <HAL_RCC_ClockConfig+0x364>)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80065a6:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <HAL_RCC_ClockConfig+0x368>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fc f9ae 	bl	800290c <HAL_InitTick>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	58024400 	.word	0x58024400
 80065c4:	0800bab4 	.word	0x0800bab4
 80065c8:	24000004 	.word	0x24000004
 80065cc:	24000000 	.word	0x24000000
 80065d0:	24000008 	.word	0x24000008

080065d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b089      	sub	sp, #36	; 0x24
 80065d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065da:	4bb3      	ldr	r3, [pc, #716]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065e2:	2b18      	cmp	r3, #24
 80065e4:	f200 8155 	bhi.w	8006892 <HAL_RCC_GetSysClockFreq+0x2be>
 80065e8:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80065ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ee:	bf00      	nop
 80065f0:	08006655 	.word	0x08006655
 80065f4:	08006893 	.word	0x08006893
 80065f8:	08006893 	.word	0x08006893
 80065fc:	08006893 	.word	0x08006893
 8006600:	08006893 	.word	0x08006893
 8006604:	08006893 	.word	0x08006893
 8006608:	08006893 	.word	0x08006893
 800660c:	08006893 	.word	0x08006893
 8006610:	0800667b 	.word	0x0800667b
 8006614:	08006893 	.word	0x08006893
 8006618:	08006893 	.word	0x08006893
 800661c:	08006893 	.word	0x08006893
 8006620:	08006893 	.word	0x08006893
 8006624:	08006893 	.word	0x08006893
 8006628:	08006893 	.word	0x08006893
 800662c:	08006893 	.word	0x08006893
 8006630:	08006681 	.word	0x08006681
 8006634:	08006893 	.word	0x08006893
 8006638:	08006893 	.word	0x08006893
 800663c:	08006893 	.word	0x08006893
 8006640:	08006893 	.word	0x08006893
 8006644:	08006893 	.word	0x08006893
 8006648:	08006893 	.word	0x08006893
 800664c:	08006893 	.word	0x08006893
 8006650:	08006687 	.word	0x08006687
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006654:	4b94      	ldr	r3, [pc, #592]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d009      	beq.n	8006674 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006660:	4b91      	ldr	r3, [pc, #580]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	08db      	lsrs	r3, r3, #3
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	4a90      	ldr	r2, [pc, #576]	; (80068ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
 8006670:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006672:	e111      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006674:	4b8d      	ldr	r3, [pc, #564]	; (80068ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006676:	61bb      	str	r3, [r7, #24]
    break;
 8006678:	e10e      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800667a:	4b8d      	ldr	r3, [pc, #564]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800667c:	61bb      	str	r3, [r7, #24]
    break;
 800667e:	e10b      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006680:	4b8c      	ldr	r3, [pc, #560]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006682:	61bb      	str	r3, [r7, #24]
    break;
 8006684:	e108      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006686:	4b88      	ldr	r3, [pc, #544]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006690:	4b85      	ldr	r3, [pc, #532]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006694:	091b      	lsrs	r3, r3, #4
 8006696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800669a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800669c:	4b82      	ldr	r3, [pc, #520]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80066a6:	4b80      	ldr	r3, [pc, #512]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066aa:	08db      	lsrs	r3, r3, #3
 80066ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	fb02 f303 	mul.w	r3, r2, r3
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 80e1 	beq.w	800688c <HAL_RCC_GetSysClockFreq+0x2b8>
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	f000 8083 	beq.w	80067d8 <HAL_RCC_GetSysClockFreq+0x204>
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	f200 80a1 	bhi.w	800681c <HAL_RCC_GetSysClockFreq+0x248>
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_RCC_GetSysClockFreq+0x114>
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d056      	beq.n	8006794 <HAL_RCC_GetSysClockFreq+0x1c0>
 80066e6:	e099      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066e8:	4b6f      	ldr	r3, [pc, #444]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d02d      	beq.n	8006750 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066f4:	4b6c      	ldr	r3, [pc, #432]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	08db      	lsrs	r3, r3, #3
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	4a6b      	ldr	r2, [pc, #428]	; (80068ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006700:	fa22 f303 	lsr.w	r3, r2, r3
 8006704:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	ee07 3a90 	vmov	s15, r3
 800670c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800671a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671e:	4b62      	ldr	r3, [pc, #392]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006732:	eddf 5a61 	vldr	s11, [pc, #388]	; 80068b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800674e:	e087      	b.n	8006860 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80068bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800675e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006762:	4b51      	ldr	r3, [pc, #324]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006772:	ed97 6a02 	vldr	s12, [r7, #8]
 8006776:	eddf 5a50 	vldr	s11, [pc, #320]	; 80068b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800677a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006792:	e065      	b.n	8006860 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80068c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a6:	4b40      	ldr	r3, [pc, #256]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80068b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067d6:	e043      	b.n	8006860 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80068c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80067e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ea:	4b2f      	ldr	r3, [pc, #188]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80067fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80068b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800680e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800681a:	e021      	b.n	8006860 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006826:	eddf 6a26 	vldr	s13, [pc, #152]	; 80068c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800682a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800682e:	4b1e      	ldr	r3, [pc, #120]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800683e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006842:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80068b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800684a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800684e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800685e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006860:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006864:	0a5b      	lsrs	r3, r3, #9
 8006866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800686a:	3301      	adds	r3, #1
 800686c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	ee07 3a90 	vmov	s15, r3
 8006874:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006878:	edd7 6a07 	vldr	s13, [r7, #28]
 800687c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006884:	ee17 3a90 	vmov	r3, s15
 8006888:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800688a:	e005      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	61bb      	str	r3, [r7, #24]
    break;
 8006890:	e002      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006892:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006894:	61bb      	str	r3, [r7, #24]
    break;
 8006896:	bf00      	nop
  }

  return sysclockfreq;
 8006898:	69bb      	ldr	r3, [r7, #24]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3724      	adds	r7, #36	; 0x24
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	58024400 	.word	0x58024400
 80068ac:	03d09000 	.word	0x03d09000
 80068b0:	003d0900 	.word	0x003d0900
 80068b4:	017d7840 	.word	0x017d7840
 80068b8:	46000000 	.word	0x46000000
 80068bc:	4c742400 	.word	0x4c742400
 80068c0:	4a742400 	.word	0x4a742400
 80068c4:	4bbebc20 	.word	0x4bbebc20

080068c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80068ce:	f7ff fe81 	bl	80065d4 <HAL_RCC_GetSysClockFreq>
 80068d2:	4602      	mov	r2, r0
 80068d4:	4b10      	ldr	r3, [pc, #64]	; (8006918 <HAL_RCC_GetHCLKFreq+0x50>)
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	0a1b      	lsrs	r3, r3, #8
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	490f      	ldr	r1, [pc, #60]	; (800691c <HAL_RCC_GetHCLKFreq+0x54>)
 80068e0:	5ccb      	ldrb	r3, [r1, r3]
 80068e2:	f003 031f 	and.w	r3, r3, #31
 80068e6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068ec:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <HAL_RCC_GetHCLKFreq+0x50>)
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	4a09      	ldr	r2, [pc, #36]	; (800691c <HAL_RCC_GetHCLKFreq+0x54>)
 80068f6:	5cd3      	ldrb	r3, [r2, r3]
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006902:	4a07      	ldr	r2, [pc, #28]	; (8006920 <HAL_RCC_GetHCLKFreq+0x58>)
 8006904:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006906:	4a07      	ldr	r2, [pc, #28]	; (8006924 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800690c:	4b04      	ldr	r3, [pc, #16]	; (8006920 <HAL_RCC_GetHCLKFreq+0x58>)
 800690e:	681b      	ldr	r3, [r3, #0]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	58024400 	.word	0x58024400
 800691c:	0800bab4 	.word	0x0800bab4
 8006920:	24000004 	.word	0x24000004
 8006924:	24000000 	.word	0x24000000

08006928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800692c:	f7ff ffcc 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 8006930:	4602      	mov	r2, r0
 8006932:	4b06      	ldr	r3, [pc, #24]	; (800694c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	091b      	lsrs	r3, r3, #4
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	4904      	ldr	r1, [pc, #16]	; (8006950 <HAL_RCC_GetPCLK1Freq+0x28>)
 800693e:	5ccb      	ldrb	r3, [r1, r3]
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006948:	4618      	mov	r0, r3
 800694a:	bd80      	pop	{r7, pc}
 800694c:	58024400 	.word	0x58024400
 8006950:	0800bab4 	.word	0x0800bab4

08006954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006958:	f7ff ffb6 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 800695c:	4602      	mov	r2, r0
 800695e:	4b06      	ldr	r3, [pc, #24]	; (8006978 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	0a1b      	lsrs	r3, r3, #8
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	4904      	ldr	r1, [pc, #16]	; (800697c <HAL_RCC_GetPCLK2Freq+0x28>)
 800696a:	5ccb      	ldrb	r3, [r1, r3]
 800696c:	f003 031f 	and.w	r3, r3, #31
 8006970:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006974:	4618      	mov	r0, r3
 8006976:	bd80      	pop	{r7, pc}
 8006978:	58024400 	.word	0x58024400
 800697c:	0800bab4 	.word	0x0800bab4

08006980 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006988:	2300      	movs	r3, #0
 800698a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800698c:	2300      	movs	r3, #0
 800698e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d03f      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069a4:	d02a      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80069a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069aa:	d824      	bhi.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80069ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069b0:	d018      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80069b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069b6:	d81e      	bhi.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80069bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c0:	d007      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80069c2:	e018      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c4:	4ba3      	ldr	r3, [pc, #652]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	4aa2      	ldr	r2, [pc, #648]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069d0:	e015      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3304      	adds	r3, #4
 80069d6:	2102      	movs	r1, #2
 80069d8:	4618      	mov	r0, r3
 80069da:	f001 fff9 	bl	80089d0 <RCCEx_PLL2_Config>
 80069de:	4603      	mov	r3, r0
 80069e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069e2:	e00c      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	3324      	adds	r3, #36	; 0x24
 80069e8:	2102      	movs	r1, #2
 80069ea:	4618      	mov	r0, r3
 80069ec:	f002 f8a2 	bl	8008b34 <RCCEx_PLL3_Config>
 80069f0:	4603      	mov	r3, r0
 80069f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069f4:	e003      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	75fb      	strb	r3, [r7, #23]
      break;
 80069fa:	e000      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80069fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d109      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006a04:	4b93      	ldr	r3, [pc, #588]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a10:	4990      	ldr	r1, [pc, #576]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	650b      	str	r3, [r1, #80]	; 0x50
 8006a16:	e001      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
 8006a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d03d      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d826      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006a30:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006a4d 	.word	0x08006a4d
 8006a3c:	08006a5b 	.word	0x08006a5b
 8006a40:	08006a6d 	.word	0x08006a6d
 8006a44:	08006a85 	.word	0x08006a85
 8006a48:	08006a85 	.word	0x08006a85
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a4c:	4b81      	ldr	r3, [pc, #516]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	4a80      	ldr	r2, [pc, #512]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a58:	e015      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	2100      	movs	r1, #0
 8006a60:	4618      	mov	r0, r3
 8006a62:	f001 ffb5 	bl	80089d0 <RCCEx_PLL2_Config>
 8006a66:	4603      	mov	r3, r0
 8006a68:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a6a:	e00c      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3324      	adds	r3, #36	; 0x24
 8006a70:	2100      	movs	r1, #0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f002 f85e 	bl	8008b34 <RCCEx_PLL3_Config>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a7c:	e003      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]
      break;
 8006a82:	e000      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d109      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a8c:	4b71      	ldr	r3, [pc, #452]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a90:	f023 0207 	bic.w	r2, r3, #7
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a98:	496e      	ldr	r1, [pc, #440]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	650b      	str	r3, [r1, #80]	; 0x50
 8006a9e:	e001      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
 8006aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d042      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab8:	d02b      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006abe:	d825      	bhi.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ac0:	2bc0      	cmp	r3, #192	; 0xc0
 8006ac2:	d028      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006ac4:	2bc0      	cmp	r3, #192	; 0xc0
 8006ac6:	d821      	bhi.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ac8:	2b80      	cmp	r3, #128	; 0x80
 8006aca:	d016      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006acc:	2b80      	cmp	r3, #128	; 0x80
 8006ace:	d81d      	bhi.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006ad4:	2b40      	cmp	r3, #64	; 0x40
 8006ad6:	d007      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006ad8:	e018      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ada:	4b5e      	ldr	r3, [pc, #376]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	4a5d      	ldr	r2, [pc, #372]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ae6:	e017      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3304      	adds	r3, #4
 8006aec:	2100      	movs	r1, #0
 8006aee:	4618      	mov	r0, r3
 8006af0:	f001 ff6e 	bl	80089d0 <RCCEx_PLL2_Config>
 8006af4:	4603      	mov	r3, r0
 8006af6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006af8:	e00e      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3324      	adds	r3, #36	; 0x24
 8006afe:	2100      	movs	r1, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f002 f817 	bl	8008b34 <RCCEx_PLL3_Config>
 8006b06:	4603      	mov	r3, r0
 8006b08:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006b0a:	e005      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b10:	e002      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006b12:	bf00      	nop
 8006b14:	e000      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b18:	7dfb      	ldrb	r3, [r7, #23]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006b1e:	4b4d      	ldr	r3, [pc, #308]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b22:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2a:	494a      	ldr	r1, [pc, #296]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	650b      	str	r3, [r1, #80]	; 0x50
 8006b30:	e001      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d049      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b4c:	d030      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006b4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b52:	d82a      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b54:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b58:	d02c      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006b5a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b5e:	d824      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b64:	d018      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b6a:	d81e      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006b70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b74:	d007      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006b76:	e018      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b78:	4b36      	ldr	r3, [pc, #216]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	4a35      	ldr	r2, [pc, #212]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b84:	e017      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 ff1f 	bl	80089d0 <RCCEx_PLL2_Config>
 8006b92:	4603      	mov	r3, r0
 8006b94:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006b96:	e00e      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3324      	adds	r3, #36	; 0x24
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f001 ffc8 	bl	8008b34 <RCCEx_PLL3_Config>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ba8:	e005      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	75fb      	strb	r3, [r7, #23]
      break;
 8006bae:	e002      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006bb0:	bf00      	nop
 8006bb2:	e000      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006bbc:	4b25      	ldr	r3, [pc, #148]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bca:	4922      	ldr	r1, [pc, #136]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	658b      	str	r3, [r1, #88]	; 0x58
 8006bd0:	e001      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
 8006bd4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d04b      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bec:	d030      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006bee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bf2:	d82a      	bhi.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006bf4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bf8:	d02e      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006bfa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bfe:	d824      	bhi.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c04:	d018      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006c06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c0a:	d81e      	bhi.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c14:	d007      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006c16:	e018      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c18:	4b0e      	ldr	r3, [pc, #56]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	4a0d      	ldr	r2, [pc, #52]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c24:	e019      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f001 fecf 	bl	80089d0 <RCCEx_PLL2_Config>
 8006c32:	4603      	mov	r3, r0
 8006c34:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006c36:	e010      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3324      	adds	r3, #36	; 0x24
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f001 ff78 	bl	8008b34 <RCCEx_PLL3_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c48:	e007      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4e:	e004      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006c50:	bf00      	nop
 8006c52:	e002      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006c54:	58024400 	.word	0x58024400
      break;
 8006c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c60:	4b99      	ldr	r3, [pc, #612]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c64:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c6e:	4996      	ldr	r1, [pc, #600]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	658b      	str	r3, [r1, #88]	; 0x58
 8006c74:	e001      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d032      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8a:	2b30      	cmp	r3, #48	; 0x30
 8006c8c:	d01c      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006c8e:	2b30      	cmp	r3, #48	; 0x30
 8006c90:	d817      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	d00c      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d813      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d016      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d10f      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca2:	4b89      	ldr	r3, [pc, #548]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca6:	4a88      	ldr	r2, [pc, #544]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006cae:	e00e      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	2102      	movs	r1, #2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f001 fe8a 	bl	80089d0 <RCCEx_PLL2_Config>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006cc0:	e005      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc6:	e002      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006cc8:	bf00      	nop
 8006cca:	e000      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006cd4:	4b7c      	ldr	r3, [pc, #496]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce0:	4979      	ldr	r1, [pc, #484]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ce6:	e001      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d047      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d00:	d030      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d06:	d82a      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006d08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d0c:	d02c      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006d0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d12:	d824      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d18:	d018      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d1e:	d81e      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d003      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d28:	d007      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006d2a:	e018      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d2c:	4b66      	ldr	r3, [pc, #408]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	4a65      	ldr	r2, [pc, #404]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d38:	e017      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	2100      	movs	r1, #0
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 fe45 	bl	80089d0 <RCCEx_PLL2_Config>
 8006d46:	4603      	mov	r3, r0
 8006d48:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d4a:	e00e      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3324      	adds	r3, #36	; 0x24
 8006d50:	2100      	movs	r1, #0
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 feee 	bl	8008b34 <RCCEx_PLL3_Config>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d5c:	e005      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	75fb      	strb	r3, [r7, #23]
      break;
 8006d62:	e002      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006d64:	bf00      	nop
 8006d66:	e000      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d109      	bne.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d70:	4b55      	ldr	r3, [pc, #340]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d74:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7c:	4952      	ldr	r1, [pc, #328]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	650b      	str	r3, [r1, #80]	; 0x50
 8006d82:	e001      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d049      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d9c:	d02e      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006d9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006da2:	d828      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006da4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006da8:	d02a      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006daa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dae:	d822      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006db0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006db4:	d026      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006db6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dba:	d81c      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc0:	d010      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006dc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc6:	d816      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01d      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd0:	d111      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f001 fdf9 	bl	80089d0 <RCCEx_PLL2_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006de2:	e012      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3324      	adds	r3, #36	; 0x24
 8006de8:	2101      	movs	r1, #1
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 fea2 	bl	8008b34 <RCCEx_PLL3_Config>
 8006df0:	4603      	mov	r3, r0
 8006df2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006df4:	e009      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfa:	e006      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006dfc:	bf00      	nop
 8006dfe:	e004      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006e00:	bf00      	nop
 8006e02:	e002      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006e04:	bf00      	nop
 8006e06:	e000      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d109      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e10:	4b2d      	ldr	r3, [pc, #180]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e14:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e1c:	492a      	ldr	r1, [pc, #168]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	650b      	str	r3, [r1, #80]	; 0x50
 8006e22:	e001      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e24:	7dfb      	ldrb	r3, [r7, #23]
 8006e26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d04d      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e3e:	d02e      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e44:	d828      	bhi.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4a:	d02a      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e50:	d822      	bhi.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006e52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e56:	d026      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006e58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e5c:	d81c      	bhi.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e62:	d010      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e68:	d816      	bhi.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d01d      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e72:	d111      	bne.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3304      	adds	r3, #4
 8006e78:	2101      	movs	r1, #1
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f001 fda8 	bl	80089d0 <RCCEx_PLL2_Config>
 8006e80:	4603      	mov	r3, r0
 8006e82:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e84:	e012      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	3324      	adds	r3, #36	; 0x24
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f001 fe51 	bl	8008b34 <RCCEx_PLL3_Config>
 8006e92:	4603      	mov	r3, r0
 8006e94:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e96:	e009      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e9c:	e006      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006e9e:	bf00      	nop
 8006ea0:	e004      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006ea2:	bf00      	nop
 8006ea4:	e002      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006ea6:	bf00      	nop
 8006ea8:	e000      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10c      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006eb2:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ec0:	4901      	ldr	r1, [pc, #4]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ec6:	e003      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006ec8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
 8006ece:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d02f      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee4:	d00e      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eea:	d814      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d015      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ef4:	d10f      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef6:	4baf      	ldr	r3, [pc, #700]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efa:	4aae      	ldr	r2, [pc, #696]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006f02:	e00c      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3304      	adds	r3, #4
 8006f08:	2101      	movs	r1, #1
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 fd60 	bl	80089d0 <RCCEx_PLL2_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006f14:	e003      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1a:	e000      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d109      	bne.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f24:	4ba3      	ldr	r3, [pc, #652]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f30:	49a0      	ldr	r1, [pc, #640]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	650b      	str	r3, [r1, #80]	; 0x50
 8006f36:	e001      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d032      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d81b      	bhi.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006f50:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f56:	bf00      	nop
 8006f58:	08006f8f 	.word	0x08006f8f
 8006f5c:	08006f69 	.word	0x08006f69
 8006f60:	08006f77 	.word	0x08006f77
 8006f64:	08006f8f 	.word	0x08006f8f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f68:	4b92      	ldr	r3, [pc, #584]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	4a91      	ldr	r2, [pc, #580]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f74:	e00c      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	2102      	movs	r1, #2
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f001 fd27 	bl	80089d0 <RCCEx_PLL2_Config>
 8006f82:	4603      	mov	r3, r0
 8006f84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f86:	e003      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f8c:	e000      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f96:	4b87      	ldr	r3, [pc, #540]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9a:	f023 0203 	bic.w	r2, r3, #3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa2:	4984      	ldr	r1, [pc, #528]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fa8:	e001      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 8086 	beq.w	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fbc:	4b7e      	ldr	r3, [pc, #504]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a7d      	ldr	r2, [pc, #500]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fc8:	f7fb fcea 	bl	80029a0 <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fce:	e009      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fd0:	f7fb fce6 	bl	80029a0 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b64      	cmp	r3, #100	; 0x64
 8006fdc:	d902      	bls.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	75fb      	strb	r3, [r7, #23]
        break;
 8006fe2:	e005      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fe4:	4b74      	ldr	r3, [pc, #464]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0ef      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d166      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ff6:	4b6f      	ldr	r3, [pc, #444]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ff8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007000:	4053      	eors	r3, r2
 8007002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007006:	2b00      	cmp	r3, #0
 8007008:	d013      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800700a:	4b6a      	ldr	r3, [pc, #424]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800700c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007012:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007014:	4b67      	ldr	r3, [pc, #412]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007018:	4a66      	ldr	r2, [pc, #408]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800701a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800701e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007020:	4b64      	ldr	r3, [pc, #400]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007024:	4a63      	ldr	r2, [pc, #396]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800702a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800702c:	4a61      	ldr	r2, [pc, #388]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800703c:	d115      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703e:	f7fb fcaf 	bl	80029a0 <HAL_GetTick>
 8007042:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007044:	e00b      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007046:	f7fb fcab 	bl	80029a0 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	f241 3288 	movw	r2, #5000	; 0x1388
 8007054:	4293      	cmp	r3, r2
 8007056:	d902      	bls.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	75fb      	strb	r3, [r7, #23]
            break;
 800705c:	e005      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800705e:	4b55      	ldr	r3, [pc, #340]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0ed      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d126      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800707a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800707e:	d10d      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007080:	4b4c      	ldr	r3, [pc, #304]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800708e:	0919      	lsrs	r1, r3, #4
 8007090:	4b4a      	ldr	r3, [pc, #296]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007092:	400b      	ands	r3, r1
 8007094:	4947      	ldr	r1, [pc, #284]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007096:	4313      	orrs	r3, r2
 8007098:	610b      	str	r3, [r1, #16]
 800709a:	e005      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800709c:	4b45      	ldr	r3, [pc, #276]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	4a44      	ldr	r2, [pc, #272]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80070a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80070a6:	6113      	str	r3, [r2, #16]
 80070a8:	4b42      	ldr	r3, [pc, #264]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80070aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070b6:	493f      	ldr	r1, [pc, #252]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	670b      	str	r3, [r1, #112]	; 0x70
 80070bc:	e004      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	75bb      	strb	r3, [r7, #22]
 80070c2:	e001      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
 80070c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8085 	beq.w	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070da:	2b28      	cmp	r3, #40	; 0x28
 80070dc:	d866      	bhi.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	080071c1 	.word	0x080071c1
 80070e8:	080071ad 	.word	0x080071ad
 80070ec:	080071ad 	.word	0x080071ad
 80070f0:	080071ad 	.word	0x080071ad
 80070f4:	080071ad 	.word	0x080071ad
 80070f8:	080071ad 	.word	0x080071ad
 80070fc:	080071ad 	.word	0x080071ad
 8007100:	080071ad 	.word	0x080071ad
 8007104:	08007189 	.word	0x08007189
 8007108:	080071ad 	.word	0x080071ad
 800710c:	080071ad 	.word	0x080071ad
 8007110:	080071ad 	.word	0x080071ad
 8007114:	080071ad 	.word	0x080071ad
 8007118:	080071ad 	.word	0x080071ad
 800711c:	080071ad 	.word	0x080071ad
 8007120:	080071ad 	.word	0x080071ad
 8007124:	0800719b 	.word	0x0800719b
 8007128:	080071ad 	.word	0x080071ad
 800712c:	080071ad 	.word	0x080071ad
 8007130:	080071ad 	.word	0x080071ad
 8007134:	080071ad 	.word	0x080071ad
 8007138:	080071ad 	.word	0x080071ad
 800713c:	080071ad 	.word	0x080071ad
 8007140:	080071ad 	.word	0x080071ad
 8007144:	080071c1 	.word	0x080071c1
 8007148:	080071ad 	.word	0x080071ad
 800714c:	080071ad 	.word	0x080071ad
 8007150:	080071ad 	.word	0x080071ad
 8007154:	080071ad 	.word	0x080071ad
 8007158:	080071ad 	.word	0x080071ad
 800715c:	080071ad 	.word	0x080071ad
 8007160:	080071ad 	.word	0x080071ad
 8007164:	080071c1 	.word	0x080071c1
 8007168:	080071ad 	.word	0x080071ad
 800716c:	080071ad 	.word	0x080071ad
 8007170:	080071ad 	.word	0x080071ad
 8007174:	080071ad 	.word	0x080071ad
 8007178:	080071ad 	.word	0x080071ad
 800717c:	080071ad 	.word	0x080071ad
 8007180:	080071ad 	.word	0x080071ad
 8007184:	080071c1 	.word	0x080071c1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3304      	adds	r3, #4
 800718c:	2101      	movs	r1, #1
 800718e:	4618      	mov	r0, r3
 8007190:	f001 fc1e 	bl	80089d0 <RCCEx_PLL2_Config>
 8007194:	4603      	mov	r3, r0
 8007196:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007198:	e013      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	3324      	adds	r3, #36	; 0x24
 800719e:	2101      	movs	r1, #1
 80071a0:	4618      	mov	r0, r3
 80071a2:	f001 fcc7 	bl	8008b34 <RCCEx_PLL3_Config>
 80071a6:	4603      	mov	r3, r0
 80071a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80071aa:	e00a      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	75fb      	strb	r3, [r7, #23]
      break;
 80071b0:	e007      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80071b2:	bf00      	nop
 80071b4:	58024400 	.word	0x58024400
 80071b8:	58024800 	.word	0x58024800
 80071bc:	00ffffcf 	.word	0x00ffffcf
      break;
 80071c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d109      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80071c8:	4b96      	ldr	r3, [pc, #600]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071cc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071d4:	4993      	ldr	r1, [pc, #588]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	654b      	str	r3, [r1, #84]	; 0x54
 80071da:	e001      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0302 	and.w	r3, r3, #2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d038      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f0:	2b05      	cmp	r3, #5
 80071f2:	d821      	bhi.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80071f4:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80071f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fa:	bf00      	nop
 80071fc:	0800723f 	.word	0x0800723f
 8007200:	08007215 	.word	0x08007215
 8007204:	08007227 	.word	0x08007227
 8007208:	0800723f 	.word	0x0800723f
 800720c:	0800723f 	.word	0x0800723f
 8007210:	0800723f 	.word	0x0800723f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3304      	adds	r3, #4
 8007218:	2101      	movs	r1, #1
 800721a:	4618      	mov	r0, r3
 800721c:	f001 fbd8 	bl	80089d0 <RCCEx_PLL2_Config>
 8007220:	4603      	mov	r3, r0
 8007222:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007224:	e00c      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3324      	adds	r3, #36	; 0x24
 800722a:	2101      	movs	r1, #1
 800722c:	4618      	mov	r0, r3
 800722e:	f001 fc81 	bl	8008b34 <RCCEx_PLL3_Config>
 8007232:	4603      	mov	r3, r0
 8007234:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007236:	e003      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	75fb      	strb	r3, [r7, #23]
      break;
 800723c:	e000      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800723e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d109      	bne.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007246:	4b77      	ldr	r3, [pc, #476]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724a:	f023 0207 	bic.w	r2, r3, #7
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007252:	4974      	ldr	r1, [pc, #464]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007254:	4313      	orrs	r3, r2
 8007256:	654b      	str	r3, [r1, #84]	; 0x54
 8007258:	e001      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725a:	7dfb      	ldrb	r3, [r7, #23]
 800725c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0304 	and.w	r3, r3, #4
 8007266:	2b00      	cmp	r3, #0
 8007268:	d03a      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007270:	2b05      	cmp	r3, #5
 8007272:	d821      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007274:	a201      	add	r2, pc, #4	; (adr r2, 800727c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	080072bf 	.word	0x080072bf
 8007280:	08007295 	.word	0x08007295
 8007284:	080072a7 	.word	0x080072a7
 8007288:	080072bf 	.word	0x080072bf
 800728c:	080072bf 	.word	0x080072bf
 8007290:	080072bf 	.word	0x080072bf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3304      	adds	r3, #4
 8007298:	2101      	movs	r1, #1
 800729a:	4618      	mov	r0, r3
 800729c:	f001 fb98 	bl	80089d0 <RCCEx_PLL2_Config>
 80072a0:	4603      	mov	r3, r0
 80072a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80072a4:	e00c      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	3324      	adds	r3, #36	; 0x24
 80072aa:	2101      	movs	r1, #1
 80072ac:	4618      	mov	r0, r3
 80072ae:	f001 fc41 	bl	8008b34 <RCCEx_PLL3_Config>
 80072b2:	4603      	mov	r3, r0
 80072b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80072b6:	e003      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	75fb      	strb	r3, [r7, #23]
      break;
 80072bc:	e000      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80072be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072c6:	4b57      	ldr	r3, [pc, #348]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80072c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ca:	f023 0207 	bic.w	r2, r3, #7
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d4:	4953      	ldr	r1, [pc, #332]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	658b      	str	r3, [r1, #88]	; 0x58
 80072da:	e001      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0320 	and.w	r3, r3, #32
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d04b      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072f6:	d02e      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80072f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072fc:	d828      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80072fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007302:	d02a      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007308:	d822      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800730a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800730e:	d026      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007310:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007314:	d81c      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800731a:	d010      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800731c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007320:	d816      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01d      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800732a:	d111      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3304      	adds	r3, #4
 8007330:	2100      	movs	r1, #0
 8007332:	4618      	mov	r0, r3
 8007334:	f001 fb4c 	bl	80089d0 <RCCEx_PLL2_Config>
 8007338:	4603      	mov	r3, r0
 800733a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800733c:	e012      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3324      	adds	r3, #36	; 0x24
 8007342:	2102      	movs	r1, #2
 8007344:	4618      	mov	r0, r3
 8007346:	f001 fbf5 	bl	8008b34 <RCCEx_PLL3_Config>
 800734a:	4603      	mov	r3, r0
 800734c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800734e:	e009      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	75fb      	strb	r3, [r7, #23]
      break;
 8007354:	e006      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007356:	bf00      	nop
 8007358:	e004      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800735a:	bf00      	nop
 800735c:	e002      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800735e:	bf00      	nop
 8007360:	e000      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10a      	bne.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800736a:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007378:	492a      	ldr	r1, [pc, #168]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800737a:	4313      	orrs	r3, r2
 800737c:	654b      	str	r3, [r1, #84]	; 0x54
 800737e:	e001      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	d04d      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007396:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800739a:	d02e      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800739c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80073a0:	d828      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80073a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a6:	d02a      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80073a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ac:	d822      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80073ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073b2:	d026      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80073b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073b8:	d81c      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80073ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073be:	d010      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80073c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c4:	d816      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d01d      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80073ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ce:	d111      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3304      	adds	r3, #4
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f001 fafa 	bl	80089d0 <RCCEx_PLL2_Config>
 80073dc:	4603      	mov	r3, r0
 80073de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80073e0:	e012      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3324      	adds	r3, #36	; 0x24
 80073e6:	2102      	movs	r1, #2
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 fba3 	bl	8008b34 <RCCEx_PLL3_Config>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80073f2:	e009      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	75fb      	strb	r3, [r7, #23]
      break;
 80073f8:	e006      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80073fa:	bf00      	nop
 80073fc:	e004      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80073fe:	bf00      	nop
 8007400:	e002      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007402:	bf00      	nop
 8007404:	e000      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10c      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800740e:	4b05      	ldr	r3, [pc, #20]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007412:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800741c:	4901      	ldr	r1, [pc, #4]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800741e:	4313      	orrs	r3, r2
 8007420:	658b      	str	r3, [r1, #88]	; 0x58
 8007422:	e003      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007424:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007434:	2b00      	cmp	r3, #0
 8007436:	d04b      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800743e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007442:	d02e      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007444:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007448:	d828      	bhi.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800744a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800744e:	d02a      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007454:	d822      	bhi.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007456:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800745a:	d026      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800745c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007460:	d81c      	bhi.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007466:	d010      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800746c:	d816      	bhi.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800746e:	2b00      	cmp	r3, #0
 8007470:	d01d      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007476:	d111      	bne.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3304      	adds	r3, #4
 800747c:	2100      	movs	r1, #0
 800747e:	4618      	mov	r0, r3
 8007480:	f001 faa6 	bl	80089d0 <RCCEx_PLL2_Config>
 8007484:	4603      	mov	r3, r0
 8007486:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007488:	e012      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3324      	adds	r3, #36	; 0x24
 800748e:	2102      	movs	r1, #2
 8007490:	4618      	mov	r0, r3
 8007492:	f001 fb4f 	bl	8008b34 <RCCEx_PLL3_Config>
 8007496:	4603      	mov	r3, r0
 8007498:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800749a:	e009      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	75fb      	strb	r3, [r7, #23]
      break;
 80074a0:	e006      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80074a2:	bf00      	nop
 80074a4:	e004      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80074a6:	bf00      	nop
 80074a8:	e002      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80074aa:	bf00      	nop
 80074ac:	e000      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80074ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10a      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80074b6:	4b9d      	ldr	r3, [pc, #628]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074c4:	4999      	ldr	r1, [pc, #612]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	658b      	str	r3, [r1, #88]	; 0x58
 80074ca:	e001      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0308 	and.w	r3, r3, #8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d01a      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e6:	d10a      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3324      	adds	r3, #36	; 0x24
 80074ec:	2102      	movs	r1, #2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f001 fb20 	bl	8008b34 <RCCEx_PLL3_Config>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80074fe:	4b8b      	ldr	r3, [pc, #556]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007502:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800750c:	4987      	ldr	r1, [pc, #540]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800750e:	4313      	orrs	r3, r2
 8007510:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01a      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007528:	d10a      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3324      	adds	r3, #36	; 0x24
 800752e:	2102      	movs	r1, #2
 8007530:	4618      	mov	r0, r3
 8007532:	f001 faff 	bl	8008b34 <RCCEx_PLL3_Config>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007540:	4b7a      	ldr	r3, [pc, #488]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800754e:	4977      	ldr	r1, [pc, #476]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007550:	4313      	orrs	r3, r2
 8007552:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d034      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800756a:	d01d      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800756c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007570:	d817      	bhi.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757a:	d009      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800757c:	e011      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3304      	adds	r3, #4
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f001 fa23 	bl	80089d0 <RCCEx_PLL2_Config>
 800758a:	4603      	mov	r3, r0
 800758c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800758e:	e00c      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3324      	adds	r3, #36	; 0x24
 8007594:	2102      	movs	r1, #2
 8007596:	4618      	mov	r0, r3
 8007598:	f001 facc 	bl	8008b34 <RCCEx_PLL3_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80075a0:	e003      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	75fb      	strb	r3, [r7, #23]
      break;
 80075a6:	e000      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80075a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075b0:	4b5e      	ldr	r3, [pc, #376]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80075be:	495b      	ldr	r1, [pc, #364]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	658b      	str	r3, [r1, #88]	; 0x58
 80075c4:	e001      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d033      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075e0:	d01c      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80075e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075e6:	d816      	bhi.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80075e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ec:	d003      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80075ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075f2:	d007      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80075f4:	e00f      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f6:	4b4d      	ldr	r3, [pc, #308]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	4a4c      	ldr	r2, [pc, #304]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007600:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007602:	e00c      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3324      	adds	r3, #36	; 0x24
 8007608:	2101      	movs	r1, #1
 800760a:	4618      	mov	r0, r3
 800760c:	f001 fa92 	bl	8008b34 <RCCEx_PLL3_Config>
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007614:	e003      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	75fb      	strb	r3, [r7, #23]
      break;
 800761a:	e000      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800761c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10a      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007624:	4b41      	ldr	r3, [pc, #260]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007628:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007632:	493e      	ldr	r1, [pc, #248]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007634:	4313      	orrs	r3, r2
 8007636:	654b      	str	r3, [r1, #84]	; 0x54
 8007638:	e001      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d029      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007656:	d007      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007658:	e00f      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800765a:	4b34      	ldr	r3, [pc, #208]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800765c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765e:	4a33      	ldr	r2, [pc, #204]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007664:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007666:	e00b      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3304      	adds	r3, #4
 800766c:	2102      	movs	r1, #2
 800766e:	4618      	mov	r0, r3
 8007670:	f001 f9ae 	bl	80089d0 <RCCEx_PLL2_Config>
 8007674:	4603      	mov	r3, r0
 8007676:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007678:	e002      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	75fb      	strb	r3, [r7, #23]
      break;
 800767e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d109      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007686:	4b29      	ldr	r3, [pc, #164]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800768a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007692:	4926      	ldr	r1, [pc, #152]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007694:	4313      	orrs	r3, r2
 8007696:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007698:	e001      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
 800769c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3324      	adds	r3, #36	; 0x24
 80076ae:	2102      	movs	r1, #2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f001 fa3f 	bl	8008b34 <RCCEx_PLL3_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d033      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076d4:	d017      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80076d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076da:	d811      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80076dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076e0:	d013      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80076e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076e6:	d80b      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d010      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80076ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076f0:	d106      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076f2:	4b0e      	ldr	r3, [pc, #56]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	4a0d      	ldr	r2, [pc, #52]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80076fe:	e007      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	e004      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007706:	bf00      	nop
 8007708:	e002      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800770a:	bf00      	nop
 800770c:	e000      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800770e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10c      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007716:	4b05      	ldr	r3, [pc, #20]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007722:	4902      	ldr	r1, [pc, #8]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007724:	4313      	orrs	r3, r2
 8007726:	654b      	str	r3, [r1, #84]	; 0x54
 8007728:	e004      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800772a:	bf00      	nop
 800772c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d008      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007740:	4b31      	ldr	r3, [pc, #196]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007744:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774c:	492e      	ldr	r1, [pc, #184]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800774e:	4313      	orrs	r3, r2
 8007750:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d009      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800775e:	4b2a      	ldr	r3, [pc, #168]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800776c:	4926      	ldr	r1, [pc, #152]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800776e:	4313      	orrs	r3, r2
 8007770:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d008      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800777e:	4b22      	ldr	r3, [pc, #136]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007782:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800778a:	491f      	ldr	r1, [pc, #124]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800778c:	4313      	orrs	r3, r2
 800778e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00d      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800779c:	4b1a      	ldr	r3, [pc, #104]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	4a19      	ldr	r2, [pc, #100]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077a6:	6113      	str	r3, [r2, #16]
 80077a8:	4b17      	ldr	r3, [pc, #92]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80077b2:	4915      	ldr	r1, [pc, #84]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	da08      	bge.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80077c0:	4b11      	ldr	r3, [pc, #68]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077cc:	490e      	ldr	r1, [pc, #56]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d009      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80077de:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ec:	4906      	ldr	r1, [pc, #24]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80077f2:	7dbb      	ldrb	r3, [r7, #22]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	e000      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	58024400 	.word	0x58024400

0800780c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b090      	sub	sp, #64	; 0x40
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800781a:	f040 8095 	bne.w	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800781e:	4b97      	ldr	r3, [pc, #604]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007822:	f003 0307 	and.w	r3, r3, #7
 8007826:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	2b04      	cmp	r3, #4
 800782c:	f200 8088 	bhi.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007830:	a201      	add	r2, pc, #4	; (adr r2, 8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007836:	bf00      	nop
 8007838:	0800784d 	.word	0x0800784d
 800783c:	08007875 	.word	0x08007875
 8007840:	0800789d 	.word	0x0800789d
 8007844:	08007939 	.word	0x08007939
 8007848:	080078c5 	.word	0x080078c5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800784c:	4b8b      	ldr	r3, [pc, #556]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007858:	d108      	bne.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800785a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800785e:	4618      	mov	r0, r3
 8007860:	f000 ff64 	bl	800872c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007868:	f000 bc94 	b.w	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007870:	f000 bc90 	b.w	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007874:	4b81      	ldr	r3, [pc, #516]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800787c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007880:	d108      	bne.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007882:	f107 0318 	add.w	r3, r7, #24
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fca8 	bl	80081dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007890:	f000 bc80 	b.w	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007898:	f000 bc7c 	b.w	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800789c:	4b77      	ldr	r3, [pc, #476]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078a8:	d108      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078aa:	f107 030c 	add.w	r3, r7, #12
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fde8 	bl	8008484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078b8:	f000 bc6c 	b.w	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078c0:	f000 bc68 	b.w	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078c4:	4b6d      	ldr	r3, [pc, #436]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078cc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078ce:	4b6b      	ldr	r3, [pc, #428]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d10c      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80078da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d109      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078e0:	4b66      	ldr	r3, [pc, #408]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	08db      	lsrs	r3, r3, #3
 80078e6:	f003 0303 	and.w	r3, r3, #3
 80078ea:	4a65      	ldr	r2, [pc, #404]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80078ec:	fa22 f303 	lsr.w	r3, r2, r3
 80078f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078f2:	e01f      	b.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078f4:	4b61      	ldr	r3, [pc, #388]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007900:	d106      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007908:	d102      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800790a:	4b5e      	ldr	r3, [pc, #376]	; (8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800790c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800790e:	e011      	b.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007910:	4b5a      	ldr	r3, [pc, #360]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800791c:	d106      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800791e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007924:	d102      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007926:	4b58      	ldr	r3, [pc, #352]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800792a:	e003      	b.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007930:	f000 bc30 	b.w	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007934:	f000 bc2e 	b.w	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007938:	4b54      	ldr	r3, [pc, #336]	; (8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800793a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800793c:	f000 bc2a 	b.w	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007944:	f000 bc26 	b.w	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800794e:	f040 809f 	bne.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007952:	4b4a      	ldr	r3, [pc, #296]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007956:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800795a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007962:	d04d      	beq.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800796a:	f200 8084 	bhi.w	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	2bc0      	cmp	r3, #192	; 0xc0
 8007972:	d07d      	beq.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	2bc0      	cmp	r3, #192	; 0xc0
 8007978:	d87d      	bhi.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	2b80      	cmp	r3, #128	; 0x80
 800797e:	d02d      	beq.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	2b80      	cmp	r3, #128	; 0x80
 8007984:	d877      	bhi.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	2b40      	cmp	r3, #64	; 0x40
 8007990:	d012      	beq.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8007992:	e070      	b.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007994:	4b39      	ldr	r3, [pc, #228]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800799c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079a0:	d107      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fec0 	bl	800872c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079b0:	e3f0      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079b6:	e3ed      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079b8:	4b30      	ldr	r3, [pc, #192]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079c4:	d107      	bne.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079c6:	f107 0318 	add.w	r3, r7, #24
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fc06 	bl	80081dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079d4:	e3de      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079da:	e3db      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079dc:	4b27      	ldr	r3, [pc, #156]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079e8:	d107      	bne.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079ea:	f107 030c 	add.w	r3, r7, #12
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 fd48 	bl	8008484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079f8:	e3cc      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079fe:	e3c9      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a00:	4b1e      	ldr	r3, [pc, #120]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a0a:	4b1c      	ldr	r3, [pc, #112]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0304 	and.w	r3, r3, #4
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d10c      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8007a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d109      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a1c:	4b17      	ldr	r3, [pc, #92]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	08db      	lsrs	r3, r3, #3
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	4a16      	ldr	r2, [pc, #88]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007a28:	fa22 f303 	lsr.w	r3, r2, r3
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a2e:	e01e      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a30:	4b12      	ldr	r3, [pc, #72]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a3c:	d106      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a44:	d102      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007a46:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a4a:	e010      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a4c:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a58:	d106      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a60:	d102      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007a62:	4b09      	ldr	r3, [pc, #36]	; (8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a66:	e002      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007a6c:	e392      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007a6e:	e391      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a70:	4b06      	ldr	r3, [pc, #24]	; (8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a74:	e38e      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a7a:	e38b      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007a7c:	58024400 	.word	0x58024400
 8007a80:	03d09000 	.word	0x03d09000
 8007a84:	003d0900 	.word	0x003d0900
 8007a88:	017d7840 	.word	0x017d7840
 8007a8c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a96:	f040 809c 	bne.w	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007a9a:	4b9d      	ldr	r3, [pc, #628]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007aa2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007aaa:	d054      	beq.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ab2:	f200 808b 	bhi.w	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007abc:	f000 8083 	beq.w	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ac6:	f200 8081 	bhi.w	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ad0:	d02f      	beq.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ad8:	d878      	bhi.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d004      	beq.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ae6:	d012      	beq.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007ae8:	e070      	b.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007aea:	4b89      	ldr	r3, [pc, #548]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007af2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007af6:	d107      	bne.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fe15 	bl	800872c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b06:	e345      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b0c:	e342      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b0e:	4b80      	ldr	r3, [pc, #512]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b1a:	d107      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b1c:	f107 0318 	add.w	r3, r7, #24
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fb5b 	bl	80081dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b2a:	e333      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b30:	e330      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b32:	4b77      	ldr	r3, [pc, #476]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b3e:	d107      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b40:	f107 030c 	add.w	r3, r7, #12
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fc9d 	bl	8008484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b4e:	e321      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b54:	e31e      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b56:	4b6e      	ldr	r3, [pc, #440]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b5e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b60:	4b6b      	ldr	r3, [pc, #428]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d10c      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d109      	bne.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b72:	4b67      	ldr	r3, [pc, #412]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	08db      	lsrs	r3, r3, #3
 8007b78:	f003 0303 	and.w	r3, r3, #3
 8007b7c:	4a65      	ldr	r2, [pc, #404]	; (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b84:	e01e      	b.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b86:	4b62      	ldr	r3, [pc, #392]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b92:	d106      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b9a:	d102      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007b9c:	4b5e      	ldr	r3, [pc, #376]	; (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ba0:	e010      	b.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ba2:	4b5b      	ldr	r3, [pc, #364]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bae:	d106      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bb6:	d102      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007bb8:	4b58      	ldr	r3, [pc, #352]	; (8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bbc:	e002      	b.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007bc2:	e2e7      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007bc4:	e2e6      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007bc6:	4b56      	ldr	r3, [pc, #344]	; (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bca:	e2e3      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bd0:	e2e0      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bd8:	f040 80a7 	bne.w	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007bdc:	4b4c      	ldr	r3, [pc, #304]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007be4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bec:	d055      	beq.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8007bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bf4:	f200 8096 	bhi.w	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bfe:	f000 8084 	beq.w	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c08:	f200 808c 	bhi.w	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c12:	d030      	beq.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c1a:	f200 8083 	bhi.w	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d004      	beq.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c2a:	d012      	beq.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007c2c:	e07a      	b.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c2e:	4b38      	ldr	r3, [pc, #224]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c3a:	d107      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 fd73 	bl	800872c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c4a:	e2a3      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c50:	e2a0      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c52:	4b2f      	ldr	r3, [pc, #188]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c5e:	d107      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c60:	f107 0318 	add.w	r3, r7, #24
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fab9 	bl	80081dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007c6e:	e291      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c74:	e28e      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c76:	4b26      	ldr	r3, [pc, #152]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c82:	d107      	bne.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c84:	f107 030c 	add.w	r3, r7, #12
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 fbfb 	bl	8008484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c92:	e27f      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c98:	e27c      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c9a:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ca2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ca4:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d10c      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d109      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cb6:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	08db      	lsrs	r3, r3, #3
 8007cbc:	f003 0303 	and.w	r3, r3, #3
 8007cc0:	4a14      	ldr	r2, [pc, #80]	; (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cc8:	e01e      	b.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cca:	4b11      	ldr	r3, [pc, #68]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd6:	d106      	bne.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8007cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cde:	d102      	bne.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007ce0:	4b0d      	ldr	r3, [pc, #52]	; (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ce4:	e010      	b.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ce6:	4b0a      	ldr	r3, [pc, #40]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cf2:	d106      	bne.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cfa:	d102      	bne.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007cfc:	4b07      	ldr	r3, [pc, #28]	; (8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d00:	e002      	b.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007d02:	2300      	movs	r3, #0
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007d06:	e245      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007d08:	e244      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d0a:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d0e:	e241      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007d10:	58024400 	.word	0x58024400
 8007d14:	03d09000 	.word	0x03d09000
 8007d18:	003d0900 	.word	0x003d0900
 8007d1c:	017d7840 	.word	0x017d7840
 8007d20:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d28:	e234      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d30:	f040 809c 	bne.w	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007d34:	4b9b      	ldr	r3, [pc, #620]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d38:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007d3c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d44:	d054      	beq.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d4c:	f200 808b 	bhi.w	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d56:	f000 8083 	beq.w	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d60:	f200 8081 	bhi.w	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d6a:	d02f      	beq.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d72:	d878      	bhi.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d004      	beq.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d80:	d012      	beq.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8007d82:	e070      	b.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d84:	4b87      	ldr	r3, [pc, #540]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d90:	d107      	bne.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 fcc8 	bl	800872c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007da0:	e1f8      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007da6:	e1f5      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007da8:	4b7e      	ldr	r3, [pc, #504]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007db4:	d107      	bne.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007db6:	f107 0318 	add.w	r3, r7, #24
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 fa0e 	bl	80081dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007dc4:	e1e6      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dca:	e1e3      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007dcc:	4b75      	ldr	r3, [pc, #468]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd8:	d107      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dda:	f107 030c 	add.w	r3, r7, #12
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fb50 	bl	8008484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007de8:	e1d4      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dee:	e1d1      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007df0:	4b6c      	ldr	r3, [pc, #432]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007df8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dfa:	4b6a      	ldr	r3, [pc, #424]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0304 	and.w	r3, r3, #4
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d10c      	bne.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d109      	bne.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e0c:	4b65      	ldr	r3, [pc, #404]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	08db      	lsrs	r3, r3, #3
 8007e12:	f003 0303 	and.w	r3, r3, #3
 8007e16:	4a64      	ldr	r2, [pc, #400]	; (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8007e18:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e1e:	e01e      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e20:	4b60      	ldr	r3, [pc, #384]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e2c:	d106      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e34:	d102      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007e36:	4b5d      	ldr	r3, [pc, #372]	; (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e3a:	e010      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e3c:	4b59      	ldr	r3, [pc, #356]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e48:	d106      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e50:	d102      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007e52:	4b57      	ldr	r3, [pc, #348]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e56:	e002      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007e5c:	e19a      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007e5e:	e199      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e60:	4b54      	ldr	r3, [pc, #336]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e64:	e196      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e6a:	e193      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e72:	d173      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007e74:	4b4b      	ldr	r3, [pc, #300]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e7c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e84:	d02f      	beq.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e8c:	d863      	bhi.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d004      	beq.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e9a:	d012      	beq.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8007e9c:	e05b      	b.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e9e:	4b41      	ldr	r3, [pc, #260]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ea6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eaa:	d107      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eac:	f107 0318 	add.w	r3, r7, #24
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 f993 	bl	80081dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007eba:	e16b      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec0:	e168      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ec2:	4b38      	ldr	r3, [pc, #224]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ece:	d107      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ed0:	f107 030c 	add.w	r3, r7, #12
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fad5 	bl	8008484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ede:	e159      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ee4:	e156      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ee6:	4b2f      	ldr	r3, [pc, #188]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007eee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ef0:	4b2c      	ldr	r3, [pc, #176]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d10c      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8007efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d109      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f02:	4b28      	ldr	r3, [pc, #160]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	08db      	lsrs	r3, r3, #3
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	4a26      	ldr	r2, [pc, #152]	; (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8007f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f14:	e01e      	b.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f16:	4b23      	ldr	r3, [pc, #140]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f22:	d106      	bne.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8007f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f2a:	d102      	bne.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007f2c:	4b1f      	ldr	r3, [pc, #124]	; (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f30:	e010      	b.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f32:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f3e:	d106      	bne.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8007f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f46:	d102      	bne.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007f48:	4b19      	ldr	r3, [pc, #100]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f4c:	e002      	b.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007f52:	e11f      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007f54:	e11e      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f5a:	e11b      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f62:	d13e      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007f64:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f6c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d004      	beq.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f7a:	d01d      	beq.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007f7c:	e02e      	b.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f7e:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f8a:	d107      	bne.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fbcb 	bl	800872c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f9a:	e0fb      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fa0:	e0f8      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007fa2:	bf00      	nop
 8007fa4:	58024400 	.word	0x58024400
 8007fa8:	03d09000 	.word	0x03d09000
 8007fac:	003d0900 	.word	0x003d0900
 8007fb0:	017d7840 	.word	0x017d7840
 8007fb4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fb8:	4b79      	ldr	r3, [pc, #484]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fc4:	d107      	bne.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fc6:	f107 0318 	add.w	r3, r7, #24
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 f906 	bl	80081dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007fd4:	e0de      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fda:	e0db      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fe0:	e0d8      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fe8:	f040 8085 	bne.w	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007fec:	4b6c      	ldr	r3, [pc, #432]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007ff4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ffc:	d06b      	beq.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008004:	d874      	bhi.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800800c:	d056      	beq.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008014:	d86c      	bhi.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800801c:	d03b      	beq.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008024:	d864      	bhi.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800802c:	d021      	beq.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008034:	d85c      	bhi.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800803c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008042:	d004      	beq.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008044:	e054      	b.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008046:	f000 f8b3 	bl	80081b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800804a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800804c:	e0a2      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800804e:	4b54      	ldr	r3, [pc, #336]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800805a:	d107      	bne.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800805c:	f107 0318 	add.w	r3, r7, #24
 8008060:	4618      	mov	r0, r3
 8008062:	f000 f8bb 	bl	80081dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800806a:	e093      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008070:	e090      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008072:	4b4b      	ldr	r3, [pc, #300]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800807a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800807e:	d107      	bne.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008080:	f107 030c 	add.w	r3, r7, #12
 8008084:	4618      	mov	r0, r3
 8008086:	f000 f9fd 	bl	8008484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800808e:	e081      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008094:	e07e      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008096:	4b42      	ldr	r3, [pc, #264]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d109      	bne.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080a2:	4b3f      	ldr	r3, [pc, #252]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	08db      	lsrs	r3, r3, #3
 80080a8:	f003 0303 	and.w	r3, r3, #3
 80080ac:	4a3d      	ldr	r2, [pc, #244]	; (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80080ae:	fa22 f303 	lsr.w	r3, r2, r3
 80080b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080b4:	e06e      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80080b6:	2300      	movs	r3, #0
 80080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ba:	e06b      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80080bc:	4b38      	ldr	r3, [pc, #224]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c8:	d102      	bne.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 80080ca:	4b37      	ldr	r3, [pc, #220]	; (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80080cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080ce:	e061      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d4:	e05e      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80080d6:	4b32      	ldr	r3, [pc, #200]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080e2:	d102      	bne.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80080e4:	4b31      	ldr	r3, [pc, #196]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80080e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080e8:	e054      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ee:	e051      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80080f0:	2300      	movs	r3, #0
 80080f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080f4:	e04e      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080fc:	d148      	bne.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80080fe:	4b28      	ldr	r3, [pc, #160]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008102:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008106:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800810e:	d02a      	beq.n	8008166 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008116:	d838      	bhi.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	2b00      	cmp	r3, #0
 800811c:	d004      	beq.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008124:	d00d      	beq.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8008126:	e030      	b.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008128:	4b1d      	ldr	r3, [pc, #116]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008134:	d102      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8008136:	4b1d      	ldr	r3, [pc, #116]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008138:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800813a:	e02b      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800813c:	2300      	movs	r3, #0
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008140:	e028      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008142:	4b17      	ldr	r3, [pc, #92]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800814a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800814e:	d107      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fae9 	bl	800872c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800815e:	e019      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008160:	2300      	movs	r3, #0
 8008162:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008164:	e016      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008166:	4b0e      	ldr	r3, [pc, #56]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800816e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008172:	d107      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008174:	f107 0318 	add.w	r3, r7, #24
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f82f 	bl	80081dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008182:	e007      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008188:	e004      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800818e:	e001      	b.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008196:	4618      	mov	r0, r3
 8008198:	3740      	adds	r7, #64	; 0x40
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	58024400 	.word	0x58024400
 80081a4:	03d09000 	.word	0x03d09000
 80081a8:	003d0900 	.word	0x003d0900
 80081ac:	017d7840 	.word	0x017d7840

080081b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80081b4:	f7fe fb88 	bl	80068c8 <HAL_RCC_GetHCLKFreq>
 80081b8:	4602      	mov	r2, r0
 80081ba:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	091b      	lsrs	r3, r3, #4
 80081c0:	f003 0307 	and.w	r3, r3, #7
 80081c4:	4904      	ldr	r1, [pc, #16]	; (80081d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80081c6:	5ccb      	ldrb	r3, [r1, r3]
 80081c8:	f003 031f 	and.w	r3, r3, #31
 80081cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	58024400 	.word	0x58024400
 80081d8:	0800bab4 	.word	0x0800bab4

080081dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80081dc:	b480      	push	{r7}
 80081de:	b089      	sub	sp, #36	; 0x24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081e4:	4ba1      	ldr	r3, [pc, #644]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e8:	f003 0303 	and.w	r3, r3, #3
 80081ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80081ee:	4b9f      	ldr	r3, [pc, #636]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f2:	0b1b      	lsrs	r3, r3, #12
 80081f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081fa:	4b9c      	ldr	r3, [pc, #624]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fe:	091b      	lsrs	r3, r3, #4
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008206:	4b99      	ldr	r3, [pc, #612]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820a:	08db      	lsrs	r3, r3, #3
 800820c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	fb02 f303 	mul.w	r3, r2, r3
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 8111 	beq.w	800844c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2b02      	cmp	r3, #2
 800822e:	f000 8083 	beq.w	8008338 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	2b02      	cmp	r3, #2
 8008236:	f200 80a1 	bhi.w	800837c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d056      	beq.n	80082f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008246:	e099      	b.n	800837c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008248:	4b88      	ldr	r3, [pc, #544]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0320 	and.w	r3, r3, #32
 8008250:	2b00      	cmp	r3, #0
 8008252:	d02d      	beq.n	80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008254:	4b85      	ldr	r3, [pc, #532]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	08db      	lsrs	r3, r3, #3
 800825a:	f003 0303 	and.w	r3, r3, #3
 800825e:	4a84      	ldr	r2, [pc, #528]	; (8008470 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008260:	fa22 f303 	lsr.w	r3, r2, r3
 8008264:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	ee07 3a90 	vmov	s15, r3
 800826c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800827e:	4b7b      	ldr	r3, [pc, #492]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800828e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008292:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800829e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80082ae:	e087      	b.n	80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008478 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80082be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c2:	4b6a      	ldr	r3, [pc, #424]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082f2:	e065      	b.n	80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800847c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008306:	4b59      	ldr	r3, [pc, #356]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008316:	ed97 6a03 	vldr	s12, [r7, #12]
 800831a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800831e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800832a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800832e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008332:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008336:	e043      	b.n	80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008342:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008480 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800834a:	4b48      	ldr	r3, [pc, #288]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800834c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800835a:	ed97 6a03 	vldr	s12, [r7, #12]
 800835e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800836a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800836e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800837a:	e021      	b.n	80083c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008386:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800847c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800838a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800838e:	4b37      	ldr	r3, [pc, #220]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839e:	ed97 6a03 	vldr	s12, [r7, #12]
 80083a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80083c0:	4b2a      	ldr	r3, [pc, #168]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	0a5b      	lsrs	r3, r3, #9
 80083c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083da:	edd7 6a07 	vldr	s13, [r7, #28]
 80083de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e6:	ee17 2a90 	vmov	r2, s15
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80083ee:	4b1f      	ldr	r3, [pc, #124]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f2:	0c1b      	lsrs	r3, r3, #16
 80083f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083f8:	ee07 3a90 	vmov	s15, r3
 80083fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008408:	edd7 6a07 	vldr	s13, [r7, #28]
 800840c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008414:	ee17 2a90 	vmov	r2, s15
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800841c:	4b13      	ldr	r3, [pc, #76]	; (800846c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008420:	0e1b      	lsrs	r3, r3, #24
 8008422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008426:	ee07 3a90 	vmov	s15, r3
 800842a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008436:	edd7 6a07 	vldr	s13, [r7, #28]
 800843a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800843e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008442:	ee17 2a90 	vmov	r2, s15
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800844a:	e008      	b.n	800845e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	609a      	str	r2, [r3, #8]
}
 800845e:	bf00      	nop
 8008460:	3724      	adds	r7, #36	; 0x24
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	58024400 	.word	0x58024400
 8008470:	03d09000 	.word	0x03d09000
 8008474:	46000000 	.word	0x46000000
 8008478:	4c742400 	.word	0x4c742400
 800847c:	4a742400 	.word	0x4a742400
 8008480:	4bbebc20 	.word	0x4bbebc20

08008484 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008484:	b480      	push	{r7}
 8008486:	b089      	sub	sp, #36	; 0x24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800848c:	4ba1      	ldr	r3, [pc, #644]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800848e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008490:	f003 0303 	and.w	r3, r3, #3
 8008494:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008496:	4b9f      	ldr	r3, [pc, #636]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849a:	0d1b      	lsrs	r3, r3, #20
 800849c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80084a2:	4b9c      	ldr	r3, [pc, #624]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a6:	0a1b      	lsrs	r3, r3, #8
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80084ae:	4b99      	ldr	r3, [pc, #612]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b2:	08db      	lsrs	r3, r3, #3
 80084b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	fb02 f303 	mul.w	r3, r2, r3
 80084be:	ee07 3a90 	vmov	s15, r3
 80084c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8111 	beq.w	80086f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	f000 8083 	beq.w	80085e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	2b02      	cmp	r3, #2
 80084de:	f200 80a1 	bhi.w	8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d003      	beq.n	80084f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d056      	beq.n	800859c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80084ee:	e099      	b.n	8008624 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084f0:	4b88      	ldr	r3, [pc, #544]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0320 	and.w	r3, r3, #32
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d02d      	beq.n	8008558 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084fc:	4b85      	ldr	r3, [pc, #532]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	08db      	lsrs	r3, r3, #3
 8008502:	f003 0303 	and.w	r3, r3, #3
 8008506:	4a84      	ldr	r2, [pc, #528]	; (8008718 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008508:	fa22 f303 	lsr.w	r3, r2, r3
 800850c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	ee07 3a90 	vmov	s15, r3
 8008514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008526:	4b7b      	ldr	r3, [pc, #492]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008536:	ed97 6a03 	vldr	s12, [r7, #12]
 800853a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800871c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800853e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800854a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800854e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008552:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008556:	e087      	b.n	8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008562:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008720 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800856a:	4b6a      	ldr	r3, [pc, #424]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008572:	ee07 3a90 	vmov	s15, r3
 8008576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800857a:	ed97 6a03 	vldr	s12, [r7, #12]
 800857e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800871c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800858a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800858e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008596:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800859a:	e065      	b.n	8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ae:	4b59      	ldr	r3, [pc, #356]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085be:	ed97 6a03 	vldr	s12, [r7, #12]
 80085c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800871c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085de:	e043      	b.n	8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008728 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80085ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f2:	4b48      	ldr	r3, [pc, #288]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008602:	ed97 6a03 	vldr	s12, [r7, #12]
 8008606:	eddf 5a45 	vldr	s11, [pc, #276]	; 800871c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800860a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800860e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008622:	e021      	b.n	8008668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008636:	4b37      	ldr	r3, [pc, #220]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008646:	ed97 6a03 	vldr	s12, [r7, #12]
 800864a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800871c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800864e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800865a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800865e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008662:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008666:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008668:	4b2a      	ldr	r3, [pc, #168]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800866a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866c:	0a5b      	lsrs	r3, r3, #9
 800866e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800867e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008682:	edd7 6a07 	vldr	s13, [r7, #28]
 8008686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800868a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800868e:	ee17 2a90 	vmov	r2, s15
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008696:	4b1f      	ldr	r3, [pc, #124]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	0c1b      	lsrs	r3, r3, #16
 800869c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a0:	ee07 3a90 	vmov	s15, r3
 80086a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80086b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086bc:	ee17 2a90 	vmov	r2, s15
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80086c4:	4b13      	ldr	r3, [pc, #76]	; (8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c8:	0e1b      	lsrs	r3, r3, #24
 80086ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ce:	ee07 3a90 	vmov	s15, r3
 80086d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086de:	edd7 6a07 	vldr	s13, [r7, #28]
 80086e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ea:	ee17 2a90 	vmov	r2, s15
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086f2:	e008      	b.n	8008706 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	609a      	str	r2, [r3, #8]
}
 8008706:	bf00      	nop
 8008708:	3724      	adds	r7, #36	; 0x24
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	58024400 	.word	0x58024400
 8008718:	03d09000 	.word	0x03d09000
 800871c:	46000000 	.word	0x46000000
 8008720:	4c742400 	.word	0x4c742400
 8008724:	4a742400 	.word	0x4a742400
 8008728:	4bbebc20 	.word	0x4bbebc20

0800872c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800872c:	b480      	push	{r7}
 800872e:	b089      	sub	sp, #36	; 0x24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008734:	4ba0      	ldr	r3, [pc, #640]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008738:	f003 0303 	and.w	r3, r3, #3
 800873c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800873e:	4b9e      	ldr	r3, [pc, #632]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008742:	091b      	lsrs	r3, r3, #4
 8008744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008748:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800874a:	4b9b      	ldr	r3, [pc, #620]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800874c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008754:	4b98      	ldr	r3, [pc, #608]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008758:	08db      	lsrs	r3, r3, #3
 800875a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	fb02 f303 	mul.w	r3, r2, r3
 8008764:	ee07 3a90 	vmov	s15, r3
 8008768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	2b00      	cmp	r3, #0
 8008774:	f000 8111 	beq.w	800899a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	2b02      	cmp	r3, #2
 800877c:	f000 8083 	beq.w	8008886 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	2b02      	cmp	r3, #2
 8008784:	f200 80a1 	bhi.w	80088ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d056      	beq.n	8008842 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008794:	e099      	b.n	80088ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008796:	4b88      	ldr	r3, [pc, #544]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d02d      	beq.n	80087fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087a2:	4b85      	ldr	r3, [pc, #532]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	08db      	lsrs	r3, r3, #3
 80087a8:	f003 0303 	and.w	r3, r3, #3
 80087ac:	4a83      	ldr	r2, [pc, #524]	; (80089bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80087ae:	fa22 f303 	lsr.w	r3, r2, r3
 80087b2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	ee07 3a90 	vmov	s15, r3
 80087c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087cc:	4b7a      	ldr	r3, [pc, #488]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d4:	ee07 3a90 	vmov	s15, r3
 80087d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80087e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80087fc:	e087      	b.n	800890e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	ee07 3a90 	vmov	s15, r3
 8008804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008808:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80089c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800880c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008810:	4b69      	ldr	r3, [pc, #420]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008818:	ee07 3a90 	vmov	s15, r3
 800881c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008820:	ed97 6a03 	vldr	s12, [r7, #12]
 8008824:	eddf 5a66 	vldr	s11, [pc, #408]	; 80089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800882c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800883c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008840:	e065      	b.n	800890e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	ee07 3a90 	vmov	s15, r3
 8008848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80089c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008854:	4b58      	ldr	r3, [pc, #352]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885c:	ee07 3a90 	vmov	s15, r3
 8008860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008864:	ed97 6a03 	vldr	s12, [r7, #12]
 8008868:	eddf 5a55 	vldr	s11, [pc, #340]	; 80089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800886c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800887c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008880:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008884:	e043      	b.n	800890e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	ee07 3a90 	vmov	s15, r3
 800888c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008890:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80089cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008898:	4b47      	ldr	r3, [pc, #284]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800889a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a0:	ee07 3a90 	vmov	s15, r3
 80088a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 80089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088c8:	e021      	b.n	800890e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	ee07 3a90 	vmov	s15, r3
 80088d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80089c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80088d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088dc:	4b36      	ldr	r3, [pc, #216]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e4:	ee07 3a90 	vmov	s15, r3
 80088e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80088f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008900:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008908:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800890c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800890e:	4b2a      	ldr	r3, [pc, #168]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	0a5b      	lsrs	r3, r3, #9
 8008914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008918:	ee07 3a90 	vmov	s15, r3
 800891c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008924:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008928:	edd7 6a07 	vldr	s13, [r7, #28]
 800892c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008934:	ee17 2a90 	vmov	r2, s15
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800893c:	4b1e      	ldr	r3, [pc, #120]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800893e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008940:	0c1b      	lsrs	r3, r3, #16
 8008942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008946:	ee07 3a90 	vmov	s15, r3
 800894a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008956:	edd7 6a07 	vldr	s13, [r7, #28]
 800895a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800895e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008962:	ee17 2a90 	vmov	r2, s15
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800896a:	4b13      	ldr	r3, [pc, #76]	; (80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800896c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896e:	0e1b      	lsrs	r3, r3, #24
 8008970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008974:	ee07 3a90 	vmov	s15, r3
 8008978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008980:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008984:	edd7 6a07 	vldr	s13, [r7, #28]
 8008988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800898c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008990:	ee17 2a90 	vmov	r2, s15
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008998:	e008      	b.n	80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	609a      	str	r2, [r3, #8]
}
 80089ac:	bf00      	nop
 80089ae:	3724      	adds	r7, #36	; 0x24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	58024400 	.word	0x58024400
 80089bc:	03d09000 	.word	0x03d09000
 80089c0:	46000000 	.word	0x46000000
 80089c4:	4c742400 	.word	0x4c742400
 80089c8:	4a742400 	.word	0x4a742400
 80089cc:	4bbebc20 	.word	0x4bbebc20

080089d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089de:	4b53      	ldr	r3, [pc, #332]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d101      	bne.n	80089ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e099      	b.n	8008b22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80089ee:	4b4f      	ldr	r3, [pc, #316]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a4e      	ldr	r2, [pc, #312]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 80089f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089fa:	f7f9 ffd1 	bl	80029a0 <HAL_GetTick>
 80089fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a00:	e008      	b.n	8008a14 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a02:	f7f9 ffcd 	bl	80029a0 <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d901      	bls.n	8008a14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e086      	b.n	8008b22 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a14:	4b45      	ldr	r3, [pc, #276]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1f0      	bne.n	8008a02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a20:	4b42      	ldr	r3, [pc, #264]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	031b      	lsls	r3, r3, #12
 8008a2e:	493f      	ldr	r1, [pc, #252]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	628b      	str	r3, [r1, #40]	; 0x28
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	025b      	lsls	r3, r3, #9
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	041b      	lsls	r3, r3, #16
 8008a52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a56:	431a      	orrs	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	061b      	lsls	r3, r3, #24
 8008a60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a64:	4931      	ldr	r1, [pc, #196]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008a6a:	4b30      	ldr	r3, [pc, #192]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	492d      	ldr	r1, [pc, #180]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a7c:	4b2b      	ldr	r3, [pc, #172]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	f023 0220 	bic.w	r2, r3, #32
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	4928      	ldr	r1, [pc, #160]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a8e:	4b27      	ldr	r3, [pc, #156]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	4a26      	ldr	r2, [pc, #152]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008a94:	f023 0310 	bic.w	r3, r3, #16
 8008a98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a9a:	4b24      	ldr	r3, [pc, #144]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a9e:	4b24      	ldr	r3, [pc, #144]	; (8008b30 <RCCEx_PLL2_Config+0x160>)
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	69d2      	ldr	r2, [r2, #28]
 8008aa6:	00d2      	lsls	r2, r2, #3
 8008aa8:	4920      	ldr	r1, [pc, #128]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008aae:	4b1f      	ldr	r3, [pc, #124]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab2:	4a1e      	ldr	r2, [pc, #120]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008ab4:	f043 0310 	orr.w	r3, r3, #16
 8008ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d106      	bne.n	8008ace <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ac0:	4b1a      	ldr	r3, [pc, #104]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac4:	4a19      	ldr	r2, [pc, #100]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008aca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008acc:	e00f      	b.n	8008aee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d106      	bne.n	8008ae2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008ad4:	4b15      	ldr	r3, [pc, #84]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	4a14      	ldr	r2, [pc, #80]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ade:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ae0:	e005      	b.n	8008aee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008ae2:	4b12      	ldr	r3, [pc, #72]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	4a11      	ldr	r2, [pc, #68]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008aec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008aee:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a0e      	ldr	r2, [pc, #56]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008af4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008afa:	f7f9 ff51 	bl	80029a0 <HAL_GetTick>
 8008afe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b00:	e008      	b.n	8008b14 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b02:	f7f9 ff4d 	bl	80029a0 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d901      	bls.n	8008b14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e006      	b.n	8008b22 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b14:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <RCCEx_PLL2_Config+0x15c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d0f0      	beq.n	8008b02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	58024400 	.word	0x58024400
 8008b30:	ffff0007 	.word	0xffff0007

08008b34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b42:	4b53      	ldr	r3, [pc, #332]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	2b03      	cmp	r3, #3
 8008b4c:	d101      	bne.n	8008b52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e099      	b.n	8008c86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008b52:	4b4f      	ldr	r3, [pc, #316]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a4e      	ldr	r2, [pc, #312]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b5e:	f7f9 ff1f 	bl	80029a0 <HAL_GetTick>
 8008b62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b64:	e008      	b.n	8008b78 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b66:	f7f9 ff1b 	bl	80029a0 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d901      	bls.n	8008b78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e086      	b.n	8008c86 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b78:	4b45      	ldr	r3, [pc, #276]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1f0      	bne.n	8008b66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b84:	4b42      	ldr	r3, [pc, #264]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b88:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	051b      	lsls	r3, r3, #20
 8008b92:	493f      	ldr	r1, [pc, #252]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008b94:	4313      	orrs	r3, r2
 8008b96:	628b      	str	r3, [r1, #40]	; 0x28
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	025b      	lsls	r3, r3, #9
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	431a      	orrs	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	041b      	lsls	r3, r3, #16
 8008bb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	061b      	lsls	r3, r3, #24
 8008bc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008bc8:	4931      	ldr	r1, [pc, #196]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008bce:	4b30      	ldr	r3, [pc, #192]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	492d      	ldr	r1, [pc, #180]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008be0:	4b2b      	ldr	r3, [pc, #172]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	4928      	ldr	r1, [pc, #160]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008bf2:	4b27      	ldr	r3, [pc, #156]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf6:	4a26      	ldr	r2, [pc, #152]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008bfe:	4b24      	ldr	r3, [pc, #144]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c02:	4b24      	ldr	r3, [pc, #144]	; (8008c94 <RCCEx_PLL3_Config+0x160>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	69d2      	ldr	r2, [r2, #28]
 8008c0a:	00d2      	lsls	r2, r2, #3
 8008c0c:	4920      	ldr	r1, [pc, #128]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c12:	4b1f      	ldr	r3, [pc, #124]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c16:	4a1e      	ldr	r2, [pc, #120]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d106      	bne.n	8008c32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c24:	4b1a      	ldr	r3, [pc, #104]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c28:	4a19      	ldr	r2, [pc, #100]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008c2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008c2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c30:	e00f      	b.n	8008c52 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d106      	bne.n	8008c46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c38:	4b15      	ldr	r3, [pc, #84]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3c:	4a14      	ldr	r2, [pc, #80]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008c3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c44:	e005      	b.n	8008c52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c46:	4b12      	ldr	r3, [pc, #72]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4a:	4a11      	ldr	r2, [pc, #68]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008c4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008c52:	4b0f      	ldr	r3, [pc, #60]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a0e      	ldr	r2, [pc, #56]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c5e:	f7f9 fe9f 	bl	80029a0 <HAL_GetTick>
 8008c62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c64:	e008      	b.n	8008c78 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c66:	f7f9 fe9b 	bl	80029a0 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d901      	bls.n	8008c78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e006      	b.n	8008c86 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c78:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <RCCEx_PLL3_Config+0x15c>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0f0      	beq.n	8008c66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	58024400 	.word	0x58024400
 8008c94:	ffff0007 	.word	0xffff0007

08008c98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d067      	beq.n	8008d7a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d106      	bne.n	8008cc4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7f9 f8b6 	bl	8001e30 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	22ca      	movs	r2, #202	; 0xca
 8008cd2:	625a      	str	r2, [r3, #36]	; 0x24
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2253      	movs	r2, #83	; 0x53
 8008cda:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f879 	bl	8008dd4 <RTC_EnterInitMode>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d13b      	bne.n	8008d64 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6899      	ldr	r1, [r3, #8]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	4b23      	ldr	r3, [pc, #140]	; (8008d84 <HAL_RTC_Init+0xec>)
 8008cf8:	400b      	ands	r3, r1
 8008cfa:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6899      	ldr	r1, [r3, #8]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	431a      	orrs	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	430a      	orrs	r2, r1
 8008d18:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	0419      	lsls	r1, r3, #16
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68da      	ldr	r2, [r3, #12]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f885 	bl	8008e3c <RTC_ExitInitMode>
 8008d32:	4603      	mov	r3, r0
 8008d34:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d113      	bne.n	8008d64 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f022 0203 	bic.w	r2, r2, #3
 8008d4a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	69da      	ldr	r2, [r3, #28]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	430a      	orrs	r2, r1
 8008d62:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	22ff      	movs	r2, #255	; 0xff
 8008d6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d103      	bne.n	8008d7a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	ff8fffbf 	.word	0xff8fffbf

08008d88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68da      	ldr	r2, [r3, #12]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d9e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008da0:	f7f9 fdfe 	bl	80029a0 <HAL_GetTick>
 8008da4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008da6:	e009      	b.n	8008dbc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008da8:	f7f9 fdfa 	bl	80029a0 <HAL_GetTick>
 8008dac:	4602      	mov	r2, r0
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008db6:	d901      	bls.n	8008dbc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e007      	b.n	8008dcc <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f003 0320 	and.w	r3, r3, #32
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0ee      	beq.n	8008da8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d120      	bne.n	8008e30 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f04f 32ff 	mov.w	r2, #4294967295
 8008df6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008df8:	f7f9 fdd2 	bl	80029a0 <HAL_GetTick>
 8008dfc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008dfe:	e00d      	b.n	8008e1c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008e00:	f7f9 fdce 	bl	80029a0 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e0e:	d905      	bls.n	8008e1c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2203      	movs	r2, #3
 8008e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d102      	bne.n	8008e30 <RTC_EnterInitMode+0x5c>
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d1e7      	bne.n	8008e00 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
	...

08008e3c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008e48:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	4a19      	ldr	r2, [pc, #100]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e52:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008e54:	4b17      	ldr	r3, [pc, #92]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f003 0320 	and.w	r3, r3, #32
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10c      	bne.n	8008e7a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7ff ff91 	bl	8008d88 <HAL_RTC_WaitForSynchro>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d01e      	beq.n	8008eaa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2203      	movs	r2, #3
 8008e70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	73fb      	strb	r3, [r7, #15]
 8008e78:	e017      	b.n	8008eaa <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e7a:	4b0e      	ldr	r3, [pc, #56]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	4a0d      	ldr	r2, [pc, #52]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008e80:	f023 0320 	bic.w	r3, r3, #32
 8008e84:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff ff7e 	bl	8008d88 <HAL_RTC_WaitForSynchro>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d005      	beq.n	8008e9e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2203      	movs	r2, #3
 8008e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e9e:	4b05      	ldr	r3, [pc, #20]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	4a04      	ldr	r2, [pc, #16]	; (8008eb4 <RTC_ExitInitMode+0x78>)
 8008ea4:	f043 0320 	orr.w	r3, r3, #32
 8008ea8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	58004000 	.word	0x58004000

08008eb8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08a      	sub	sp, #40	; 0x28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e283      	b.n	80093d2 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008eca:	f7f9 fd99 	bl	8002a00 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d113      	bne.n	8008f00 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a94      	ldr	r2, [pc, #592]	; (8009130 <HAL_SAI_Init+0x278>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d004      	beq.n	8008eec <HAL_SAI_Init+0x34>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a93      	ldr	r2, [pc, #588]	; (8009134 <HAL_SAI_Init+0x27c>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d107      	bne.n	8008efc <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d103      	bne.n	8008efc <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e268      	b.n	80093d2 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a8a      	ldr	r2, [pc, #552]	; (8009130 <HAL_SAI_Init+0x278>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d004      	beq.n	8008f14 <HAL_SAI_Init+0x5c>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a8a      	ldr	r2, [pc, #552]	; (8009138 <HAL_SAI_Init+0x280>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d102      	bne.n	8008f1a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8008f14:	4b89      	ldr	r3, [pc, #548]	; (800913c <HAL_SAI_Init+0x284>)
 8008f16:	61bb      	str	r3, [r7, #24]
 8008f18:	e028      	b.n	8008f6c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a88      	ldr	r2, [pc, #544]	; (8009140 <HAL_SAI_Init+0x288>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d004      	beq.n	8008f2e <HAL_SAI_Init+0x76>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a86      	ldr	r2, [pc, #536]	; (8009144 <HAL_SAI_Init+0x28c>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d102      	bne.n	8008f34 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8008f2e:	4b86      	ldr	r3, [pc, #536]	; (8009148 <HAL_SAI_Init+0x290>)
 8008f30:	61bb      	str	r3, [r7, #24]
 8008f32:	e01b      	b.n	8008f6c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a84      	ldr	r2, [pc, #528]	; (800914c <HAL_SAI_Init+0x294>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <HAL_SAI_Init+0x90>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a83      	ldr	r2, [pc, #524]	; (8009150 <HAL_SAI_Init+0x298>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d102      	bne.n	8008f4e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8008f48:	4b82      	ldr	r3, [pc, #520]	; (8009154 <HAL_SAI_Init+0x29c>)
 8008f4a:	61bb      	str	r3, [r7, #24]
 8008f4c:	e00e      	b.n	8008f6c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a78      	ldr	r2, [pc, #480]	; (8009134 <HAL_SAI_Init+0x27c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d004      	beq.n	8008f62 <HAL_SAI_Init+0xaa>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a7e      	ldr	r2, [pc, #504]	; (8009158 <HAL_SAI_Init+0x2a0>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d102      	bne.n	8008f68 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8008f62:	4b7e      	ldr	r3, [pc, #504]	; (800915c <HAL_SAI_Init+0x2a4>)
 8008f64:	61bb      	str	r3, [r7, #24]
 8008f66:	e001      	b.n	8008f6c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e232      	b.n	80093d2 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d106      	bne.n	8008f86 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7f9 f843 	bl	800200c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fa36 	bl	80093f8 <SAI_Disable>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e21d      	b.n	80093d2 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2202      	movs	r2, #2
 8008f9a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d00c      	beq.n	8008fc0 <HAL_SAI_Init+0x108>
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d80d      	bhi.n	8008fc6 <HAL_SAI_Init+0x10e>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d002      	beq.n	8008fb4 <HAL_SAI_Init+0xfc>
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d003      	beq.n	8008fba <HAL_SAI_Init+0x102>
 8008fb2:	e008      	b.n	8008fc6 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008fb8:	e008      	b.n	8008fcc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008fba:	2310      	movs	r3, #16
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008fbe:	e005      	b.n	8008fcc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008fc0:	2320      	movs	r3, #32
 8008fc2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008fc4:	e002      	b.n	8008fcc <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008fca:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	2b05      	cmp	r3, #5
 8008fd2:	d832      	bhi.n	800903a <HAL_SAI_Init+0x182>
 8008fd4:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <HAL_SAI_Init+0x124>)
 8008fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fda:	bf00      	nop
 8008fdc:	08008ff5 	.word	0x08008ff5
 8008fe0:	08008ffb 	.word	0x08008ffb
 8008fe4:	08009003 	.word	0x08009003
 8008fe8:	0800900b 	.word	0x0800900b
 8008fec:	0800901b 	.word	0x0800901b
 8008ff0:	0800902b 	.word	0x0800902b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	61fb      	str	r3, [r7, #28]
      break;
 8008ff8:	e022      	b.n	8009040 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ffe:	61fb      	str	r3, [r7, #28]
      break;
 8009000:	e01e      	b.n	8009040 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009002:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009006:	61fb      	str	r3, [r7, #28]
      break;
 8009008:	e01a      	b.n	8009040 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800900a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800900e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	f043 0301 	orr.w	r3, r3, #1
 8009016:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009018:	e012      	b.n	8009040 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800901a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800901e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	f043 0302 	orr.w	r3, r3, #2
 8009026:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009028:	e00a      	b.n	8009040 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800902a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800902e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	f043 0303 	orr.w	r3, r3, #3
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009038:	e002      	b.n	8009040 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	61fb      	str	r3, [r7, #28]
      break;
 800903e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009044:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 80ba 	beq.w	80091c4 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a35      	ldr	r2, [pc, #212]	; (8009130 <HAL_SAI_Init+0x278>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d004      	beq.n	8009068 <HAL_SAI_Init+0x1b0>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a35      	ldr	r2, [pc, #212]	; (8009138 <HAL_SAI_Init+0x280>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d104      	bne.n	8009072 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009068:	f44f 7080 	mov.w	r0, #256	; 0x100
 800906c:	f7fe fbce 	bl	800780c <HAL_RCCEx_GetPeriphCLKFreq>
 8009070:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a32      	ldr	r2, [pc, #200]	; (8009140 <HAL_SAI_Init+0x288>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d004      	beq.n	8009086 <HAL_SAI_Init+0x1ce>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a30      	ldr	r2, [pc, #192]	; (8009144 <HAL_SAI_Init+0x28c>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d104      	bne.n	8009090 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009086:	f44f 7000 	mov.w	r0, #512	; 0x200
 800908a:	f7fe fbbf 	bl	800780c <HAL_RCCEx_GetPeriphCLKFreq>
 800908e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a2d      	ldr	r2, [pc, #180]	; (800914c <HAL_SAI_Init+0x294>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d004      	beq.n	80090a4 <HAL_SAI_Init+0x1ec>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a2c      	ldr	r2, [pc, #176]	; (8009150 <HAL_SAI_Init+0x298>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d104      	bne.n	80090ae <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80090a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80090a8:	f7fe fbb0 	bl	800780c <HAL_RCCEx_GetPeriphCLKFreq>
 80090ac:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a20      	ldr	r2, [pc, #128]	; (8009134 <HAL_SAI_Init+0x27c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d104      	bne.n	80090c2 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80090b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80090bc:	f7fe fba6 	bl	800780c <HAL_RCCEx_GetPeriphCLKFreq>
 80090c0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a24      	ldr	r2, [pc, #144]	; (8009158 <HAL_SAI_Init+0x2a0>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d104      	bne.n	80090d6 <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80090cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80090d0:	f7fe fb9c 	bl	800780c <HAL_RCCEx_GetPeriphCLKFreq>
 80090d4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80090de:	d120      	bne.n	8009122 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e4:	2b04      	cmp	r3, #4
 80090e6:	d102      	bne.n	80090ee <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80090e8:	2340      	movs	r3, #64	; 0x40
 80090ea:	60fb      	str	r3, [r7, #12]
 80090ec:	e00a      	b.n	8009104 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f2:	2b08      	cmp	r3, #8
 80090f4:	d103      	bne.n	80090fe <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80090f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	e002      	b.n	8009104 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009102:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	4613      	mov	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	4619      	mov	r1, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	fb02 f303 	mul.w	r3, r2, r3
 800911a:	fbb1 f3f3 	udiv	r3, r1, r3
 800911e:	613b      	str	r3, [r7, #16]
 8009120:	e02f      	b.n	8009182 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009126:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800912a:	d119      	bne.n	8009160 <HAL_SAI_Init+0x2a8>
 800912c:	2302      	movs	r3, #2
 800912e:	e018      	b.n	8009162 <HAL_SAI_Init+0x2aa>
 8009130:	40015804 	.word	0x40015804
 8009134:	58005404 	.word	0x58005404
 8009138:	40015824 	.word	0x40015824
 800913c:	40015800 	.word	0x40015800
 8009140:	40015c04 	.word	0x40015c04
 8009144:	40015c24 	.word	0x40015c24
 8009148:	40015c00 	.word	0x40015c00
 800914c:	40016004 	.word	0x40016004
 8009150:	40016024 	.word	0x40016024
 8009154:	40016000 	.word	0x40016000
 8009158:	58005424 	.word	0x58005424
 800915c:	58005400 	.word	0x58005400
 8009160:	2301      	movs	r3, #1
 8009162:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	4619      	mov	r1, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	fb02 f303 	mul.w	r3, r2, r3
 800917a:	021b      	lsls	r3, r3, #8
 800917c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009180:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	4a95      	ldr	r2, [pc, #596]	; (80093dc <HAL_SAI_Init+0x524>)
 8009186:	fba2 2303 	umull	r2, r3, r2, r3
 800918a:	08da      	lsrs	r2, r3, #3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009190:	6939      	ldr	r1, [r7, #16]
 8009192:	4b92      	ldr	r3, [pc, #584]	; (80093dc <HAL_SAI_Init+0x524>)
 8009194:	fba3 2301 	umull	r2, r3, r3, r1
 8009198:	08da      	lsrs	r2, r3, #3
 800919a:	4613      	mov	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	005b      	lsls	r3, r3, #1
 80091a2:	1aca      	subs	r2, r1, r3
 80091a4:	2a08      	cmp	r2, #8
 80091a6:	d904      	bls.n	80091b2 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ac:	1c5a      	adds	r2, r3, #1
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d104      	bne.n	80091c4 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	085a      	lsrs	r2, r3, #1
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <HAL_SAI_Init+0x31c>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d109      	bne.n	80091e8 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d101      	bne.n	80091e0 <HAL_SAI_Init+0x328>
 80091dc:	2300      	movs	r3, #0
 80091de:	e001      	b.n	80091e4 <HAL_SAI_Init+0x32c>
 80091e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091e4:	623b      	str	r3, [r7, #32]
 80091e6:	e008      	b.n	80091fa <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d102      	bne.n	80091f6 <HAL_SAI_Init+0x33e>
 80091f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091f4:	e000      	b.n	80091f8 <HAL_SAI_Init+0x340>
 80091f6:	2300      	movs	r3, #0
 80091f8:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80091fa:	f7f9 fc01 	bl	8002a00 <HAL_GetREVID>
 80091fe:	4603      	mov	r3, r0
 8009200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009204:	d331      	bcc.n	800926a <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6819      	ldr	r1, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	4b73      	ldr	r3, [pc, #460]	; (80093e0 <HAL_SAI_Init+0x528>)
 8009212:	400b      	ands	r3, r1
 8009214:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6819      	ldr	r1, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009224:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800922a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009230:	431a      	orrs	r2, r3
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800923e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800924a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009250:	051b      	lsls	r3, r3, #20
 8009252:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009258:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	430a      	orrs	r2, r1
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	e02d      	b.n	80092c6 <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	6819      	ldr	r1, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	4b5b      	ldr	r3, [pc, #364]	; (80093e4 <HAL_SAI_Init+0x52c>)
 8009276:	400b      	ands	r3, r1
 8009278:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6819      	ldr	r1, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009288:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800928e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009294:	431a      	orrs	r2, r3
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80092a2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092ae:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	051b      	lsls	r3, r3, #20
 80092b6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80092bc:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6859      	ldr	r1, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	4b45      	ldr	r3, [pc, #276]	; (80093e8 <HAL_SAI_Init+0x530>)
 80092d2:	400b      	ands	r3, r1
 80092d4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	6859      	ldr	r1, [r3, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	69da      	ldr	r2, [r3, #28]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ea:	431a      	orrs	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6899      	ldr	r1, [r3, #8]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	4b3b      	ldr	r3, [pc, #236]	; (80093ec <HAL_SAI_Init+0x534>)
 8009300:	400b      	ands	r3, r1
 8009302:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6899      	ldr	r1, [r3, #8]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800930e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009314:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800931a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009320:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009326:	3b01      	subs	r3, #1
 8009328:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800932a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	430a      	orrs	r2, r1
 8009332:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68d9      	ldr	r1, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009342:	400b      	ands	r3, r1
 8009344:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68d9      	ldr	r1, [r3, #12]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009354:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800935a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800935c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009362:	3b01      	subs	r3, #1
 8009364:	021b      	lsls	r3, r3, #8
 8009366:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a1e      	ldr	r2, [pc, #120]	; (80093f0 <HAL_SAI_Init+0x538>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d004      	beq.n	8009384 <HAL_SAI_Init+0x4cc>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a1d      	ldr	r2, [pc, #116]	; (80093f4 <HAL_SAI_Init+0x53c>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d119      	bne.n	80093b8 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009388:	f023 0201 	bic.w	r2, r3, #1
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009396:	2b01      	cmp	r3, #1
 8009398:	d10e      	bne.n	80093b8 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a2:	3b01      	subs	r3, #1
 80093a4:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80093a6:	431a      	orrs	r2, r3
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093b0:	f043 0201 	orr.w	r2, r3, #1
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3728      	adds	r7, #40	; 0x28
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	cccccccd 	.word	0xcccccccd
 80093e0:	f005c010 	.word	0xf005c010
 80093e4:	f805c010 	.word	0xf805c010
 80093e8:	ffff1ff0 	.word	0xffff1ff0
 80093ec:	fff88000 	.word	0xfff88000
 80093f0:	40015804 	.word	0x40015804
 80093f4:	58005404 	.word	0x58005404

080093f8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009400:	4b18      	ldr	r3, [pc, #96]	; (8009464 <SAI_Disable+0x6c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a18      	ldr	r2, [pc, #96]	; (8009468 <SAI_Disable+0x70>)
 8009406:	fba2 2303 	umull	r2, r3, r2, r3
 800940a:	0b1b      	lsrs	r3, r3, #12
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009422:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10a      	bne.n	8009440 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009430:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	72fb      	strb	r3, [r7, #11]
      break;
 800943e:	e009      	b.n	8009454 <SAI_Disable+0x5c>
    }
    count--;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3b01      	subs	r3, #1
 8009444:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1e7      	bne.n	8009424 <SAI_Disable+0x2c>

  return status;
 8009454:	7afb      	ldrb	r3, [r7, #11]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	24000000 	.word	0x24000000
 8009468:	95cbec1b 	.word	0x95cbec1b

0800946c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e02b      	b.n	80094d8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b00      	cmp	r3, #0
 800948a:	d106      	bne.n	800949a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7f7 ff51 	bl	800133c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2202      	movs	r2, #2
 800949e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	3304      	adds	r3, #4
 80094aa:	4619      	mov	r1, r3
 80094ac:	4610      	mov	r0, r2
 80094ae:	f001 fa41 	bl	800a934 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6818      	ldr	r0, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	461a      	mov	r2, r3
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	f001 fa95 	bl	800a9ec <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80094c2:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <HAL_SDRAM_Init+0x74>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a06      	ldr	r2, [pc, #24]	; (80094e0 <HAL_SDRAM_Init+0x74>)
 80094c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094cc:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	52004000 	.word	0x52004000

080094e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e0f1      	b.n	80096da <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a78      	ldr	r2, [pc, #480]	; (80096e4 <HAL_SPI_Init+0x200>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d00f      	beq.n	8009526 <HAL_SPI_Init+0x42>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a77      	ldr	r2, [pc, #476]	; (80096e8 <HAL_SPI_Init+0x204>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d00a      	beq.n	8009526 <HAL_SPI_Init+0x42>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a75      	ldr	r2, [pc, #468]	; (80096ec <HAL_SPI_Init+0x208>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d005      	beq.n	8009526 <HAL_SPI_Init+0x42>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	2b0f      	cmp	r3, #15
 8009520:	d901      	bls.n	8009526 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e0d9      	b.n	80096da <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f8e2 	bl	80096f0 <SPI_GetPacketSize>
 800952c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a6c      	ldr	r2, [pc, #432]	; (80096e4 <HAL_SPI_Init+0x200>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d00c      	beq.n	8009552 <HAL_SPI_Init+0x6e>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a6a      	ldr	r2, [pc, #424]	; (80096e8 <HAL_SPI_Init+0x204>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d007      	beq.n	8009552 <HAL_SPI_Init+0x6e>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a69      	ldr	r2, [pc, #420]	; (80096ec <HAL_SPI_Init+0x208>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d002      	beq.n	8009552 <HAL_SPI_Init+0x6e>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b08      	cmp	r3, #8
 8009550:	d811      	bhi.n	8009576 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009556:	4a63      	ldr	r2, [pc, #396]	; (80096e4 <HAL_SPI_Init+0x200>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d009      	beq.n	8009570 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a61      	ldr	r2, [pc, #388]	; (80096e8 <HAL_SPI_Init+0x204>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d004      	beq.n	8009570 <HAL_SPI_Init+0x8c>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a60      	ldr	r2, [pc, #384]	; (80096ec <HAL_SPI_Init+0x208>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d104      	bne.n	800957a <HAL_SPI_Init+0x96>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b10      	cmp	r3, #16
 8009574:	d901      	bls.n	800957a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e0af      	b.n	80096da <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	d106      	bne.n	8009594 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f7f8 fe2e 	bl	80021f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2202      	movs	r2, #2
 8009598:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f022 0201 	bic.w	r2, r2, #1
 80095aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80095b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095c0:	d119      	bne.n	80095f6 <HAL_SPI_Init+0x112>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095ca:	d103      	bne.n	80095d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d008      	beq.n	80095e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10c      	bne.n	80095f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80095e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095e4:	d107      	bne.n	80095f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80095f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	69da      	ldr	r2, [r3, #28]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fe:	431a      	orrs	r2, r3
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	431a      	orrs	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009608:	ea42 0103 	orr.w	r1, r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68da      	ldr	r2, [r3, #12]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	430a      	orrs	r2, r1
 8009616:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	431a      	orrs	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009626:	431a      	orrs	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	431a      	orrs	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	431a      	orrs	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	431a      	orrs	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	431a      	orrs	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	431a      	orrs	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800964a:	431a      	orrs	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	431a      	orrs	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009656:	ea42 0103 	orr.w	r1, r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	430a      	orrs	r2, r1
 8009664:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d113      	bne.n	8009696 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009680:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009694:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f022 0201 	bic.w	r2, r2, #1
 80096a4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00a      	beq.n	80096c8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	40013000 	.word	0x40013000
 80096e8:	40003800 	.word	0x40003800
 80096ec:	40003c00 	.word	0x40003c00

080096f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fc:	095b      	lsrs	r3, r3, #5
 80096fe:	3301      	adds	r3, #1
 8009700:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	3301      	adds	r3, #1
 8009708:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	3307      	adds	r3, #7
 800970e:	08db      	lsrs	r3, r3, #3
 8009710:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	fb02 f303 	mul.w	r3, r2, r3
}
 800971a:	4618      	mov	r0, r3
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b082      	sub	sp, #8
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e042      	b.n	80097be <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800973e:	2b00      	cmp	r3, #0
 8009740:	d106      	bne.n	8009750 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7f8 ff66 	bl	800261c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2224      	movs	r2, #36	; 0x24
 8009754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0201 	bic.w	r2, r2, #1
 8009766:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f8c3 	bl	80098f4 <UART_SetConfig>
 800976e:	4603      	mov	r3, r0
 8009770:	2b01      	cmp	r3, #1
 8009772:	d101      	bne.n	8009778 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e022      	b.n	80097be <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fe1f 	bl	800a3c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009794:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689a      	ldr	r2, [r3, #8]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f042 0201 	orr.w	r2, r2, #1
 80097b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fea6 	bl	800a508 <UART_CheckIdleState>
 80097bc:	4603      	mov	r3, r0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b08a      	sub	sp, #40	; 0x28
 80097ca:	af02      	add	r7, sp, #8
 80097cc:	60f8      	str	r0, [r7, #12]
 80097ce:	60b9      	str	r1, [r7, #8]
 80097d0:	603b      	str	r3, [r7, #0]
 80097d2:	4613      	mov	r3, r2
 80097d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097dc:	2b20      	cmp	r3, #32
 80097de:	f040 8083 	bne.w	80098e8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <HAL_UART_Transmit+0x28>
 80097e8:	88fb      	ldrh	r3, [r7, #6]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e07b      	b.n	80098ea <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d101      	bne.n	8009800 <HAL_UART_Transmit+0x3a>
 80097fc:	2302      	movs	r3, #2
 80097fe:	e074      	b.n	80098ea <HAL_UART_Transmit+0x124>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2221      	movs	r2, #33	; 0x21
 8009814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009818:	f7f9 f8c2 	bl	80029a0 <HAL_GetTick>
 800981c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	88fa      	ldrh	r2, [r7, #6]
 8009822:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009836:	d108      	bne.n	800984a <HAL_UART_Transmit+0x84>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d104      	bne.n	800984a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009840:	2300      	movs	r3, #0
 8009842:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	61bb      	str	r3, [r7, #24]
 8009848:	e003      	b.n	8009852 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800984e:	2300      	movs	r3, #0
 8009850:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800985a:	e02c      	b.n	80098b6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	2200      	movs	r2, #0
 8009864:	2180      	movs	r1, #128	; 0x80
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f000 fe99 	bl	800a59e <UART_WaitOnFlagUntilTimeout>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e039      	b.n	80098ea <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10b      	bne.n	8009894 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	461a      	mov	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800988a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	3302      	adds	r3, #2
 8009890:	61bb      	str	r3, [r7, #24]
 8009892:	e007      	b.n	80098a4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	781a      	ldrb	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	3301      	adds	r3, #1
 80098a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	3b01      	subs	r3, #1
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098bc:	b29b      	uxth	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1cc      	bne.n	800985c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2200      	movs	r2, #0
 80098ca:	2140      	movs	r1, #64	; 0x40
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 fe66 	bl	800a59e <UART_WaitOnFlagUntilTimeout>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d001      	beq.n	80098dc <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e006      	b.n	80098ea <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2220      	movs	r2, #32
 80098e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	e000      	b.n	80098ea <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80098e8:	2302      	movs	r3, #2
  }
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3720      	adds	r7, #32
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
	...

080098f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098f8:	b092      	sub	sp, #72	; 0x48
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	431a      	orrs	r2, r3
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	431a      	orrs	r2, r3
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	69db      	ldr	r3, [r3, #28]
 8009918:	4313      	orrs	r3, r2
 800991a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	4bbe      	ldr	r3, [pc, #760]	; (8009c1c <UART_SetConfig+0x328>)
 8009924:	4013      	ands	r3, r2
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	6812      	ldr	r2, [r2, #0]
 800992a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800992c:	430b      	orrs	r3, r1
 800992e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	68da      	ldr	r2, [r3, #12]
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	430a      	orrs	r2, r1
 8009944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4ab3      	ldr	r2, [pc, #716]	; (8009c20 <UART_SetConfig+0x32c>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d004      	beq.n	8009960 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800995c:	4313      	orrs	r3, r2
 800995e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	689a      	ldr	r2, [r3, #8]
 8009966:	4baf      	ldr	r3, [pc, #700]	; (8009c24 <UART_SetConfig+0x330>)
 8009968:	4013      	ands	r3, r2
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	6812      	ldr	r2, [r2, #0]
 800996e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009970:	430b      	orrs	r3, r1
 8009972:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997a:	f023 010f 	bic.w	r1, r3, #15
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	430a      	orrs	r2, r1
 8009988:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4aa6      	ldr	r2, [pc, #664]	; (8009c28 <UART_SetConfig+0x334>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d177      	bne.n	8009a84 <UART_SetConfig+0x190>
 8009994:	4ba5      	ldr	r3, [pc, #660]	; (8009c2c <UART_SetConfig+0x338>)
 8009996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009998:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800999c:	2b28      	cmp	r3, #40	; 0x28
 800999e:	d86d      	bhi.n	8009a7c <UART_SetConfig+0x188>
 80099a0:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <UART_SetConfig+0xb4>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	08009a4d 	.word	0x08009a4d
 80099ac:	08009a7d 	.word	0x08009a7d
 80099b0:	08009a7d 	.word	0x08009a7d
 80099b4:	08009a7d 	.word	0x08009a7d
 80099b8:	08009a7d 	.word	0x08009a7d
 80099bc:	08009a7d 	.word	0x08009a7d
 80099c0:	08009a7d 	.word	0x08009a7d
 80099c4:	08009a7d 	.word	0x08009a7d
 80099c8:	08009a55 	.word	0x08009a55
 80099cc:	08009a7d 	.word	0x08009a7d
 80099d0:	08009a7d 	.word	0x08009a7d
 80099d4:	08009a7d 	.word	0x08009a7d
 80099d8:	08009a7d 	.word	0x08009a7d
 80099dc:	08009a7d 	.word	0x08009a7d
 80099e0:	08009a7d 	.word	0x08009a7d
 80099e4:	08009a7d 	.word	0x08009a7d
 80099e8:	08009a5d 	.word	0x08009a5d
 80099ec:	08009a7d 	.word	0x08009a7d
 80099f0:	08009a7d 	.word	0x08009a7d
 80099f4:	08009a7d 	.word	0x08009a7d
 80099f8:	08009a7d 	.word	0x08009a7d
 80099fc:	08009a7d 	.word	0x08009a7d
 8009a00:	08009a7d 	.word	0x08009a7d
 8009a04:	08009a7d 	.word	0x08009a7d
 8009a08:	08009a65 	.word	0x08009a65
 8009a0c:	08009a7d 	.word	0x08009a7d
 8009a10:	08009a7d 	.word	0x08009a7d
 8009a14:	08009a7d 	.word	0x08009a7d
 8009a18:	08009a7d 	.word	0x08009a7d
 8009a1c:	08009a7d 	.word	0x08009a7d
 8009a20:	08009a7d 	.word	0x08009a7d
 8009a24:	08009a7d 	.word	0x08009a7d
 8009a28:	08009a6d 	.word	0x08009a6d
 8009a2c:	08009a7d 	.word	0x08009a7d
 8009a30:	08009a7d 	.word	0x08009a7d
 8009a34:	08009a7d 	.word	0x08009a7d
 8009a38:	08009a7d 	.word	0x08009a7d
 8009a3c:	08009a7d 	.word	0x08009a7d
 8009a40:	08009a7d 	.word	0x08009a7d
 8009a44:	08009a7d 	.word	0x08009a7d
 8009a48:	08009a75 	.word	0x08009a75
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a52:	e222      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009a54:	2304      	movs	r3, #4
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5a:	e21e      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a62:	e21a      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009a64:	2310      	movs	r3, #16
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6a:	e216      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009a6c:	2320      	movs	r3, #32
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a72:	e212      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009a74:	2340      	movs	r3, #64	; 0x40
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7a:	e20e      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009a7c:	2380      	movs	r3, #128	; 0x80
 8009a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a82:	e20a      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a69      	ldr	r2, [pc, #420]	; (8009c30 <UART_SetConfig+0x33c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d130      	bne.n	8009af0 <UART_SetConfig+0x1fc>
 8009a8e:	4b67      	ldr	r3, [pc, #412]	; (8009c2c <UART_SetConfig+0x338>)
 8009a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a92:	f003 0307 	and.w	r3, r3, #7
 8009a96:	2b05      	cmp	r3, #5
 8009a98:	d826      	bhi.n	8009ae8 <UART_SetConfig+0x1f4>
 8009a9a:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <UART_SetConfig+0x1ac>)
 8009a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa0:	08009ab9 	.word	0x08009ab9
 8009aa4:	08009ac1 	.word	0x08009ac1
 8009aa8:	08009ac9 	.word	0x08009ac9
 8009aac:	08009ad1 	.word	0x08009ad1
 8009ab0:	08009ad9 	.word	0x08009ad9
 8009ab4:	08009ae1 	.word	0x08009ae1
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009abe:	e1ec      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009ac0:	2304      	movs	r3, #4
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac6:	e1e8      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009ac8:	2308      	movs	r3, #8
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ace:	e1e4      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad6:	e1e0      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009ad8:	2320      	movs	r3, #32
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ade:	e1dc      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009ae0:	2340      	movs	r3, #64	; 0x40
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae6:	e1d8      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009ae8:	2380      	movs	r3, #128	; 0x80
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aee:	e1d4      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a4f      	ldr	r2, [pc, #316]	; (8009c34 <UART_SetConfig+0x340>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d130      	bne.n	8009b5c <UART_SetConfig+0x268>
 8009afa:	4b4c      	ldr	r3, [pc, #304]	; (8009c2c <UART_SetConfig+0x338>)
 8009afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009afe:	f003 0307 	and.w	r3, r3, #7
 8009b02:	2b05      	cmp	r3, #5
 8009b04:	d826      	bhi.n	8009b54 <UART_SetConfig+0x260>
 8009b06:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <UART_SetConfig+0x218>)
 8009b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0c:	08009b25 	.word	0x08009b25
 8009b10:	08009b2d 	.word	0x08009b2d
 8009b14:	08009b35 	.word	0x08009b35
 8009b18:	08009b3d 	.word	0x08009b3d
 8009b1c:	08009b45 	.word	0x08009b45
 8009b20:	08009b4d 	.word	0x08009b4d
 8009b24:	2300      	movs	r3, #0
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2a:	e1b6      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009b2c:	2304      	movs	r3, #4
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b32:	e1b2      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009b34:	2308      	movs	r3, #8
 8009b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b3a:	e1ae      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009b3c:	2310      	movs	r3, #16
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b42:	e1aa      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009b44:	2320      	movs	r3, #32
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b4a:	e1a6      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009b4c:	2340      	movs	r3, #64	; 0x40
 8009b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b52:	e1a2      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009b54:	2380      	movs	r3, #128	; 0x80
 8009b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5a:	e19e      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a35      	ldr	r2, [pc, #212]	; (8009c38 <UART_SetConfig+0x344>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d130      	bne.n	8009bc8 <UART_SetConfig+0x2d4>
 8009b66:	4b31      	ldr	r3, [pc, #196]	; (8009c2c <UART_SetConfig+0x338>)
 8009b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6a:	f003 0307 	and.w	r3, r3, #7
 8009b6e:	2b05      	cmp	r3, #5
 8009b70:	d826      	bhi.n	8009bc0 <UART_SetConfig+0x2cc>
 8009b72:	a201      	add	r2, pc, #4	; (adr r2, 8009b78 <UART_SetConfig+0x284>)
 8009b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b78:	08009b91 	.word	0x08009b91
 8009b7c:	08009b99 	.word	0x08009b99
 8009b80:	08009ba1 	.word	0x08009ba1
 8009b84:	08009ba9 	.word	0x08009ba9
 8009b88:	08009bb1 	.word	0x08009bb1
 8009b8c:	08009bb9 	.word	0x08009bb9
 8009b90:	2300      	movs	r3, #0
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b96:	e180      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009b98:	2304      	movs	r3, #4
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9e:	e17c      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009ba0:	2308      	movs	r3, #8
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ba6:	e178      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009ba8:	2310      	movs	r3, #16
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bae:	e174      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009bb0:	2320      	movs	r3, #32
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bb6:	e170      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009bb8:	2340      	movs	r3, #64	; 0x40
 8009bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bbe:	e16c      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009bc0:	2380      	movs	r3, #128	; 0x80
 8009bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bc6:	e168      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a1b      	ldr	r2, [pc, #108]	; (8009c3c <UART_SetConfig+0x348>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d142      	bne.n	8009c58 <UART_SetConfig+0x364>
 8009bd2:	4b16      	ldr	r3, [pc, #88]	; (8009c2c <UART_SetConfig+0x338>)
 8009bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd6:	f003 0307 	and.w	r3, r3, #7
 8009bda:	2b05      	cmp	r3, #5
 8009bdc:	d838      	bhi.n	8009c50 <UART_SetConfig+0x35c>
 8009bde:	a201      	add	r2, pc, #4	; (adr r2, 8009be4 <UART_SetConfig+0x2f0>)
 8009be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be4:	08009bfd 	.word	0x08009bfd
 8009be8:	08009c05 	.word	0x08009c05
 8009bec:	08009c0d 	.word	0x08009c0d
 8009bf0:	08009c15 	.word	0x08009c15
 8009bf4:	08009c41 	.word	0x08009c41
 8009bf8:	08009c49 	.word	0x08009c49
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c02:	e14a      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009c04:	2304      	movs	r3, #4
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c0a:	e146      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009c0c:	2308      	movs	r3, #8
 8009c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c12:	e142      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009c14:	2310      	movs	r3, #16
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c1a:	e13e      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009c1c:	cfff69f3 	.word	0xcfff69f3
 8009c20:	58000c00 	.word	0x58000c00
 8009c24:	11fff4ff 	.word	0x11fff4ff
 8009c28:	40011000 	.word	0x40011000
 8009c2c:	58024400 	.word	0x58024400
 8009c30:	40004400 	.word	0x40004400
 8009c34:	40004800 	.word	0x40004800
 8009c38:	40004c00 	.word	0x40004c00
 8009c3c:	40005000 	.word	0x40005000
 8009c40:	2320      	movs	r3, #32
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c46:	e128      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009c48:	2340      	movs	r3, #64	; 0x40
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4e:	e124      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009c50:	2380      	movs	r3, #128	; 0x80
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c56:	e120      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4acb      	ldr	r2, [pc, #812]	; (8009f8c <UART_SetConfig+0x698>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d176      	bne.n	8009d50 <UART_SetConfig+0x45c>
 8009c62:	4bcb      	ldr	r3, [pc, #812]	; (8009f90 <UART_SetConfig+0x69c>)
 8009c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c6a:	2b28      	cmp	r3, #40	; 0x28
 8009c6c:	d86c      	bhi.n	8009d48 <UART_SetConfig+0x454>
 8009c6e:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <UART_SetConfig+0x380>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009d19 	.word	0x08009d19
 8009c78:	08009d49 	.word	0x08009d49
 8009c7c:	08009d49 	.word	0x08009d49
 8009c80:	08009d49 	.word	0x08009d49
 8009c84:	08009d49 	.word	0x08009d49
 8009c88:	08009d49 	.word	0x08009d49
 8009c8c:	08009d49 	.word	0x08009d49
 8009c90:	08009d49 	.word	0x08009d49
 8009c94:	08009d21 	.word	0x08009d21
 8009c98:	08009d49 	.word	0x08009d49
 8009c9c:	08009d49 	.word	0x08009d49
 8009ca0:	08009d49 	.word	0x08009d49
 8009ca4:	08009d49 	.word	0x08009d49
 8009ca8:	08009d49 	.word	0x08009d49
 8009cac:	08009d49 	.word	0x08009d49
 8009cb0:	08009d49 	.word	0x08009d49
 8009cb4:	08009d29 	.word	0x08009d29
 8009cb8:	08009d49 	.word	0x08009d49
 8009cbc:	08009d49 	.word	0x08009d49
 8009cc0:	08009d49 	.word	0x08009d49
 8009cc4:	08009d49 	.word	0x08009d49
 8009cc8:	08009d49 	.word	0x08009d49
 8009ccc:	08009d49 	.word	0x08009d49
 8009cd0:	08009d49 	.word	0x08009d49
 8009cd4:	08009d31 	.word	0x08009d31
 8009cd8:	08009d49 	.word	0x08009d49
 8009cdc:	08009d49 	.word	0x08009d49
 8009ce0:	08009d49 	.word	0x08009d49
 8009ce4:	08009d49 	.word	0x08009d49
 8009ce8:	08009d49 	.word	0x08009d49
 8009cec:	08009d49 	.word	0x08009d49
 8009cf0:	08009d49 	.word	0x08009d49
 8009cf4:	08009d39 	.word	0x08009d39
 8009cf8:	08009d49 	.word	0x08009d49
 8009cfc:	08009d49 	.word	0x08009d49
 8009d00:	08009d49 	.word	0x08009d49
 8009d04:	08009d49 	.word	0x08009d49
 8009d08:	08009d49 	.word	0x08009d49
 8009d0c:	08009d49 	.word	0x08009d49
 8009d10:	08009d49 	.word	0x08009d49
 8009d14:	08009d41 	.word	0x08009d41
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d1e:	e0bc      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009d20:	2304      	movs	r3, #4
 8009d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d26:	e0b8      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009d28:	2308      	movs	r3, #8
 8009d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d2e:	e0b4      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009d30:	2310      	movs	r3, #16
 8009d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d36:	e0b0      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009d38:	2320      	movs	r3, #32
 8009d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3e:	e0ac      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009d40:	2340      	movs	r3, #64	; 0x40
 8009d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d46:	e0a8      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009d48:	2380      	movs	r3, #128	; 0x80
 8009d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4e:	e0a4      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a8f      	ldr	r2, [pc, #572]	; (8009f94 <UART_SetConfig+0x6a0>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d130      	bne.n	8009dbc <UART_SetConfig+0x4c8>
 8009d5a:	4b8d      	ldr	r3, [pc, #564]	; (8009f90 <UART_SetConfig+0x69c>)
 8009d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5e:	f003 0307 	and.w	r3, r3, #7
 8009d62:	2b05      	cmp	r3, #5
 8009d64:	d826      	bhi.n	8009db4 <UART_SetConfig+0x4c0>
 8009d66:	a201      	add	r2, pc, #4	; (adr r2, 8009d6c <UART_SetConfig+0x478>)
 8009d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6c:	08009d85 	.word	0x08009d85
 8009d70:	08009d8d 	.word	0x08009d8d
 8009d74:	08009d95 	.word	0x08009d95
 8009d78:	08009d9d 	.word	0x08009d9d
 8009d7c:	08009da5 	.word	0x08009da5
 8009d80:	08009dad 	.word	0x08009dad
 8009d84:	2300      	movs	r3, #0
 8009d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d8a:	e086      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009d8c:	2304      	movs	r3, #4
 8009d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d92:	e082      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009d94:	2308      	movs	r3, #8
 8009d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d9a:	e07e      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009d9c:	2310      	movs	r3, #16
 8009d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009da2:	e07a      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009da4:	2320      	movs	r3, #32
 8009da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009daa:	e076      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009dac:	2340      	movs	r3, #64	; 0x40
 8009dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db2:	e072      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009db4:	2380      	movs	r3, #128	; 0x80
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dba:	e06e      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a75      	ldr	r2, [pc, #468]	; (8009f98 <UART_SetConfig+0x6a4>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d130      	bne.n	8009e28 <UART_SetConfig+0x534>
 8009dc6:	4b72      	ldr	r3, [pc, #456]	; (8009f90 <UART_SetConfig+0x69c>)
 8009dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dca:	f003 0307 	and.w	r3, r3, #7
 8009dce:	2b05      	cmp	r3, #5
 8009dd0:	d826      	bhi.n	8009e20 <UART_SetConfig+0x52c>
 8009dd2:	a201      	add	r2, pc, #4	; (adr r2, 8009dd8 <UART_SetConfig+0x4e4>)
 8009dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd8:	08009df1 	.word	0x08009df1
 8009ddc:	08009df9 	.word	0x08009df9
 8009de0:	08009e01 	.word	0x08009e01
 8009de4:	08009e09 	.word	0x08009e09
 8009de8:	08009e11 	.word	0x08009e11
 8009dec:	08009e19 	.word	0x08009e19
 8009df0:	2300      	movs	r3, #0
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009df6:	e050      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009df8:	2304      	movs	r3, #4
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dfe:	e04c      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009e00:	2308      	movs	r3, #8
 8009e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e06:	e048      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009e08:	2310      	movs	r3, #16
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e0e:	e044      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009e10:	2320      	movs	r3, #32
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e16:	e040      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009e18:	2340      	movs	r3, #64	; 0x40
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e1e:	e03c      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009e20:	2380      	movs	r3, #128	; 0x80
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e26:	e038      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a5b      	ldr	r2, [pc, #364]	; (8009f9c <UART_SetConfig+0x6a8>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d130      	bne.n	8009e94 <UART_SetConfig+0x5a0>
 8009e32:	4b57      	ldr	r3, [pc, #348]	; (8009f90 <UART_SetConfig+0x69c>)
 8009e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e36:	f003 0307 	and.w	r3, r3, #7
 8009e3a:	2b05      	cmp	r3, #5
 8009e3c:	d826      	bhi.n	8009e8c <UART_SetConfig+0x598>
 8009e3e:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <UART_SetConfig+0x550>)
 8009e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e44:	08009e5d 	.word	0x08009e5d
 8009e48:	08009e65 	.word	0x08009e65
 8009e4c:	08009e6d 	.word	0x08009e6d
 8009e50:	08009e75 	.word	0x08009e75
 8009e54:	08009e7d 	.word	0x08009e7d
 8009e58:	08009e85 	.word	0x08009e85
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e62:	e01a      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009e64:	2304      	movs	r3, #4
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e6a:	e016      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009e6c:	2308      	movs	r3, #8
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e72:	e012      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009e74:	2310      	movs	r3, #16
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7a:	e00e      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009e7c:	2320      	movs	r3, #32
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e82:	e00a      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009e84:	2340      	movs	r3, #64	; 0x40
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e8a:	e006      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009e8c:	2380      	movs	r3, #128	; 0x80
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e92:	e002      	b.n	8009e9a <UART_SetConfig+0x5a6>
 8009e94:	2380      	movs	r3, #128	; 0x80
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a3f      	ldr	r2, [pc, #252]	; (8009f9c <UART_SetConfig+0x6a8>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	f040 80f8 	bne.w	800a096 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ea6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009eaa:	2b20      	cmp	r3, #32
 8009eac:	dc46      	bgt.n	8009f3c <UART_SetConfig+0x648>
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	f2c0 8082 	blt.w	8009fb8 <UART_SetConfig+0x6c4>
 8009eb4:	3b02      	subs	r3, #2
 8009eb6:	2b1e      	cmp	r3, #30
 8009eb8:	d87e      	bhi.n	8009fb8 <UART_SetConfig+0x6c4>
 8009eba:	a201      	add	r2, pc, #4	; (adr r2, 8009ec0 <UART_SetConfig+0x5cc>)
 8009ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec0:	08009f43 	.word	0x08009f43
 8009ec4:	08009fb9 	.word	0x08009fb9
 8009ec8:	08009f4b 	.word	0x08009f4b
 8009ecc:	08009fb9 	.word	0x08009fb9
 8009ed0:	08009fb9 	.word	0x08009fb9
 8009ed4:	08009fb9 	.word	0x08009fb9
 8009ed8:	08009f5b 	.word	0x08009f5b
 8009edc:	08009fb9 	.word	0x08009fb9
 8009ee0:	08009fb9 	.word	0x08009fb9
 8009ee4:	08009fb9 	.word	0x08009fb9
 8009ee8:	08009fb9 	.word	0x08009fb9
 8009eec:	08009fb9 	.word	0x08009fb9
 8009ef0:	08009fb9 	.word	0x08009fb9
 8009ef4:	08009fb9 	.word	0x08009fb9
 8009ef8:	08009f6b 	.word	0x08009f6b
 8009efc:	08009fb9 	.word	0x08009fb9
 8009f00:	08009fb9 	.word	0x08009fb9
 8009f04:	08009fb9 	.word	0x08009fb9
 8009f08:	08009fb9 	.word	0x08009fb9
 8009f0c:	08009fb9 	.word	0x08009fb9
 8009f10:	08009fb9 	.word	0x08009fb9
 8009f14:	08009fb9 	.word	0x08009fb9
 8009f18:	08009fb9 	.word	0x08009fb9
 8009f1c:	08009fb9 	.word	0x08009fb9
 8009f20:	08009fb9 	.word	0x08009fb9
 8009f24:	08009fb9 	.word	0x08009fb9
 8009f28:	08009fb9 	.word	0x08009fb9
 8009f2c:	08009fb9 	.word	0x08009fb9
 8009f30:	08009fb9 	.word	0x08009fb9
 8009f34:	08009fb9 	.word	0x08009fb9
 8009f38:	08009fab 	.word	0x08009fab
 8009f3c:	2b40      	cmp	r3, #64	; 0x40
 8009f3e:	d037      	beq.n	8009fb0 <UART_SetConfig+0x6bc>
 8009f40:	e03a      	b.n	8009fb8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f42:	f7fe f935 	bl	80081b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f48:	e03c      	b.n	8009fc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe f944 	bl	80081dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f58:	e034      	b.n	8009fc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f5a:	f107 0318 	add.w	r3, r7, #24
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe fa90 	bl	8008484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f68:	e02c      	b.n	8009fc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f6a:	4b09      	ldr	r3, [pc, #36]	; (8009f90 <UART_SetConfig+0x69c>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0320 	and.w	r3, r3, #32
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d016      	beq.n	8009fa4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f76:	4b06      	ldr	r3, [pc, #24]	; (8009f90 <UART_SetConfig+0x69c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	08db      	lsrs	r3, r3, #3
 8009f7c:	f003 0303 	and.w	r3, r3, #3
 8009f80:	4a07      	ldr	r2, [pc, #28]	; (8009fa0 <UART_SetConfig+0x6ac>)
 8009f82:	fa22 f303 	lsr.w	r3, r2, r3
 8009f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f88:	e01c      	b.n	8009fc4 <UART_SetConfig+0x6d0>
 8009f8a:	bf00      	nop
 8009f8c:	40011400 	.word	0x40011400
 8009f90:	58024400 	.word	0x58024400
 8009f94:	40007800 	.word	0x40007800
 8009f98:	40007c00 	.word	0x40007c00
 8009f9c:	58000c00 	.word	0x58000c00
 8009fa0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009fa4:	4b9d      	ldr	r3, [pc, #628]	; (800a21c <UART_SetConfig+0x928>)
 8009fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fa8:	e00c      	b.n	8009fc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009faa:	4b9d      	ldr	r3, [pc, #628]	; (800a220 <UART_SetConfig+0x92c>)
 8009fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fae:	e009      	b.n	8009fc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fb6:	e005      	b.n	8009fc4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009fc2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 81de 	beq.w	800a388 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd0:	4a94      	ldr	r2, [pc, #592]	; (800a224 <UART_SetConfig+0x930>)
 8009fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fde:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	005b      	lsls	r3, r3, #1
 8009fe8:	4413      	add	r3, r2
 8009fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d305      	bcc.n	8009ffc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d903      	bls.n	800a004 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a002:	e1c1      	b.n	800a388 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a006:	2200      	movs	r2, #0
 800a008:	60bb      	str	r3, [r7, #8]
 800a00a:	60fa      	str	r2, [r7, #12]
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	4a84      	ldr	r2, [pc, #528]	; (800a224 <UART_SetConfig+0x930>)
 800a012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a016:	b29b      	uxth	r3, r3
 800a018:	2200      	movs	r2, #0
 800a01a:	603b      	str	r3, [r7, #0]
 800a01c:	607a      	str	r2, [r7, #4]
 800a01e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a022:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a026:	f7f6 f9b3 	bl	8000390 <__aeabi_uldivmod>
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	4610      	mov	r0, r2
 800a030:	4619      	mov	r1, r3
 800a032:	f04f 0200 	mov.w	r2, #0
 800a036:	f04f 0300 	mov.w	r3, #0
 800a03a:	020b      	lsls	r3, r1, #8
 800a03c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a040:	0202      	lsls	r2, r0, #8
 800a042:	6979      	ldr	r1, [r7, #20]
 800a044:	6849      	ldr	r1, [r1, #4]
 800a046:	0849      	lsrs	r1, r1, #1
 800a048:	2000      	movs	r0, #0
 800a04a:	460c      	mov	r4, r1
 800a04c:	4605      	mov	r5, r0
 800a04e:	eb12 0804 	adds.w	r8, r2, r4
 800a052:	eb43 0905 	adc.w	r9, r3, r5
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	469a      	mov	sl, r3
 800a05e:	4693      	mov	fp, r2
 800a060:	4652      	mov	r2, sl
 800a062:	465b      	mov	r3, fp
 800a064:	4640      	mov	r0, r8
 800a066:	4649      	mov	r1, r9
 800a068:	f7f6 f992 	bl	8000390 <__aeabi_uldivmod>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	4613      	mov	r3, r2
 800a072:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a07a:	d308      	bcc.n	800a08e <UART_SetConfig+0x79a>
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a082:	d204      	bcs.n	800a08e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a08a:	60da      	str	r2, [r3, #12]
 800a08c:	e17c      	b.n	800a388 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a094:	e178      	b.n	800a388 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a09e:	f040 80c5 	bne.w	800a22c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a0a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a0a6:	2b20      	cmp	r3, #32
 800a0a8:	dc48      	bgt.n	800a13c <UART_SetConfig+0x848>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	db7b      	blt.n	800a1a6 <UART_SetConfig+0x8b2>
 800a0ae:	2b20      	cmp	r3, #32
 800a0b0:	d879      	bhi.n	800a1a6 <UART_SetConfig+0x8b2>
 800a0b2:	a201      	add	r2, pc, #4	; (adr r2, 800a0b8 <UART_SetConfig+0x7c4>)
 800a0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b8:	0800a143 	.word	0x0800a143
 800a0bc:	0800a14b 	.word	0x0800a14b
 800a0c0:	0800a1a7 	.word	0x0800a1a7
 800a0c4:	0800a1a7 	.word	0x0800a1a7
 800a0c8:	0800a153 	.word	0x0800a153
 800a0cc:	0800a1a7 	.word	0x0800a1a7
 800a0d0:	0800a1a7 	.word	0x0800a1a7
 800a0d4:	0800a1a7 	.word	0x0800a1a7
 800a0d8:	0800a163 	.word	0x0800a163
 800a0dc:	0800a1a7 	.word	0x0800a1a7
 800a0e0:	0800a1a7 	.word	0x0800a1a7
 800a0e4:	0800a1a7 	.word	0x0800a1a7
 800a0e8:	0800a1a7 	.word	0x0800a1a7
 800a0ec:	0800a1a7 	.word	0x0800a1a7
 800a0f0:	0800a1a7 	.word	0x0800a1a7
 800a0f4:	0800a1a7 	.word	0x0800a1a7
 800a0f8:	0800a173 	.word	0x0800a173
 800a0fc:	0800a1a7 	.word	0x0800a1a7
 800a100:	0800a1a7 	.word	0x0800a1a7
 800a104:	0800a1a7 	.word	0x0800a1a7
 800a108:	0800a1a7 	.word	0x0800a1a7
 800a10c:	0800a1a7 	.word	0x0800a1a7
 800a110:	0800a1a7 	.word	0x0800a1a7
 800a114:	0800a1a7 	.word	0x0800a1a7
 800a118:	0800a1a7 	.word	0x0800a1a7
 800a11c:	0800a1a7 	.word	0x0800a1a7
 800a120:	0800a1a7 	.word	0x0800a1a7
 800a124:	0800a1a7 	.word	0x0800a1a7
 800a128:	0800a1a7 	.word	0x0800a1a7
 800a12c:	0800a1a7 	.word	0x0800a1a7
 800a130:	0800a1a7 	.word	0x0800a1a7
 800a134:	0800a1a7 	.word	0x0800a1a7
 800a138:	0800a199 	.word	0x0800a199
 800a13c:	2b40      	cmp	r3, #64	; 0x40
 800a13e:	d02e      	beq.n	800a19e <UART_SetConfig+0x8aa>
 800a140:	e031      	b.n	800a1a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a142:	f7fc fbf1 	bl	8006928 <HAL_RCC_GetPCLK1Freq>
 800a146:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a148:	e033      	b.n	800a1b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a14a:	f7fc fc03 	bl	8006954 <HAL_RCC_GetPCLK2Freq>
 800a14e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a150:	e02f      	b.n	800a1b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a156:	4618      	mov	r0, r3
 800a158:	f7fe f840 	bl	80081dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a160:	e027      	b.n	800a1b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a162:	f107 0318 	add.w	r3, r7, #24
 800a166:	4618      	mov	r0, r3
 800a168:	f7fe f98c 	bl	8008484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a170:	e01f      	b.n	800a1b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a172:	4b2d      	ldr	r3, [pc, #180]	; (800a228 <UART_SetConfig+0x934>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 0320 	and.w	r3, r3, #32
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d009      	beq.n	800a192 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a17e:	4b2a      	ldr	r3, [pc, #168]	; (800a228 <UART_SetConfig+0x934>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	08db      	lsrs	r3, r3, #3
 800a184:	f003 0303 	and.w	r3, r3, #3
 800a188:	4a24      	ldr	r2, [pc, #144]	; (800a21c <UART_SetConfig+0x928>)
 800a18a:	fa22 f303 	lsr.w	r3, r2, r3
 800a18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a190:	e00f      	b.n	800a1b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a192:	4b22      	ldr	r3, [pc, #136]	; (800a21c <UART_SetConfig+0x928>)
 800a194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a196:	e00c      	b.n	800a1b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a198:	4b21      	ldr	r3, [pc, #132]	; (800a220 <UART_SetConfig+0x92c>)
 800a19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a19c:	e009      	b.n	800a1b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a19e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1a4:	e005      	b.n	800a1b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a1b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 80e7 	beq.w	800a388 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	4a19      	ldr	r2, [pc, #100]	; (800a224 <UART_SetConfig+0x930>)
 800a1c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1cc:	005a      	lsls	r2, r3, #1
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	085b      	lsrs	r3, r3, #1
 800a1d4:	441a      	add	r2, r3
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	2b0f      	cmp	r3, #15
 800a1e4:	d916      	bls.n	800a214 <UART_SetConfig+0x920>
 800a1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1ec:	d212      	bcs.n	800a214 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	f023 030f 	bic.w	r3, r3, #15
 800a1f6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	085b      	lsrs	r3, r3, #1
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	f003 0307 	and.w	r3, r3, #7
 800a202:	b29a      	uxth	r2, r3
 800a204:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a206:	4313      	orrs	r3, r2
 800a208:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a210:	60da      	str	r2, [r3, #12]
 800a212:	e0b9      	b.n	800a388 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a21a:	e0b5      	b.n	800a388 <UART_SetConfig+0xa94>
 800a21c:	03d09000 	.word	0x03d09000
 800a220:	003d0900 	.word	0x003d0900
 800a224:	0800bac4 	.word	0x0800bac4
 800a228:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a22c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a230:	2b20      	cmp	r3, #32
 800a232:	dc49      	bgt.n	800a2c8 <UART_SetConfig+0x9d4>
 800a234:	2b00      	cmp	r3, #0
 800a236:	db7c      	blt.n	800a332 <UART_SetConfig+0xa3e>
 800a238:	2b20      	cmp	r3, #32
 800a23a:	d87a      	bhi.n	800a332 <UART_SetConfig+0xa3e>
 800a23c:	a201      	add	r2, pc, #4	; (adr r2, 800a244 <UART_SetConfig+0x950>)
 800a23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a242:	bf00      	nop
 800a244:	0800a2cf 	.word	0x0800a2cf
 800a248:	0800a2d7 	.word	0x0800a2d7
 800a24c:	0800a333 	.word	0x0800a333
 800a250:	0800a333 	.word	0x0800a333
 800a254:	0800a2df 	.word	0x0800a2df
 800a258:	0800a333 	.word	0x0800a333
 800a25c:	0800a333 	.word	0x0800a333
 800a260:	0800a333 	.word	0x0800a333
 800a264:	0800a2ef 	.word	0x0800a2ef
 800a268:	0800a333 	.word	0x0800a333
 800a26c:	0800a333 	.word	0x0800a333
 800a270:	0800a333 	.word	0x0800a333
 800a274:	0800a333 	.word	0x0800a333
 800a278:	0800a333 	.word	0x0800a333
 800a27c:	0800a333 	.word	0x0800a333
 800a280:	0800a333 	.word	0x0800a333
 800a284:	0800a2ff 	.word	0x0800a2ff
 800a288:	0800a333 	.word	0x0800a333
 800a28c:	0800a333 	.word	0x0800a333
 800a290:	0800a333 	.word	0x0800a333
 800a294:	0800a333 	.word	0x0800a333
 800a298:	0800a333 	.word	0x0800a333
 800a29c:	0800a333 	.word	0x0800a333
 800a2a0:	0800a333 	.word	0x0800a333
 800a2a4:	0800a333 	.word	0x0800a333
 800a2a8:	0800a333 	.word	0x0800a333
 800a2ac:	0800a333 	.word	0x0800a333
 800a2b0:	0800a333 	.word	0x0800a333
 800a2b4:	0800a333 	.word	0x0800a333
 800a2b8:	0800a333 	.word	0x0800a333
 800a2bc:	0800a333 	.word	0x0800a333
 800a2c0:	0800a333 	.word	0x0800a333
 800a2c4:	0800a325 	.word	0x0800a325
 800a2c8:	2b40      	cmp	r3, #64	; 0x40
 800a2ca:	d02e      	beq.n	800a32a <UART_SetConfig+0xa36>
 800a2cc:	e031      	b.n	800a332 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2ce:	f7fc fb2b 	bl	8006928 <HAL_RCC_GetPCLK1Freq>
 800a2d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2d4:	e033      	b.n	800a33e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2d6:	f7fc fb3d 	bl	8006954 <HAL_RCC_GetPCLK2Freq>
 800a2da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2dc:	e02f      	b.n	800a33e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fd ff7a 	bl	80081dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2ec:	e027      	b.n	800a33e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ee:	f107 0318 	add.w	r3, r7, #24
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe f8c6 	bl	8008484 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2fc:	e01f      	b.n	800a33e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2fe:	4b2d      	ldr	r3, [pc, #180]	; (800a3b4 <UART_SetConfig+0xac0>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0320 	and.w	r3, r3, #32
 800a306:	2b00      	cmp	r3, #0
 800a308:	d009      	beq.n	800a31e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a30a:	4b2a      	ldr	r3, [pc, #168]	; (800a3b4 <UART_SetConfig+0xac0>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	08db      	lsrs	r3, r3, #3
 800a310:	f003 0303 	and.w	r3, r3, #3
 800a314:	4a28      	ldr	r2, [pc, #160]	; (800a3b8 <UART_SetConfig+0xac4>)
 800a316:	fa22 f303 	lsr.w	r3, r2, r3
 800a31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a31c:	e00f      	b.n	800a33e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a31e:	4b26      	ldr	r3, [pc, #152]	; (800a3b8 <UART_SetConfig+0xac4>)
 800a320:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a322:	e00c      	b.n	800a33e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a324:	4b25      	ldr	r3, [pc, #148]	; (800a3bc <UART_SetConfig+0xac8>)
 800a326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a328:	e009      	b.n	800a33e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a32a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a330:	e005      	b.n	800a33e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a332:	2300      	movs	r3, #0
 800a334:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a33c:	bf00      	nop
    }

    if (pclk != 0U)
 800a33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a340:	2b00      	cmp	r3, #0
 800a342:	d021      	beq.n	800a388 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a348:	4a1d      	ldr	r2, [pc, #116]	; (800a3c0 <UART_SetConfig+0xacc>)
 800a34a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a34e:	461a      	mov	r2, r3
 800a350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a352:	fbb3 f2f2 	udiv	r2, r3, r2
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	085b      	lsrs	r3, r3, #1
 800a35c:	441a      	add	r2, r3
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	fbb2 f3f3 	udiv	r3, r2, r3
 800a366:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36a:	2b0f      	cmp	r3, #15
 800a36c:	d909      	bls.n	800a382 <UART_SetConfig+0xa8e>
 800a36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a374:	d205      	bcs.n	800a382 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a378:	b29a      	uxth	r2, r3
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	60da      	str	r2, [r3, #12]
 800a380:	e002      	b.n	800a388 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	2201      	movs	r2, #1
 800a394:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	2200      	movs	r2, #0
 800a39c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a3a4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3748      	adds	r7, #72	; 0x48
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3b2:	bf00      	nop
 800a3b4:	58024400 	.word	0x58024400
 800a3b8:	03d09000 	.word	0x03d09000
 800a3bc:	003d0900 	.word	0x003d0900
 800a3c0:	0800bac4 	.word	0x0800bac4

0800a3c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00a      	beq.n	800a3ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a414:	f003 0304 	and.w	r3, r3, #4
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00a      	beq.n	800a432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a436:	f003 0308 	and.w	r3, r3, #8
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00a      	beq.n	800a454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a458:	f003 0310 	and.w	r3, r3, #16
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00a      	beq.n	800a476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	430a      	orrs	r2, r1
 800a474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00a      	beq.n	800a498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01a      	beq.n	800a4da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4c2:	d10a      	bne.n	800a4da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00a      	beq.n	800a4fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	605a      	str	r2, [r3, #4]
  }
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af02      	add	r7, sp, #8
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a518:	f7f8 fa42 	bl	80029a0 <HAL_GetTick>
 800a51c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 0308 	and.w	r3, r3, #8
 800a528:	2b08      	cmp	r3, #8
 800a52a:	d10e      	bne.n	800a54a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a52c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f82f 	bl	800a59e <UART_WaitOnFlagUntilTimeout>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a546:	2303      	movs	r3, #3
 800a548:	e025      	b.n	800a596 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 0304 	and.w	r3, r3, #4
 800a554:	2b04      	cmp	r3, #4
 800a556:	d10e      	bne.n	800a576 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f819 	bl	800a59e <UART_WaitOnFlagUntilTimeout>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e00f      	b.n	800a596 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2220      	movs	r2, #32
 800a57a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2220      	movs	r2, #32
 800a582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b09c      	sub	sp, #112	; 0x70
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	60f8      	str	r0, [r7, #12]
 800a5a6:	60b9      	str	r1, [r7, #8]
 800a5a8:	603b      	str	r3, [r7, #0]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5ae:	e0a9      	b.n	800a704 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b6:	f000 80a5 	beq.w	800a704 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ba:	f7f8 f9f1 	bl	80029a0 <HAL_GetTick>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d302      	bcc.n	800a5d0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a5ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d140      	bne.n	800a652 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5d8:	e853 3f00 	ldrex	r3, [r3]
 800a5dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a5de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a5e4:	667b      	str	r3, [r7, #100]	; 0x64
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a5f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a5f6:	e841 2300 	strex	r3, r2, [r1]
 800a5fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a5fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1e6      	bne.n	800a5d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	3308      	adds	r3, #8
 800a608:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a60c:	e853 3f00 	ldrex	r3, [r3]
 800a610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a614:	f023 0301 	bic.w	r3, r3, #1
 800a618:	663b      	str	r3, [r7, #96]	; 0x60
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3308      	adds	r3, #8
 800a620:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a622:	64ba      	str	r2, [r7, #72]	; 0x48
 800a624:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a62a:	e841 2300 	strex	r3, r2, [r1]
 800a62e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1e5      	bne.n	800a602 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2220      	movs	r2, #32
 800a63a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2220      	movs	r2, #32
 800a642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a64e:	2303      	movs	r3, #3
 800a650:	e069      	b.n	800a726 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0304 	and.w	r3, r3, #4
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d051      	beq.n	800a704 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a66a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a66e:	d149      	bne.n	800a704 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a678:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a682:	e853 3f00 	ldrex	r3, [r3]
 800a686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a68e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	461a      	mov	r2, r3
 800a696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a698:	637b      	str	r3, [r7, #52]	; 0x34
 800a69a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a69e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6a0:	e841 2300 	strex	r3, r2, [r1]
 800a6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e6      	bne.n	800a67a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	3308      	adds	r3, #8
 800a6b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	e853 3f00 	ldrex	r3, [r3]
 800a6ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	f023 0301 	bic.w	r3, r3, #1
 800a6c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3308      	adds	r3, #8
 800a6ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a6cc:	623a      	str	r2, [r7, #32]
 800a6ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d0:	69f9      	ldr	r1, [r7, #28]
 800a6d2:	6a3a      	ldr	r2, [r7, #32]
 800a6d4:	e841 2300 	strex	r3, r2, [r1]
 800a6d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1e5      	bne.n	800a6ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2220      	movs	r2, #32
 800a6ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a700:	2303      	movs	r3, #3
 800a702:	e010      	b.n	800a726 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	69da      	ldr	r2, [r3, #28]
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	4013      	ands	r3, r2
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	429a      	cmp	r2, r3
 800a712:	bf0c      	ite	eq
 800a714:	2301      	moveq	r3, #1
 800a716:	2300      	movne	r3, #0
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	461a      	mov	r2, r3
 800a71c:	79fb      	ldrb	r3, [r7, #7]
 800a71e:	429a      	cmp	r2, r3
 800a720:	f43f af46 	beq.w	800a5b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3770      	adds	r7, #112	; 0x70
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a72e:	b480      	push	{r7}
 800a730:	b085      	sub	sp, #20
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d101      	bne.n	800a744 <HAL_UARTEx_DisableFifoMode+0x16>
 800a740:	2302      	movs	r3, #2
 800a742:	e027      	b.n	800a794 <HAL_UARTEx_DisableFifoMode+0x66>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2224      	movs	r2, #36	; 0x24
 800a750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f022 0201 	bic.w	r2, r2, #1
 800a76a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a772:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68fa      	ldr	r2, [r7, #12]
 800a780:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2220      	movs	r2, #32
 800a786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d101      	bne.n	800a7b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	e02d      	b.n	800a814 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2224      	movs	r2, #36	; 0x24
 800a7c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f022 0201 	bic.w	r2, r2, #1
 800a7de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f84f 	bl	800a898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2220      	movs	r2, #32
 800a806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d101      	bne.n	800a834 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a830:	2302      	movs	r3, #2
 800a832:	e02d      	b.n	800a890 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2224      	movs	r2, #36	; 0x24
 800a840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f022 0201 	bic.w	r2, r2, #1
 800a85a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	430a      	orrs	r2, r1
 800a86e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f811 	bl	800a898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2220      	movs	r2, #32
 800a882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d108      	bne.n	800a8ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8b8:	e031      	b.n	800a91e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8ba:	2310      	movs	r3, #16
 800a8bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8be:	2310      	movs	r3, #16
 800a8c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	0e5b      	lsrs	r3, r3, #25
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	f003 0307 	and.w	r3, r3, #7
 800a8d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	0f5b      	lsrs	r3, r3, #29
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	f003 0307 	and.w	r3, r3, #7
 800a8e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8e2:	7bbb      	ldrb	r3, [r7, #14]
 800a8e4:	7b3a      	ldrb	r2, [r7, #12]
 800a8e6:	4911      	ldr	r1, [pc, #68]	; (800a92c <UARTEx_SetNbDataToProcess+0x94>)
 800a8e8:	5c8a      	ldrb	r2, [r1, r2]
 800a8ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a8ee:	7b3a      	ldrb	r2, [r7, #12]
 800a8f0:	490f      	ldr	r1, [pc, #60]	; (800a930 <UARTEx_SetNbDataToProcess+0x98>)
 800a8f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	7b7a      	ldrb	r2, [r7, #13]
 800a904:	4909      	ldr	r1, [pc, #36]	; (800a92c <UARTEx_SetNbDataToProcess+0x94>)
 800a906:	5c8a      	ldrb	r2, [r1, r2]
 800a908:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a90c:	7b7a      	ldrb	r2, [r7, #13]
 800a90e:	4908      	ldr	r1, [pc, #32]	; (800a930 <UARTEx_SetNbDataToProcess+0x98>)
 800a910:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a912:	fb93 f3f2 	sdiv	r3, r3, r2
 800a916:	b29a      	uxth	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	0800badc 	.word	0x0800badc
 800a930:	0800bae4 	.word	0x0800bae4

0800a934 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d121      	bne.n	800a98a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	4b27      	ldr	r3, [pc, #156]	; (800a9e8 <FMC_SDRAM_Init+0xb4>)
 800a94c:	4013      	ands	r3, r2
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	6851      	ldr	r1, [r2, #4]
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	6892      	ldr	r2, [r2, #8]
 800a956:	4311      	orrs	r1, r2
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	68d2      	ldr	r2, [r2, #12]
 800a95c:	4311      	orrs	r1, r2
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	6912      	ldr	r2, [r2, #16]
 800a962:	4311      	orrs	r1, r2
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	6952      	ldr	r2, [r2, #20]
 800a968:	4311      	orrs	r1, r2
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	6992      	ldr	r2, [r2, #24]
 800a96e:	4311      	orrs	r1, r2
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	69d2      	ldr	r2, [r2, #28]
 800a974:	4311      	orrs	r1, r2
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	6a12      	ldr	r2, [r2, #32]
 800a97a:	4311      	orrs	r1, r2
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a980:	430a      	orrs	r2, r1
 800a982:	431a      	orrs	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	e026      	b.n	800a9d8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	69d9      	ldr	r1, [r3, #28]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	4319      	orrs	r1, r3
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	430b      	orrs	r3, r1
 800a9a2:	431a      	orrs	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	4b0e      	ldr	r3, [pc, #56]	; (800a9e8 <FMC_SDRAM_Init+0xb4>)
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	6851      	ldr	r1, [r2, #4]
 800a9b4:	683a      	ldr	r2, [r7, #0]
 800a9b6:	6892      	ldr	r2, [r2, #8]
 800a9b8:	4311      	orrs	r1, r2
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	68d2      	ldr	r2, [r2, #12]
 800a9be:	4311      	orrs	r1, r2
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	6912      	ldr	r2, [r2, #16]
 800a9c4:	4311      	orrs	r1, r2
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	6952      	ldr	r2, [r2, #20]
 800a9ca:	4311      	orrs	r1, r2
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	6992      	ldr	r2, [r2, #24]
 800a9d0:	430a      	orrs	r2, r1
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	ffff8000 	.word	0xffff8000

0800a9ec <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d128      	bne.n	800aa50 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	1e59      	subs	r1, r3, #1
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	3b01      	subs	r3, #1
 800aa12:	011b      	lsls	r3, r3, #4
 800aa14:	4319      	orrs	r1, r3
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	021b      	lsls	r3, r3, #8
 800aa1e:	4319      	orrs	r1, r3
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	3b01      	subs	r3, #1
 800aa26:	031b      	lsls	r3, r3, #12
 800aa28:	4319      	orrs	r1, r3
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	041b      	lsls	r3, r3, #16
 800aa32:	4319      	orrs	r1, r3
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	695b      	ldr	r3, [r3, #20]
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	051b      	lsls	r3, r3, #20
 800aa3c:	4319      	orrs	r1, r3
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	3b01      	subs	r3, #1
 800aa44:	061b      	lsls	r3, r3, #24
 800aa46:	430b      	orrs	r3, r1
 800aa48:	431a      	orrs	r2, r3
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	609a      	str	r2, [r3, #8]
 800aa4e:	e02d      	b.n	800aaac <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	689a      	ldr	r2, [r3, #8]
 800aa54:	4b19      	ldr	r3, [pc, #100]	; (800aabc <FMC_SDRAM_Timing_Init+0xd0>)
 800aa56:	4013      	ands	r3, r2
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	68d2      	ldr	r2, [r2, #12]
 800aa5c:	3a01      	subs	r2, #1
 800aa5e:	0311      	lsls	r1, r2, #12
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	6952      	ldr	r2, [r2, #20]
 800aa64:	3a01      	subs	r2, #1
 800aa66:	0512      	lsls	r2, r2, #20
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	431a      	orrs	r2, r3
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	1e59      	subs	r1, r3, #1
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	3b01      	subs	r3, #1
 800aa84:	011b      	lsls	r3, r3, #4
 800aa86:	4319      	orrs	r1, r3
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	021b      	lsls	r3, r3, #8
 800aa90:	4319      	orrs	r1, r3
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	3b01      	subs	r3, #1
 800aa98:	041b      	lsls	r3, r3, #16
 800aa9a:	4319      	orrs	r1, r3
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	061b      	lsls	r3, r3, #24
 800aaa4:	430b      	orrs	r3, r1
 800aaa6:	431a      	orrs	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	ff0f0fff 	.word	0xff0f0fff

0800aac0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aac0:	b084      	sub	sp, #16
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	f107 001c 	add.w	r0, r7, #28
 800aace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d120      	bne.n	800ab1a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aadc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68da      	ldr	r2, [r3, #12]
 800aae8:	4b2a      	ldr	r3, [pc, #168]	; (800ab94 <USB_CoreInit+0xd4>)
 800aaea:	4013      	ands	r3, r2
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aafc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d105      	bne.n	800ab0e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 faac 	bl	800b06c <USB_CoreReset>
 800ab14:	4603      	mov	r3, r0
 800ab16:	73fb      	strb	r3, [r7, #15]
 800ab18:	e01a      	b.n	800ab50 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 faa0 	bl	800b06c <USB_CoreReset>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ab30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d106      	bne.n	800ab44 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	639a      	str	r2, [r3, #56]	; 0x38
 800ab42:	e005      	b.n	800ab50 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d116      	bne.n	800ab84 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab5a:	b29a      	uxth	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab64:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <USB_CoreInit+0xd8>)
 800ab66:	4313      	orrs	r3, r2
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	f043 0206 	orr.w	r2, r3, #6
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	f043 0220 	orr.w	r2, r3, #32
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab90:	b004      	add	sp, #16
 800ab92:	4770      	bx	lr
 800ab94:	ffbdffbf 	.word	0xffbdffbf
 800ab98:	03ee0000 	.word	0x03ee0000

0800ab9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	f023 0201 	bic.w	r2, r3, #1
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	370c      	adds	r7, #12
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr

0800abbe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	460b      	mov	r3, r1
 800abc8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800abca:	2300      	movs	r3, #0
 800abcc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800abda:	78fb      	ldrb	r3, [r7, #3]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d115      	bne.n	800ac0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800abec:	2001      	movs	r0, #1
 800abee:	f7f7 fee3 	bl	80029b8 <HAL_Delay>
      ms++;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	3301      	adds	r3, #1
 800abf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fa29 	bl	800b050 <USB_GetMode>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d01e      	beq.n	800ac42 <USB_SetCurrentMode+0x84>
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2b31      	cmp	r3, #49	; 0x31
 800ac08:	d9f0      	bls.n	800abec <USB_SetCurrentMode+0x2e>
 800ac0a:	e01a      	b.n	800ac42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ac0c:	78fb      	ldrb	r3, [r7, #3]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d115      	bne.n	800ac3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac1e:	2001      	movs	r0, #1
 800ac20:	f7f7 feca 	bl	80029b8 <HAL_Delay>
      ms++;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3301      	adds	r3, #1
 800ac28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fa10 	bl	800b050 <USB_GetMode>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d005      	beq.n	800ac42 <USB_SetCurrentMode+0x84>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2b31      	cmp	r3, #49	; 0x31
 800ac3a:	d9f0      	bls.n	800ac1e <USB_SetCurrentMode+0x60>
 800ac3c:	e001      	b.n	800ac42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e005      	b.n	800ac4e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2b32      	cmp	r3, #50	; 0x32
 800ac46:	d101      	bne.n	800ac4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e000      	b.n	800ac4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
	...

0800ac58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac58:	b084      	sub	sp, #16
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b086      	sub	sp, #24
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ac66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ac72:	2300      	movs	r3, #0
 800ac74:	613b      	str	r3, [r7, #16]
 800ac76:	e009      	b.n	800ac8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	3340      	adds	r3, #64	; 0x40
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	2200      	movs	r2, #0
 800ac84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	613b      	str	r3, [r7, #16]
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	2b0e      	cmp	r3, #14
 800ac90:	d9f2      	bls.n	800ac78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ac92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d11c      	bne.n	800acd2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aca6:	f043 0302 	orr.w	r3, r3, #2
 800acaa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	601a      	str	r2, [r3, #0]
 800acd0:	e005      	b.n	800acde <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ace4:	461a      	mov	r2, r3
 800ace6:	2300      	movs	r3, #0
 800ace8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf0:	4619      	mov	r1, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf8:	461a      	mov	r2, r3
 800acfa:	680b      	ldr	r3, [r1, #0]
 800acfc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d10c      	bne.n	800ad1e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d104      	bne.n	800ad14 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f965 	bl	800afdc <USB_SetDevSpeed>
 800ad12:	e008      	b.n	800ad26 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ad14:	2101      	movs	r1, #1
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f960 	bl	800afdc <USB_SetDevSpeed>
 800ad1c:	e003      	b.n	800ad26 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ad1e:	2103      	movs	r1, #3
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f95b 	bl	800afdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad26:	2110      	movs	r1, #16
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 f8f3 	bl	800af14 <USB_FlushTxFifo>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 f91f 	bl	800af7c <USB_FlushRxFifo>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad4e:	461a      	mov	r2, r3
 800ad50:	2300      	movs	r3, #0
 800ad52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad66:	461a      	mov	r2, r3
 800ad68:	2300      	movs	r3, #0
 800ad6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	613b      	str	r3, [r7, #16]
 800ad70:	e043      	b.n	800adfa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad88:	d118      	bne.n	800adbc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10a      	bne.n	800ada6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	015a      	lsls	r2, r3, #5
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	4413      	add	r3, r2
 800ad98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ada2:	6013      	str	r3, [r2, #0]
 800ada4:	e013      	b.n	800adce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	015a      	lsls	r2, r3, #5
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	4413      	add	r3, r2
 800adae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb2:	461a      	mov	r2, r3
 800adb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800adb8:	6013      	str	r3, [r2, #0]
 800adba:	e008      	b.n	800adce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	015a      	lsls	r2, r3, #5
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	4413      	add	r3, r2
 800adc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc8:	461a      	mov	r2, r3
 800adca:	2300      	movs	r3, #0
 800adcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	4413      	add	r3, r2
 800add6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adda:	461a      	mov	r2, r3
 800addc:	2300      	movs	r3, #0
 800adde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adec:	461a      	mov	r2, r3
 800adee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800adf2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	3301      	adds	r3, #1
 800adf8:	613b      	str	r3, [r7, #16]
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d3b7      	bcc.n	800ad72 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae02:	2300      	movs	r3, #0
 800ae04:	613b      	str	r3, [r7, #16]
 800ae06:	e043      	b.n	800ae90 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	015a      	lsls	r2, r3, #5
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	4413      	add	r3, r2
 800ae10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae1e:	d118      	bne.n	800ae52 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10a      	bne.n	800ae3c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	015a      	lsls	r2, r3, #5
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae32:	461a      	mov	r2, r3
 800ae34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae38:	6013      	str	r3, [r2, #0]
 800ae3a:	e013      	b.n	800ae64 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae48:	461a      	mov	r2, r3
 800ae4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae4e:	6013      	str	r3, [r2, #0]
 800ae50:	e008      	b.n	800ae64 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	015a      	lsls	r2, r3, #5
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	4413      	add	r3, r2
 800ae5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae5e:	461a      	mov	r2, r3
 800ae60:	2300      	movs	r3, #0
 800ae62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	015a      	lsls	r2, r3, #5
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae70:	461a      	mov	r2, r3
 800ae72:	2300      	movs	r3, #0
 800ae74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	015a      	lsls	r2, r3, #5
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae82:	461a      	mov	r2, r3
 800ae84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	613b      	str	r3, [r7, #16]
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	693a      	ldr	r2, [r7, #16]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d3b7      	bcc.n	800ae08 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aeaa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aeb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d105      	bne.n	800aecc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	f043 0210 	orr.w	r2, r3, #16
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	699a      	ldr	r2, [r3, #24]
 800aed0:	4b0e      	ldr	r3, [pc, #56]	; (800af0c <USB_DevInit+0x2b4>)
 800aed2:	4313      	orrs	r3, r2
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d005      	beq.n	800aeea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	699b      	ldr	r3, [r3, #24]
 800aee2:	f043 0208 	orr.w	r2, r3, #8
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aeea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d105      	bne.n	800aefc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	699a      	ldr	r2, [r3, #24]
 800aef4:	4b06      	ldr	r3, [pc, #24]	; (800af10 <USB_DevInit+0x2b8>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aefc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3718      	adds	r7, #24
 800af02:	46bd      	mov	sp, r7
 800af04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af08:	b004      	add	sp, #16
 800af0a:	4770      	bx	lr
 800af0c:	803c3800 	.word	0x803c3800
 800af10:	40000004 	.word	0x40000004

0800af14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	3301      	adds	r3, #1
 800af26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	4a13      	ldr	r2, [pc, #76]	; (800af78 <USB_FlushTxFifo+0x64>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d901      	bls.n	800af34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e01b      	b.n	800af6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	daf2      	bge.n	800af22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	019b      	lsls	r3, r3, #6
 800af44:	f043 0220 	orr.w	r2, r3, #32
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	3301      	adds	r3, #1
 800af50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	4a08      	ldr	r2, [pc, #32]	; (800af78 <USB_FlushTxFifo+0x64>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d901      	bls.n	800af5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800af5a:	2303      	movs	r3, #3
 800af5c:	e006      	b.n	800af6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	691b      	ldr	r3, [r3, #16]
 800af62:	f003 0320 	and.w	r3, r3, #32
 800af66:	2b20      	cmp	r3, #32
 800af68:	d0f0      	beq.n	800af4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3714      	adds	r7, #20
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr
 800af78:	00030d40 	.word	0x00030d40

0800af7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	3301      	adds	r3, #1
 800af8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	4a11      	ldr	r2, [pc, #68]	; (800afd8 <USB_FlushRxFifo+0x5c>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d901      	bls.n	800af9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800af96:	2303      	movs	r3, #3
 800af98:	e018      	b.n	800afcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	daf2      	bge.n	800af88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800afa2:	2300      	movs	r3, #0
 800afa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2210      	movs	r2, #16
 800afaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	3301      	adds	r3, #1
 800afb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	4a08      	ldr	r2, [pc, #32]	; (800afd8 <USB_FlushRxFifo+0x5c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d901      	bls.n	800afbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	e006      	b.n	800afcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	f003 0310 	and.w	r3, r3, #16
 800afc6:	2b10      	cmp	r3, #16
 800afc8:	d0f0      	beq.n	800afac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3714      	adds	r7, #20
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr
 800afd8:	00030d40 	.word	0x00030d40

0800afdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	78fb      	ldrb	r3, [r7, #3]
 800aff6:	68f9      	ldr	r1, [r7, #12]
 800aff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800affc:	4313      	orrs	r3, r2
 800affe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr

0800b00e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b00e:	b480      	push	{r7}
 800b010:	b085      	sub	sp, #20
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b028:	f023 0303 	bic.w	r3, r3, #3
 800b02c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b03c:	f043 0302 	orr.w	r3, r3, #2
 800b040:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	f003 0301 	and.w	r3, r3, #1
}
 800b060:	4618      	mov	r0, r3
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b074:	2300      	movs	r3, #0
 800b076:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3301      	adds	r3, #1
 800b07c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	4a13      	ldr	r2, [pc, #76]	; (800b0d0 <USB_CoreReset+0x64>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d901      	bls.n	800b08a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e01b      	b.n	800b0c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	daf2      	bge.n	800b078 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b092:	2300      	movs	r3, #0
 800b094:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	f043 0201 	orr.w	r2, r3, #1
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	4a09      	ldr	r2, [pc, #36]	; (800b0d0 <USB_CoreReset+0x64>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d901      	bls.n	800b0b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e006      	b.n	800b0c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d0f0      	beq.n	800b0a2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	00030d40 	.word	0x00030d40

0800b0d4 <__errno>:
 800b0d4:	4b01      	ldr	r3, [pc, #4]	; (800b0dc <__errno+0x8>)
 800b0d6:	6818      	ldr	r0, [r3, #0]
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	24000010 	.word	0x24000010

0800b0e0 <__libc_init_array>:
 800b0e0:	b570      	push	{r4, r5, r6, lr}
 800b0e2:	4d0d      	ldr	r5, [pc, #52]	; (800b118 <__libc_init_array+0x38>)
 800b0e4:	4c0d      	ldr	r4, [pc, #52]	; (800b11c <__libc_init_array+0x3c>)
 800b0e6:	1b64      	subs	r4, r4, r5
 800b0e8:	10a4      	asrs	r4, r4, #2
 800b0ea:	2600      	movs	r6, #0
 800b0ec:	42a6      	cmp	r6, r4
 800b0ee:	d109      	bne.n	800b104 <__libc_init_array+0x24>
 800b0f0:	4d0b      	ldr	r5, [pc, #44]	; (800b120 <__libc_init_array+0x40>)
 800b0f2:	4c0c      	ldr	r4, [pc, #48]	; (800b124 <__libc_init_array+0x44>)
 800b0f4:	f000 fca2 	bl	800ba3c <_init>
 800b0f8:	1b64      	subs	r4, r4, r5
 800b0fa:	10a4      	asrs	r4, r4, #2
 800b0fc:	2600      	movs	r6, #0
 800b0fe:	42a6      	cmp	r6, r4
 800b100:	d105      	bne.n	800b10e <__libc_init_array+0x2e>
 800b102:	bd70      	pop	{r4, r5, r6, pc}
 800b104:	f855 3b04 	ldr.w	r3, [r5], #4
 800b108:	4798      	blx	r3
 800b10a:	3601      	adds	r6, #1
 800b10c:	e7ee      	b.n	800b0ec <__libc_init_array+0xc>
 800b10e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b112:	4798      	blx	r3
 800b114:	3601      	adds	r6, #1
 800b116:	e7f2      	b.n	800b0fe <__libc_init_array+0x1e>
 800b118:	0800bb28 	.word	0x0800bb28
 800b11c:	0800bb28 	.word	0x0800bb28
 800b120:	0800bb28 	.word	0x0800bb28
 800b124:	0800bb2c 	.word	0x0800bb2c

0800b128 <memcpy>:
 800b128:	440a      	add	r2, r1
 800b12a:	4291      	cmp	r1, r2
 800b12c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b130:	d100      	bne.n	800b134 <memcpy+0xc>
 800b132:	4770      	bx	lr
 800b134:	b510      	push	{r4, lr}
 800b136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b13a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b13e:	4291      	cmp	r1, r2
 800b140:	d1f9      	bne.n	800b136 <memcpy+0xe>
 800b142:	bd10      	pop	{r4, pc}

0800b144 <memset>:
 800b144:	4402      	add	r2, r0
 800b146:	4603      	mov	r3, r0
 800b148:	4293      	cmp	r3, r2
 800b14a:	d100      	bne.n	800b14e <memset+0xa>
 800b14c:	4770      	bx	lr
 800b14e:	f803 1b01 	strb.w	r1, [r3], #1
 800b152:	e7f9      	b.n	800b148 <memset+0x4>

0800b154 <sniprintf>:
 800b154:	b40c      	push	{r2, r3}
 800b156:	b530      	push	{r4, r5, lr}
 800b158:	4b17      	ldr	r3, [pc, #92]	; (800b1b8 <sniprintf+0x64>)
 800b15a:	1e0c      	subs	r4, r1, #0
 800b15c:	681d      	ldr	r5, [r3, #0]
 800b15e:	b09d      	sub	sp, #116	; 0x74
 800b160:	da08      	bge.n	800b174 <sniprintf+0x20>
 800b162:	238b      	movs	r3, #139	; 0x8b
 800b164:	602b      	str	r3, [r5, #0]
 800b166:	f04f 30ff 	mov.w	r0, #4294967295
 800b16a:	b01d      	add	sp, #116	; 0x74
 800b16c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b170:	b002      	add	sp, #8
 800b172:	4770      	bx	lr
 800b174:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b178:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b17c:	bf14      	ite	ne
 800b17e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b182:	4623      	moveq	r3, r4
 800b184:	9304      	str	r3, [sp, #16]
 800b186:	9307      	str	r3, [sp, #28]
 800b188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b18c:	9002      	str	r0, [sp, #8]
 800b18e:	9006      	str	r0, [sp, #24]
 800b190:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b194:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b196:	ab21      	add	r3, sp, #132	; 0x84
 800b198:	a902      	add	r1, sp, #8
 800b19a:	4628      	mov	r0, r5
 800b19c:	9301      	str	r3, [sp, #4]
 800b19e:	f000 f869 	bl	800b274 <_svfiprintf_r>
 800b1a2:	1c43      	adds	r3, r0, #1
 800b1a4:	bfbc      	itt	lt
 800b1a6:	238b      	movlt	r3, #139	; 0x8b
 800b1a8:	602b      	strlt	r3, [r5, #0]
 800b1aa:	2c00      	cmp	r4, #0
 800b1ac:	d0dd      	beq.n	800b16a <sniprintf+0x16>
 800b1ae:	9b02      	ldr	r3, [sp, #8]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	701a      	strb	r2, [r3, #0]
 800b1b4:	e7d9      	b.n	800b16a <sniprintf+0x16>
 800b1b6:	bf00      	nop
 800b1b8:	24000010 	.word	0x24000010

0800b1bc <__ssputs_r>:
 800b1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c0:	688e      	ldr	r6, [r1, #8]
 800b1c2:	429e      	cmp	r6, r3
 800b1c4:	4682      	mov	sl, r0
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	4690      	mov	r8, r2
 800b1ca:	461f      	mov	r7, r3
 800b1cc:	d838      	bhi.n	800b240 <__ssputs_r+0x84>
 800b1ce:	898a      	ldrh	r2, [r1, #12]
 800b1d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1d4:	d032      	beq.n	800b23c <__ssputs_r+0x80>
 800b1d6:	6825      	ldr	r5, [r4, #0]
 800b1d8:	6909      	ldr	r1, [r1, #16]
 800b1da:	eba5 0901 	sub.w	r9, r5, r1
 800b1de:	6965      	ldr	r5, [r4, #20]
 800b1e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	444b      	add	r3, r9
 800b1ec:	106d      	asrs	r5, r5, #1
 800b1ee:	429d      	cmp	r5, r3
 800b1f0:	bf38      	it	cc
 800b1f2:	461d      	movcc	r5, r3
 800b1f4:	0553      	lsls	r3, r2, #21
 800b1f6:	d531      	bpl.n	800b25c <__ssputs_r+0xa0>
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	f000 fb55 	bl	800b8a8 <_malloc_r>
 800b1fe:	4606      	mov	r6, r0
 800b200:	b950      	cbnz	r0, 800b218 <__ssputs_r+0x5c>
 800b202:	230c      	movs	r3, #12
 800b204:	f8ca 3000 	str.w	r3, [sl]
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b20e:	81a3      	strh	r3, [r4, #12]
 800b210:	f04f 30ff 	mov.w	r0, #4294967295
 800b214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b218:	6921      	ldr	r1, [r4, #16]
 800b21a:	464a      	mov	r2, r9
 800b21c:	f7ff ff84 	bl	800b128 <memcpy>
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b22a:	81a3      	strh	r3, [r4, #12]
 800b22c:	6126      	str	r6, [r4, #16]
 800b22e:	6165      	str	r5, [r4, #20]
 800b230:	444e      	add	r6, r9
 800b232:	eba5 0509 	sub.w	r5, r5, r9
 800b236:	6026      	str	r6, [r4, #0]
 800b238:	60a5      	str	r5, [r4, #8]
 800b23a:	463e      	mov	r6, r7
 800b23c:	42be      	cmp	r6, r7
 800b23e:	d900      	bls.n	800b242 <__ssputs_r+0x86>
 800b240:	463e      	mov	r6, r7
 800b242:	6820      	ldr	r0, [r4, #0]
 800b244:	4632      	mov	r2, r6
 800b246:	4641      	mov	r1, r8
 800b248:	f000 faa8 	bl	800b79c <memmove>
 800b24c:	68a3      	ldr	r3, [r4, #8]
 800b24e:	1b9b      	subs	r3, r3, r6
 800b250:	60a3      	str	r3, [r4, #8]
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	4433      	add	r3, r6
 800b256:	6023      	str	r3, [r4, #0]
 800b258:	2000      	movs	r0, #0
 800b25a:	e7db      	b.n	800b214 <__ssputs_r+0x58>
 800b25c:	462a      	mov	r2, r5
 800b25e:	f000 fb97 	bl	800b990 <_realloc_r>
 800b262:	4606      	mov	r6, r0
 800b264:	2800      	cmp	r0, #0
 800b266:	d1e1      	bne.n	800b22c <__ssputs_r+0x70>
 800b268:	6921      	ldr	r1, [r4, #16]
 800b26a:	4650      	mov	r0, sl
 800b26c:	f000 fab0 	bl	800b7d0 <_free_r>
 800b270:	e7c7      	b.n	800b202 <__ssputs_r+0x46>
	...

0800b274 <_svfiprintf_r>:
 800b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b278:	4698      	mov	r8, r3
 800b27a:	898b      	ldrh	r3, [r1, #12]
 800b27c:	061b      	lsls	r3, r3, #24
 800b27e:	b09d      	sub	sp, #116	; 0x74
 800b280:	4607      	mov	r7, r0
 800b282:	460d      	mov	r5, r1
 800b284:	4614      	mov	r4, r2
 800b286:	d50e      	bpl.n	800b2a6 <_svfiprintf_r+0x32>
 800b288:	690b      	ldr	r3, [r1, #16]
 800b28a:	b963      	cbnz	r3, 800b2a6 <_svfiprintf_r+0x32>
 800b28c:	2140      	movs	r1, #64	; 0x40
 800b28e:	f000 fb0b 	bl	800b8a8 <_malloc_r>
 800b292:	6028      	str	r0, [r5, #0]
 800b294:	6128      	str	r0, [r5, #16]
 800b296:	b920      	cbnz	r0, 800b2a2 <_svfiprintf_r+0x2e>
 800b298:	230c      	movs	r3, #12
 800b29a:	603b      	str	r3, [r7, #0]
 800b29c:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a0:	e0d1      	b.n	800b446 <_svfiprintf_r+0x1d2>
 800b2a2:	2340      	movs	r3, #64	; 0x40
 800b2a4:	616b      	str	r3, [r5, #20]
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2aa:	2320      	movs	r3, #32
 800b2ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2b4:	2330      	movs	r3, #48	; 0x30
 800b2b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b460 <_svfiprintf_r+0x1ec>
 800b2ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2be:	f04f 0901 	mov.w	r9, #1
 800b2c2:	4623      	mov	r3, r4
 800b2c4:	469a      	mov	sl, r3
 800b2c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ca:	b10a      	cbz	r2, 800b2d0 <_svfiprintf_r+0x5c>
 800b2cc:	2a25      	cmp	r2, #37	; 0x25
 800b2ce:	d1f9      	bne.n	800b2c4 <_svfiprintf_r+0x50>
 800b2d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b2d4:	d00b      	beq.n	800b2ee <_svfiprintf_r+0x7a>
 800b2d6:	465b      	mov	r3, fp
 800b2d8:	4622      	mov	r2, r4
 800b2da:	4629      	mov	r1, r5
 800b2dc:	4638      	mov	r0, r7
 800b2de:	f7ff ff6d 	bl	800b1bc <__ssputs_r>
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	f000 80aa 	beq.w	800b43c <_svfiprintf_r+0x1c8>
 800b2e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2ea:	445a      	add	r2, fp
 800b2ec:	9209      	str	r2, [sp, #36]	; 0x24
 800b2ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f000 80a2 	beq.w	800b43c <_svfiprintf_r+0x1c8>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b2fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b302:	f10a 0a01 	add.w	sl, sl, #1
 800b306:	9304      	str	r3, [sp, #16]
 800b308:	9307      	str	r3, [sp, #28]
 800b30a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b30e:	931a      	str	r3, [sp, #104]	; 0x68
 800b310:	4654      	mov	r4, sl
 800b312:	2205      	movs	r2, #5
 800b314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b318:	4851      	ldr	r0, [pc, #324]	; (800b460 <_svfiprintf_r+0x1ec>)
 800b31a:	f7f4 ffe9 	bl	80002f0 <memchr>
 800b31e:	9a04      	ldr	r2, [sp, #16]
 800b320:	b9d8      	cbnz	r0, 800b35a <_svfiprintf_r+0xe6>
 800b322:	06d0      	lsls	r0, r2, #27
 800b324:	bf44      	itt	mi
 800b326:	2320      	movmi	r3, #32
 800b328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b32c:	0711      	lsls	r1, r2, #28
 800b32e:	bf44      	itt	mi
 800b330:	232b      	movmi	r3, #43	; 0x2b
 800b332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b336:	f89a 3000 	ldrb.w	r3, [sl]
 800b33a:	2b2a      	cmp	r3, #42	; 0x2a
 800b33c:	d015      	beq.n	800b36a <_svfiprintf_r+0xf6>
 800b33e:	9a07      	ldr	r2, [sp, #28]
 800b340:	4654      	mov	r4, sl
 800b342:	2000      	movs	r0, #0
 800b344:	f04f 0c0a 	mov.w	ip, #10
 800b348:	4621      	mov	r1, r4
 800b34a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b34e:	3b30      	subs	r3, #48	; 0x30
 800b350:	2b09      	cmp	r3, #9
 800b352:	d94e      	bls.n	800b3f2 <_svfiprintf_r+0x17e>
 800b354:	b1b0      	cbz	r0, 800b384 <_svfiprintf_r+0x110>
 800b356:	9207      	str	r2, [sp, #28]
 800b358:	e014      	b.n	800b384 <_svfiprintf_r+0x110>
 800b35a:	eba0 0308 	sub.w	r3, r0, r8
 800b35e:	fa09 f303 	lsl.w	r3, r9, r3
 800b362:	4313      	orrs	r3, r2
 800b364:	9304      	str	r3, [sp, #16]
 800b366:	46a2      	mov	sl, r4
 800b368:	e7d2      	b.n	800b310 <_svfiprintf_r+0x9c>
 800b36a:	9b03      	ldr	r3, [sp, #12]
 800b36c:	1d19      	adds	r1, r3, #4
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	9103      	str	r1, [sp, #12]
 800b372:	2b00      	cmp	r3, #0
 800b374:	bfbb      	ittet	lt
 800b376:	425b      	neglt	r3, r3
 800b378:	f042 0202 	orrlt.w	r2, r2, #2
 800b37c:	9307      	strge	r3, [sp, #28]
 800b37e:	9307      	strlt	r3, [sp, #28]
 800b380:	bfb8      	it	lt
 800b382:	9204      	strlt	r2, [sp, #16]
 800b384:	7823      	ldrb	r3, [r4, #0]
 800b386:	2b2e      	cmp	r3, #46	; 0x2e
 800b388:	d10c      	bne.n	800b3a4 <_svfiprintf_r+0x130>
 800b38a:	7863      	ldrb	r3, [r4, #1]
 800b38c:	2b2a      	cmp	r3, #42	; 0x2a
 800b38e:	d135      	bne.n	800b3fc <_svfiprintf_r+0x188>
 800b390:	9b03      	ldr	r3, [sp, #12]
 800b392:	1d1a      	adds	r2, r3, #4
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	9203      	str	r2, [sp, #12]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	bfb8      	it	lt
 800b39c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3a0:	3402      	adds	r4, #2
 800b3a2:	9305      	str	r3, [sp, #20]
 800b3a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b470 <_svfiprintf_r+0x1fc>
 800b3a8:	7821      	ldrb	r1, [r4, #0]
 800b3aa:	2203      	movs	r2, #3
 800b3ac:	4650      	mov	r0, sl
 800b3ae:	f7f4 ff9f 	bl	80002f0 <memchr>
 800b3b2:	b140      	cbz	r0, 800b3c6 <_svfiprintf_r+0x152>
 800b3b4:	2340      	movs	r3, #64	; 0x40
 800b3b6:	eba0 000a 	sub.w	r0, r0, sl
 800b3ba:	fa03 f000 	lsl.w	r0, r3, r0
 800b3be:	9b04      	ldr	r3, [sp, #16]
 800b3c0:	4303      	orrs	r3, r0
 800b3c2:	3401      	adds	r4, #1
 800b3c4:	9304      	str	r3, [sp, #16]
 800b3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ca:	4826      	ldr	r0, [pc, #152]	; (800b464 <_svfiprintf_r+0x1f0>)
 800b3cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3d0:	2206      	movs	r2, #6
 800b3d2:	f7f4 ff8d 	bl	80002f0 <memchr>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d038      	beq.n	800b44c <_svfiprintf_r+0x1d8>
 800b3da:	4b23      	ldr	r3, [pc, #140]	; (800b468 <_svfiprintf_r+0x1f4>)
 800b3dc:	bb1b      	cbnz	r3, 800b426 <_svfiprintf_r+0x1b2>
 800b3de:	9b03      	ldr	r3, [sp, #12]
 800b3e0:	3307      	adds	r3, #7
 800b3e2:	f023 0307 	bic.w	r3, r3, #7
 800b3e6:	3308      	adds	r3, #8
 800b3e8:	9303      	str	r3, [sp, #12]
 800b3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ec:	4433      	add	r3, r6
 800b3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f0:	e767      	b.n	800b2c2 <_svfiprintf_r+0x4e>
 800b3f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	2001      	movs	r0, #1
 800b3fa:	e7a5      	b.n	800b348 <_svfiprintf_r+0xd4>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	3401      	adds	r4, #1
 800b400:	9305      	str	r3, [sp, #20]
 800b402:	4619      	mov	r1, r3
 800b404:	f04f 0c0a 	mov.w	ip, #10
 800b408:	4620      	mov	r0, r4
 800b40a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b40e:	3a30      	subs	r2, #48	; 0x30
 800b410:	2a09      	cmp	r2, #9
 800b412:	d903      	bls.n	800b41c <_svfiprintf_r+0x1a8>
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0c5      	beq.n	800b3a4 <_svfiprintf_r+0x130>
 800b418:	9105      	str	r1, [sp, #20]
 800b41a:	e7c3      	b.n	800b3a4 <_svfiprintf_r+0x130>
 800b41c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b420:	4604      	mov	r4, r0
 800b422:	2301      	movs	r3, #1
 800b424:	e7f0      	b.n	800b408 <_svfiprintf_r+0x194>
 800b426:	ab03      	add	r3, sp, #12
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	462a      	mov	r2, r5
 800b42c:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <_svfiprintf_r+0x1f8>)
 800b42e:	a904      	add	r1, sp, #16
 800b430:	4638      	mov	r0, r7
 800b432:	f3af 8000 	nop.w
 800b436:	1c42      	adds	r2, r0, #1
 800b438:	4606      	mov	r6, r0
 800b43a:	d1d6      	bne.n	800b3ea <_svfiprintf_r+0x176>
 800b43c:	89ab      	ldrh	r3, [r5, #12]
 800b43e:	065b      	lsls	r3, r3, #25
 800b440:	f53f af2c 	bmi.w	800b29c <_svfiprintf_r+0x28>
 800b444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b446:	b01d      	add	sp, #116	; 0x74
 800b448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44c:	ab03      	add	r3, sp, #12
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	462a      	mov	r2, r5
 800b452:	4b06      	ldr	r3, [pc, #24]	; (800b46c <_svfiprintf_r+0x1f8>)
 800b454:	a904      	add	r1, sp, #16
 800b456:	4638      	mov	r0, r7
 800b458:	f000 f87a 	bl	800b550 <_printf_i>
 800b45c:	e7eb      	b.n	800b436 <_svfiprintf_r+0x1c2>
 800b45e:	bf00      	nop
 800b460:	0800baec 	.word	0x0800baec
 800b464:	0800baf6 	.word	0x0800baf6
 800b468:	00000000 	.word	0x00000000
 800b46c:	0800b1bd 	.word	0x0800b1bd
 800b470:	0800baf2 	.word	0x0800baf2

0800b474 <_printf_common>:
 800b474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b478:	4616      	mov	r6, r2
 800b47a:	4699      	mov	r9, r3
 800b47c:	688a      	ldr	r2, [r1, #8]
 800b47e:	690b      	ldr	r3, [r1, #16]
 800b480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b484:	4293      	cmp	r3, r2
 800b486:	bfb8      	it	lt
 800b488:	4613      	movlt	r3, r2
 800b48a:	6033      	str	r3, [r6, #0]
 800b48c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b490:	4607      	mov	r7, r0
 800b492:	460c      	mov	r4, r1
 800b494:	b10a      	cbz	r2, 800b49a <_printf_common+0x26>
 800b496:	3301      	adds	r3, #1
 800b498:	6033      	str	r3, [r6, #0]
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	0699      	lsls	r1, r3, #26
 800b49e:	bf42      	ittt	mi
 800b4a0:	6833      	ldrmi	r3, [r6, #0]
 800b4a2:	3302      	addmi	r3, #2
 800b4a4:	6033      	strmi	r3, [r6, #0]
 800b4a6:	6825      	ldr	r5, [r4, #0]
 800b4a8:	f015 0506 	ands.w	r5, r5, #6
 800b4ac:	d106      	bne.n	800b4bc <_printf_common+0x48>
 800b4ae:	f104 0a19 	add.w	sl, r4, #25
 800b4b2:	68e3      	ldr	r3, [r4, #12]
 800b4b4:	6832      	ldr	r2, [r6, #0]
 800b4b6:	1a9b      	subs	r3, r3, r2
 800b4b8:	42ab      	cmp	r3, r5
 800b4ba:	dc26      	bgt.n	800b50a <_printf_common+0x96>
 800b4bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4c0:	1e13      	subs	r3, r2, #0
 800b4c2:	6822      	ldr	r2, [r4, #0]
 800b4c4:	bf18      	it	ne
 800b4c6:	2301      	movne	r3, #1
 800b4c8:	0692      	lsls	r2, r2, #26
 800b4ca:	d42b      	bmi.n	800b524 <_printf_common+0xb0>
 800b4cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	4638      	mov	r0, r7
 800b4d4:	47c0      	blx	r8
 800b4d6:	3001      	adds	r0, #1
 800b4d8:	d01e      	beq.n	800b518 <_printf_common+0xa4>
 800b4da:	6823      	ldr	r3, [r4, #0]
 800b4dc:	68e5      	ldr	r5, [r4, #12]
 800b4de:	6832      	ldr	r2, [r6, #0]
 800b4e0:	f003 0306 	and.w	r3, r3, #6
 800b4e4:	2b04      	cmp	r3, #4
 800b4e6:	bf08      	it	eq
 800b4e8:	1aad      	subeq	r5, r5, r2
 800b4ea:	68a3      	ldr	r3, [r4, #8]
 800b4ec:	6922      	ldr	r2, [r4, #16]
 800b4ee:	bf0c      	ite	eq
 800b4f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4f4:	2500      	movne	r5, #0
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	bfc4      	itt	gt
 800b4fa:	1a9b      	subgt	r3, r3, r2
 800b4fc:	18ed      	addgt	r5, r5, r3
 800b4fe:	2600      	movs	r6, #0
 800b500:	341a      	adds	r4, #26
 800b502:	42b5      	cmp	r5, r6
 800b504:	d11a      	bne.n	800b53c <_printf_common+0xc8>
 800b506:	2000      	movs	r0, #0
 800b508:	e008      	b.n	800b51c <_printf_common+0xa8>
 800b50a:	2301      	movs	r3, #1
 800b50c:	4652      	mov	r2, sl
 800b50e:	4649      	mov	r1, r9
 800b510:	4638      	mov	r0, r7
 800b512:	47c0      	blx	r8
 800b514:	3001      	adds	r0, #1
 800b516:	d103      	bne.n	800b520 <_printf_common+0xac>
 800b518:	f04f 30ff 	mov.w	r0, #4294967295
 800b51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b520:	3501      	adds	r5, #1
 800b522:	e7c6      	b.n	800b4b2 <_printf_common+0x3e>
 800b524:	18e1      	adds	r1, r4, r3
 800b526:	1c5a      	adds	r2, r3, #1
 800b528:	2030      	movs	r0, #48	; 0x30
 800b52a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b52e:	4422      	add	r2, r4
 800b530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b538:	3302      	adds	r3, #2
 800b53a:	e7c7      	b.n	800b4cc <_printf_common+0x58>
 800b53c:	2301      	movs	r3, #1
 800b53e:	4622      	mov	r2, r4
 800b540:	4649      	mov	r1, r9
 800b542:	4638      	mov	r0, r7
 800b544:	47c0      	blx	r8
 800b546:	3001      	adds	r0, #1
 800b548:	d0e6      	beq.n	800b518 <_printf_common+0xa4>
 800b54a:	3601      	adds	r6, #1
 800b54c:	e7d9      	b.n	800b502 <_printf_common+0x8e>
	...

0800b550 <_printf_i>:
 800b550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b554:	7e0f      	ldrb	r7, [r1, #24]
 800b556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b558:	2f78      	cmp	r7, #120	; 0x78
 800b55a:	4691      	mov	r9, r2
 800b55c:	4680      	mov	r8, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	469a      	mov	sl, r3
 800b562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b566:	d807      	bhi.n	800b578 <_printf_i+0x28>
 800b568:	2f62      	cmp	r7, #98	; 0x62
 800b56a:	d80a      	bhi.n	800b582 <_printf_i+0x32>
 800b56c:	2f00      	cmp	r7, #0
 800b56e:	f000 80d8 	beq.w	800b722 <_printf_i+0x1d2>
 800b572:	2f58      	cmp	r7, #88	; 0x58
 800b574:	f000 80a3 	beq.w	800b6be <_printf_i+0x16e>
 800b578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b57c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b580:	e03a      	b.n	800b5f8 <_printf_i+0xa8>
 800b582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b586:	2b15      	cmp	r3, #21
 800b588:	d8f6      	bhi.n	800b578 <_printf_i+0x28>
 800b58a:	a101      	add	r1, pc, #4	; (adr r1, 800b590 <_printf_i+0x40>)
 800b58c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b590:	0800b5e9 	.word	0x0800b5e9
 800b594:	0800b5fd 	.word	0x0800b5fd
 800b598:	0800b579 	.word	0x0800b579
 800b59c:	0800b579 	.word	0x0800b579
 800b5a0:	0800b579 	.word	0x0800b579
 800b5a4:	0800b579 	.word	0x0800b579
 800b5a8:	0800b5fd 	.word	0x0800b5fd
 800b5ac:	0800b579 	.word	0x0800b579
 800b5b0:	0800b579 	.word	0x0800b579
 800b5b4:	0800b579 	.word	0x0800b579
 800b5b8:	0800b579 	.word	0x0800b579
 800b5bc:	0800b709 	.word	0x0800b709
 800b5c0:	0800b62d 	.word	0x0800b62d
 800b5c4:	0800b6eb 	.word	0x0800b6eb
 800b5c8:	0800b579 	.word	0x0800b579
 800b5cc:	0800b579 	.word	0x0800b579
 800b5d0:	0800b72b 	.word	0x0800b72b
 800b5d4:	0800b579 	.word	0x0800b579
 800b5d8:	0800b62d 	.word	0x0800b62d
 800b5dc:	0800b579 	.word	0x0800b579
 800b5e0:	0800b579 	.word	0x0800b579
 800b5e4:	0800b6f3 	.word	0x0800b6f3
 800b5e8:	682b      	ldr	r3, [r5, #0]
 800b5ea:	1d1a      	adds	r2, r3, #4
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	602a      	str	r2, [r5, #0]
 800b5f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e0a3      	b.n	800b744 <_printf_i+0x1f4>
 800b5fc:	6820      	ldr	r0, [r4, #0]
 800b5fe:	6829      	ldr	r1, [r5, #0]
 800b600:	0606      	lsls	r6, r0, #24
 800b602:	f101 0304 	add.w	r3, r1, #4
 800b606:	d50a      	bpl.n	800b61e <_printf_i+0xce>
 800b608:	680e      	ldr	r6, [r1, #0]
 800b60a:	602b      	str	r3, [r5, #0]
 800b60c:	2e00      	cmp	r6, #0
 800b60e:	da03      	bge.n	800b618 <_printf_i+0xc8>
 800b610:	232d      	movs	r3, #45	; 0x2d
 800b612:	4276      	negs	r6, r6
 800b614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b618:	485e      	ldr	r0, [pc, #376]	; (800b794 <_printf_i+0x244>)
 800b61a:	230a      	movs	r3, #10
 800b61c:	e019      	b.n	800b652 <_printf_i+0x102>
 800b61e:	680e      	ldr	r6, [r1, #0]
 800b620:	602b      	str	r3, [r5, #0]
 800b622:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b626:	bf18      	it	ne
 800b628:	b236      	sxthne	r6, r6
 800b62a:	e7ef      	b.n	800b60c <_printf_i+0xbc>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	6820      	ldr	r0, [r4, #0]
 800b630:	1d19      	adds	r1, r3, #4
 800b632:	6029      	str	r1, [r5, #0]
 800b634:	0601      	lsls	r1, r0, #24
 800b636:	d501      	bpl.n	800b63c <_printf_i+0xec>
 800b638:	681e      	ldr	r6, [r3, #0]
 800b63a:	e002      	b.n	800b642 <_printf_i+0xf2>
 800b63c:	0646      	lsls	r6, r0, #25
 800b63e:	d5fb      	bpl.n	800b638 <_printf_i+0xe8>
 800b640:	881e      	ldrh	r6, [r3, #0]
 800b642:	4854      	ldr	r0, [pc, #336]	; (800b794 <_printf_i+0x244>)
 800b644:	2f6f      	cmp	r7, #111	; 0x6f
 800b646:	bf0c      	ite	eq
 800b648:	2308      	moveq	r3, #8
 800b64a:	230a      	movne	r3, #10
 800b64c:	2100      	movs	r1, #0
 800b64e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b652:	6865      	ldr	r5, [r4, #4]
 800b654:	60a5      	str	r5, [r4, #8]
 800b656:	2d00      	cmp	r5, #0
 800b658:	bfa2      	ittt	ge
 800b65a:	6821      	ldrge	r1, [r4, #0]
 800b65c:	f021 0104 	bicge.w	r1, r1, #4
 800b660:	6021      	strge	r1, [r4, #0]
 800b662:	b90e      	cbnz	r6, 800b668 <_printf_i+0x118>
 800b664:	2d00      	cmp	r5, #0
 800b666:	d04d      	beq.n	800b704 <_printf_i+0x1b4>
 800b668:	4615      	mov	r5, r2
 800b66a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b66e:	fb03 6711 	mls	r7, r3, r1, r6
 800b672:	5dc7      	ldrb	r7, [r0, r7]
 800b674:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b678:	4637      	mov	r7, r6
 800b67a:	42bb      	cmp	r3, r7
 800b67c:	460e      	mov	r6, r1
 800b67e:	d9f4      	bls.n	800b66a <_printf_i+0x11a>
 800b680:	2b08      	cmp	r3, #8
 800b682:	d10b      	bne.n	800b69c <_printf_i+0x14c>
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	07de      	lsls	r6, r3, #31
 800b688:	d508      	bpl.n	800b69c <_printf_i+0x14c>
 800b68a:	6923      	ldr	r3, [r4, #16]
 800b68c:	6861      	ldr	r1, [r4, #4]
 800b68e:	4299      	cmp	r1, r3
 800b690:	bfde      	ittt	le
 800b692:	2330      	movle	r3, #48	; 0x30
 800b694:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b698:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b69c:	1b52      	subs	r2, r2, r5
 800b69e:	6122      	str	r2, [r4, #16]
 800b6a0:	f8cd a000 	str.w	sl, [sp]
 800b6a4:	464b      	mov	r3, r9
 800b6a6:	aa03      	add	r2, sp, #12
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	4640      	mov	r0, r8
 800b6ac:	f7ff fee2 	bl	800b474 <_printf_common>
 800b6b0:	3001      	adds	r0, #1
 800b6b2:	d14c      	bne.n	800b74e <_printf_i+0x1fe>
 800b6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b8:	b004      	add	sp, #16
 800b6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6be:	4835      	ldr	r0, [pc, #212]	; (800b794 <_printf_i+0x244>)
 800b6c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b6c4:	6829      	ldr	r1, [r5, #0]
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6cc:	6029      	str	r1, [r5, #0]
 800b6ce:	061d      	lsls	r5, r3, #24
 800b6d0:	d514      	bpl.n	800b6fc <_printf_i+0x1ac>
 800b6d2:	07df      	lsls	r7, r3, #31
 800b6d4:	bf44      	itt	mi
 800b6d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b6da:	6023      	strmi	r3, [r4, #0]
 800b6dc:	b91e      	cbnz	r6, 800b6e6 <_printf_i+0x196>
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	f023 0320 	bic.w	r3, r3, #32
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	2310      	movs	r3, #16
 800b6e8:	e7b0      	b.n	800b64c <_printf_i+0xfc>
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	f043 0320 	orr.w	r3, r3, #32
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	2378      	movs	r3, #120	; 0x78
 800b6f4:	4828      	ldr	r0, [pc, #160]	; (800b798 <_printf_i+0x248>)
 800b6f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6fa:	e7e3      	b.n	800b6c4 <_printf_i+0x174>
 800b6fc:	0659      	lsls	r1, r3, #25
 800b6fe:	bf48      	it	mi
 800b700:	b2b6      	uxthmi	r6, r6
 800b702:	e7e6      	b.n	800b6d2 <_printf_i+0x182>
 800b704:	4615      	mov	r5, r2
 800b706:	e7bb      	b.n	800b680 <_printf_i+0x130>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	6826      	ldr	r6, [r4, #0]
 800b70c:	6961      	ldr	r1, [r4, #20]
 800b70e:	1d18      	adds	r0, r3, #4
 800b710:	6028      	str	r0, [r5, #0]
 800b712:	0635      	lsls	r5, r6, #24
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	d501      	bpl.n	800b71c <_printf_i+0x1cc>
 800b718:	6019      	str	r1, [r3, #0]
 800b71a:	e002      	b.n	800b722 <_printf_i+0x1d2>
 800b71c:	0670      	lsls	r0, r6, #25
 800b71e:	d5fb      	bpl.n	800b718 <_printf_i+0x1c8>
 800b720:	8019      	strh	r1, [r3, #0]
 800b722:	2300      	movs	r3, #0
 800b724:	6123      	str	r3, [r4, #16]
 800b726:	4615      	mov	r5, r2
 800b728:	e7ba      	b.n	800b6a0 <_printf_i+0x150>
 800b72a:	682b      	ldr	r3, [r5, #0]
 800b72c:	1d1a      	adds	r2, r3, #4
 800b72e:	602a      	str	r2, [r5, #0]
 800b730:	681d      	ldr	r5, [r3, #0]
 800b732:	6862      	ldr	r2, [r4, #4]
 800b734:	2100      	movs	r1, #0
 800b736:	4628      	mov	r0, r5
 800b738:	f7f4 fdda 	bl	80002f0 <memchr>
 800b73c:	b108      	cbz	r0, 800b742 <_printf_i+0x1f2>
 800b73e:	1b40      	subs	r0, r0, r5
 800b740:	6060      	str	r0, [r4, #4]
 800b742:	6863      	ldr	r3, [r4, #4]
 800b744:	6123      	str	r3, [r4, #16]
 800b746:	2300      	movs	r3, #0
 800b748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b74c:	e7a8      	b.n	800b6a0 <_printf_i+0x150>
 800b74e:	6923      	ldr	r3, [r4, #16]
 800b750:	462a      	mov	r2, r5
 800b752:	4649      	mov	r1, r9
 800b754:	4640      	mov	r0, r8
 800b756:	47d0      	blx	sl
 800b758:	3001      	adds	r0, #1
 800b75a:	d0ab      	beq.n	800b6b4 <_printf_i+0x164>
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	079b      	lsls	r3, r3, #30
 800b760:	d413      	bmi.n	800b78a <_printf_i+0x23a>
 800b762:	68e0      	ldr	r0, [r4, #12]
 800b764:	9b03      	ldr	r3, [sp, #12]
 800b766:	4298      	cmp	r0, r3
 800b768:	bfb8      	it	lt
 800b76a:	4618      	movlt	r0, r3
 800b76c:	e7a4      	b.n	800b6b8 <_printf_i+0x168>
 800b76e:	2301      	movs	r3, #1
 800b770:	4632      	mov	r2, r6
 800b772:	4649      	mov	r1, r9
 800b774:	4640      	mov	r0, r8
 800b776:	47d0      	blx	sl
 800b778:	3001      	adds	r0, #1
 800b77a:	d09b      	beq.n	800b6b4 <_printf_i+0x164>
 800b77c:	3501      	adds	r5, #1
 800b77e:	68e3      	ldr	r3, [r4, #12]
 800b780:	9903      	ldr	r1, [sp, #12]
 800b782:	1a5b      	subs	r3, r3, r1
 800b784:	42ab      	cmp	r3, r5
 800b786:	dcf2      	bgt.n	800b76e <_printf_i+0x21e>
 800b788:	e7eb      	b.n	800b762 <_printf_i+0x212>
 800b78a:	2500      	movs	r5, #0
 800b78c:	f104 0619 	add.w	r6, r4, #25
 800b790:	e7f5      	b.n	800b77e <_printf_i+0x22e>
 800b792:	bf00      	nop
 800b794:	0800bafd 	.word	0x0800bafd
 800b798:	0800bb0e 	.word	0x0800bb0e

0800b79c <memmove>:
 800b79c:	4288      	cmp	r0, r1
 800b79e:	b510      	push	{r4, lr}
 800b7a0:	eb01 0402 	add.w	r4, r1, r2
 800b7a4:	d902      	bls.n	800b7ac <memmove+0x10>
 800b7a6:	4284      	cmp	r4, r0
 800b7a8:	4623      	mov	r3, r4
 800b7aa:	d807      	bhi.n	800b7bc <memmove+0x20>
 800b7ac:	1e43      	subs	r3, r0, #1
 800b7ae:	42a1      	cmp	r1, r4
 800b7b0:	d008      	beq.n	800b7c4 <memmove+0x28>
 800b7b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7ba:	e7f8      	b.n	800b7ae <memmove+0x12>
 800b7bc:	4402      	add	r2, r0
 800b7be:	4601      	mov	r1, r0
 800b7c0:	428a      	cmp	r2, r1
 800b7c2:	d100      	bne.n	800b7c6 <memmove+0x2a>
 800b7c4:	bd10      	pop	{r4, pc}
 800b7c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7ce:	e7f7      	b.n	800b7c0 <memmove+0x24>

0800b7d0 <_free_r>:
 800b7d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7d2:	2900      	cmp	r1, #0
 800b7d4:	d044      	beq.n	800b860 <_free_r+0x90>
 800b7d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7da:	9001      	str	r0, [sp, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f1a1 0404 	sub.w	r4, r1, #4
 800b7e2:	bfb8      	it	lt
 800b7e4:	18e4      	addlt	r4, r4, r3
 800b7e6:	f000 f913 	bl	800ba10 <__malloc_lock>
 800b7ea:	4a1e      	ldr	r2, [pc, #120]	; (800b864 <_free_r+0x94>)
 800b7ec:	9801      	ldr	r0, [sp, #4]
 800b7ee:	6813      	ldr	r3, [r2, #0]
 800b7f0:	b933      	cbnz	r3, 800b800 <_free_r+0x30>
 800b7f2:	6063      	str	r3, [r4, #4]
 800b7f4:	6014      	str	r4, [r2, #0]
 800b7f6:	b003      	add	sp, #12
 800b7f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7fc:	f000 b90e 	b.w	800ba1c <__malloc_unlock>
 800b800:	42a3      	cmp	r3, r4
 800b802:	d908      	bls.n	800b816 <_free_r+0x46>
 800b804:	6825      	ldr	r5, [r4, #0]
 800b806:	1961      	adds	r1, r4, r5
 800b808:	428b      	cmp	r3, r1
 800b80a:	bf01      	itttt	eq
 800b80c:	6819      	ldreq	r1, [r3, #0]
 800b80e:	685b      	ldreq	r3, [r3, #4]
 800b810:	1949      	addeq	r1, r1, r5
 800b812:	6021      	streq	r1, [r4, #0]
 800b814:	e7ed      	b.n	800b7f2 <_free_r+0x22>
 800b816:	461a      	mov	r2, r3
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	b10b      	cbz	r3, 800b820 <_free_r+0x50>
 800b81c:	42a3      	cmp	r3, r4
 800b81e:	d9fa      	bls.n	800b816 <_free_r+0x46>
 800b820:	6811      	ldr	r1, [r2, #0]
 800b822:	1855      	adds	r5, r2, r1
 800b824:	42a5      	cmp	r5, r4
 800b826:	d10b      	bne.n	800b840 <_free_r+0x70>
 800b828:	6824      	ldr	r4, [r4, #0]
 800b82a:	4421      	add	r1, r4
 800b82c:	1854      	adds	r4, r2, r1
 800b82e:	42a3      	cmp	r3, r4
 800b830:	6011      	str	r1, [r2, #0]
 800b832:	d1e0      	bne.n	800b7f6 <_free_r+0x26>
 800b834:	681c      	ldr	r4, [r3, #0]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	6053      	str	r3, [r2, #4]
 800b83a:	4421      	add	r1, r4
 800b83c:	6011      	str	r1, [r2, #0]
 800b83e:	e7da      	b.n	800b7f6 <_free_r+0x26>
 800b840:	d902      	bls.n	800b848 <_free_r+0x78>
 800b842:	230c      	movs	r3, #12
 800b844:	6003      	str	r3, [r0, #0]
 800b846:	e7d6      	b.n	800b7f6 <_free_r+0x26>
 800b848:	6825      	ldr	r5, [r4, #0]
 800b84a:	1961      	adds	r1, r4, r5
 800b84c:	428b      	cmp	r3, r1
 800b84e:	bf04      	itt	eq
 800b850:	6819      	ldreq	r1, [r3, #0]
 800b852:	685b      	ldreq	r3, [r3, #4]
 800b854:	6063      	str	r3, [r4, #4]
 800b856:	bf04      	itt	eq
 800b858:	1949      	addeq	r1, r1, r5
 800b85a:	6021      	streq	r1, [r4, #0]
 800b85c:	6054      	str	r4, [r2, #4]
 800b85e:	e7ca      	b.n	800b7f6 <_free_r+0x26>
 800b860:	b003      	add	sp, #12
 800b862:	bd30      	pop	{r4, r5, pc}
 800b864:	24000e68 	.word	0x24000e68

0800b868 <sbrk_aligned>:
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	4e0e      	ldr	r6, [pc, #56]	; (800b8a4 <sbrk_aligned+0x3c>)
 800b86c:	460c      	mov	r4, r1
 800b86e:	6831      	ldr	r1, [r6, #0]
 800b870:	4605      	mov	r5, r0
 800b872:	b911      	cbnz	r1, 800b87a <sbrk_aligned+0x12>
 800b874:	f000 f8bc 	bl	800b9f0 <_sbrk_r>
 800b878:	6030      	str	r0, [r6, #0]
 800b87a:	4621      	mov	r1, r4
 800b87c:	4628      	mov	r0, r5
 800b87e:	f000 f8b7 	bl	800b9f0 <_sbrk_r>
 800b882:	1c43      	adds	r3, r0, #1
 800b884:	d00a      	beq.n	800b89c <sbrk_aligned+0x34>
 800b886:	1cc4      	adds	r4, r0, #3
 800b888:	f024 0403 	bic.w	r4, r4, #3
 800b88c:	42a0      	cmp	r0, r4
 800b88e:	d007      	beq.n	800b8a0 <sbrk_aligned+0x38>
 800b890:	1a21      	subs	r1, r4, r0
 800b892:	4628      	mov	r0, r5
 800b894:	f000 f8ac 	bl	800b9f0 <_sbrk_r>
 800b898:	3001      	adds	r0, #1
 800b89a:	d101      	bne.n	800b8a0 <sbrk_aligned+0x38>
 800b89c:	f04f 34ff 	mov.w	r4, #4294967295
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	bd70      	pop	{r4, r5, r6, pc}
 800b8a4:	24000e6c 	.word	0x24000e6c

0800b8a8 <_malloc_r>:
 800b8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ac:	1ccd      	adds	r5, r1, #3
 800b8ae:	f025 0503 	bic.w	r5, r5, #3
 800b8b2:	3508      	adds	r5, #8
 800b8b4:	2d0c      	cmp	r5, #12
 800b8b6:	bf38      	it	cc
 800b8b8:	250c      	movcc	r5, #12
 800b8ba:	2d00      	cmp	r5, #0
 800b8bc:	4607      	mov	r7, r0
 800b8be:	db01      	blt.n	800b8c4 <_malloc_r+0x1c>
 800b8c0:	42a9      	cmp	r1, r5
 800b8c2:	d905      	bls.n	800b8d0 <_malloc_r+0x28>
 800b8c4:	230c      	movs	r3, #12
 800b8c6:	603b      	str	r3, [r7, #0]
 800b8c8:	2600      	movs	r6, #0
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d0:	4e2e      	ldr	r6, [pc, #184]	; (800b98c <_malloc_r+0xe4>)
 800b8d2:	f000 f89d 	bl	800ba10 <__malloc_lock>
 800b8d6:	6833      	ldr	r3, [r6, #0]
 800b8d8:	461c      	mov	r4, r3
 800b8da:	bb34      	cbnz	r4, 800b92a <_malloc_r+0x82>
 800b8dc:	4629      	mov	r1, r5
 800b8de:	4638      	mov	r0, r7
 800b8e0:	f7ff ffc2 	bl	800b868 <sbrk_aligned>
 800b8e4:	1c43      	adds	r3, r0, #1
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	d14d      	bne.n	800b986 <_malloc_r+0xde>
 800b8ea:	6834      	ldr	r4, [r6, #0]
 800b8ec:	4626      	mov	r6, r4
 800b8ee:	2e00      	cmp	r6, #0
 800b8f0:	d140      	bne.n	800b974 <_malloc_r+0xcc>
 800b8f2:	6823      	ldr	r3, [r4, #0]
 800b8f4:	4631      	mov	r1, r6
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	eb04 0803 	add.w	r8, r4, r3
 800b8fc:	f000 f878 	bl	800b9f0 <_sbrk_r>
 800b900:	4580      	cmp	r8, r0
 800b902:	d13a      	bne.n	800b97a <_malloc_r+0xd2>
 800b904:	6821      	ldr	r1, [r4, #0]
 800b906:	3503      	adds	r5, #3
 800b908:	1a6d      	subs	r5, r5, r1
 800b90a:	f025 0503 	bic.w	r5, r5, #3
 800b90e:	3508      	adds	r5, #8
 800b910:	2d0c      	cmp	r5, #12
 800b912:	bf38      	it	cc
 800b914:	250c      	movcc	r5, #12
 800b916:	4629      	mov	r1, r5
 800b918:	4638      	mov	r0, r7
 800b91a:	f7ff ffa5 	bl	800b868 <sbrk_aligned>
 800b91e:	3001      	adds	r0, #1
 800b920:	d02b      	beq.n	800b97a <_malloc_r+0xd2>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	442b      	add	r3, r5
 800b926:	6023      	str	r3, [r4, #0]
 800b928:	e00e      	b.n	800b948 <_malloc_r+0xa0>
 800b92a:	6822      	ldr	r2, [r4, #0]
 800b92c:	1b52      	subs	r2, r2, r5
 800b92e:	d41e      	bmi.n	800b96e <_malloc_r+0xc6>
 800b930:	2a0b      	cmp	r2, #11
 800b932:	d916      	bls.n	800b962 <_malloc_r+0xba>
 800b934:	1961      	adds	r1, r4, r5
 800b936:	42a3      	cmp	r3, r4
 800b938:	6025      	str	r5, [r4, #0]
 800b93a:	bf18      	it	ne
 800b93c:	6059      	strne	r1, [r3, #4]
 800b93e:	6863      	ldr	r3, [r4, #4]
 800b940:	bf08      	it	eq
 800b942:	6031      	streq	r1, [r6, #0]
 800b944:	5162      	str	r2, [r4, r5]
 800b946:	604b      	str	r3, [r1, #4]
 800b948:	4638      	mov	r0, r7
 800b94a:	f104 060b 	add.w	r6, r4, #11
 800b94e:	f000 f865 	bl	800ba1c <__malloc_unlock>
 800b952:	f026 0607 	bic.w	r6, r6, #7
 800b956:	1d23      	adds	r3, r4, #4
 800b958:	1af2      	subs	r2, r6, r3
 800b95a:	d0b6      	beq.n	800b8ca <_malloc_r+0x22>
 800b95c:	1b9b      	subs	r3, r3, r6
 800b95e:	50a3      	str	r3, [r4, r2]
 800b960:	e7b3      	b.n	800b8ca <_malloc_r+0x22>
 800b962:	6862      	ldr	r2, [r4, #4]
 800b964:	42a3      	cmp	r3, r4
 800b966:	bf0c      	ite	eq
 800b968:	6032      	streq	r2, [r6, #0]
 800b96a:	605a      	strne	r2, [r3, #4]
 800b96c:	e7ec      	b.n	800b948 <_malloc_r+0xa0>
 800b96e:	4623      	mov	r3, r4
 800b970:	6864      	ldr	r4, [r4, #4]
 800b972:	e7b2      	b.n	800b8da <_malloc_r+0x32>
 800b974:	4634      	mov	r4, r6
 800b976:	6876      	ldr	r6, [r6, #4]
 800b978:	e7b9      	b.n	800b8ee <_malloc_r+0x46>
 800b97a:	230c      	movs	r3, #12
 800b97c:	603b      	str	r3, [r7, #0]
 800b97e:	4638      	mov	r0, r7
 800b980:	f000 f84c 	bl	800ba1c <__malloc_unlock>
 800b984:	e7a1      	b.n	800b8ca <_malloc_r+0x22>
 800b986:	6025      	str	r5, [r4, #0]
 800b988:	e7de      	b.n	800b948 <_malloc_r+0xa0>
 800b98a:	bf00      	nop
 800b98c:	24000e68 	.word	0x24000e68

0800b990 <_realloc_r>:
 800b990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b994:	4680      	mov	r8, r0
 800b996:	4614      	mov	r4, r2
 800b998:	460e      	mov	r6, r1
 800b99a:	b921      	cbnz	r1, 800b9a6 <_realloc_r+0x16>
 800b99c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	f7ff bf81 	b.w	800b8a8 <_malloc_r>
 800b9a6:	b92a      	cbnz	r2, 800b9b4 <_realloc_r+0x24>
 800b9a8:	f7ff ff12 	bl	800b7d0 <_free_r>
 800b9ac:	4625      	mov	r5, r4
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b4:	f000 f838 	bl	800ba28 <_malloc_usable_size_r>
 800b9b8:	4284      	cmp	r4, r0
 800b9ba:	4607      	mov	r7, r0
 800b9bc:	d802      	bhi.n	800b9c4 <_realloc_r+0x34>
 800b9be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9c2:	d812      	bhi.n	800b9ea <_realloc_r+0x5a>
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	f7ff ff6e 	bl	800b8a8 <_malloc_r>
 800b9cc:	4605      	mov	r5, r0
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d0ed      	beq.n	800b9ae <_realloc_r+0x1e>
 800b9d2:	42bc      	cmp	r4, r7
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	bf28      	it	cs
 800b9da:	463a      	movcs	r2, r7
 800b9dc:	f7ff fba4 	bl	800b128 <memcpy>
 800b9e0:	4631      	mov	r1, r6
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	f7ff fef4 	bl	800b7d0 <_free_r>
 800b9e8:	e7e1      	b.n	800b9ae <_realloc_r+0x1e>
 800b9ea:	4635      	mov	r5, r6
 800b9ec:	e7df      	b.n	800b9ae <_realloc_r+0x1e>
	...

0800b9f0 <_sbrk_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4d06      	ldr	r5, [pc, #24]	; (800ba0c <_sbrk_r+0x1c>)
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	602b      	str	r3, [r5, #0]
 800b9fc:	f7f6 fd04 	bl	8002408 <_sbrk>
 800ba00:	1c43      	adds	r3, r0, #1
 800ba02:	d102      	bne.n	800ba0a <_sbrk_r+0x1a>
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	b103      	cbz	r3, 800ba0a <_sbrk_r+0x1a>
 800ba08:	6023      	str	r3, [r4, #0]
 800ba0a:	bd38      	pop	{r3, r4, r5, pc}
 800ba0c:	24000e70 	.word	0x24000e70

0800ba10 <__malloc_lock>:
 800ba10:	4801      	ldr	r0, [pc, #4]	; (800ba18 <__malloc_lock+0x8>)
 800ba12:	f000 b811 	b.w	800ba38 <__retarget_lock_acquire_recursive>
 800ba16:	bf00      	nop
 800ba18:	24000e74 	.word	0x24000e74

0800ba1c <__malloc_unlock>:
 800ba1c:	4801      	ldr	r0, [pc, #4]	; (800ba24 <__malloc_unlock+0x8>)
 800ba1e:	f000 b80c 	b.w	800ba3a <__retarget_lock_release_recursive>
 800ba22:	bf00      	nop
 800ba24:	24000e74 	.word	0x24000e74

0800ba28 <_malloc_usable_size_r>:
 800ba28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba2c:	1f18      	subs	r0, r3, #4
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	bfbc      	itt	lt
 800ba32:	580b      	ldrlt	r3, [r1, r0]
 800ba34:	18c0      	addlt	r0, r0, r3
 800ba36:	4770      	bx	lr

0800ba38 <__retarget_lock_acquire_recursive>:
 800ba38:	4770      	bx	lr

0800ba3a <__retarget_lock_release_recursive>:
 800ba3a:	4770      	bx	lr

0800ba3c <_init>:
 800ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3e:	bf00      	nop
 800ba40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba42:	bc08      	pop	{r3}
 800ba44:	469e      	mov	lr, r3
 800ba46:	4770      	bx	lr

0800ba48 <_fini>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	bf00      	nop
 800ba4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4e:	bc08      	pop	{r3}
 800ba50:	469e      	mov	lr, r3
 800ba52:	4770      	bx	lr
